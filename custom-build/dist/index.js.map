{"version":3,"file":"index.js","sources":["../../lib/msal-node/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../lib/msal-node/src/utils/Constants.ts","../../lib/msal-common/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../lib/msal-common/src/utils/Constants.ts","../../lib/msal-common/src/error/AuthError.ts","../../lib/msal-common/src/crypto/ICrypto.ts","../../lib/msal-common/src/error/ClientAuthError.ts","../../lib/msal-common/src/utils/StringUtils.ts","../../lib/msal-common/src/logger/Logger.ts","../../lib/msal-common/src/packageMetadata.ts","../../lib/msal-common/src/cache/entities/CredentialEntity.ts","../../lib/msal-common/src/error/ClientConfigurationError.ts","../../lib/msal-common/src/request/ScopeSet.ts","../../lib/msal-common/src/account/ClientInfo.ts","../../lib/msal-common/src/authority/AuthorityType.ts","../../lib/msal-common/src/cache/entities/AccountEntity.ts","../../lib/msal-common/src/account/AuthToken.ts","../../lib/msal-common/src/cache/CacheManager.ts","../../lib/msal-common/src/config/ClientConfiguration.ts","../../lib/msal-common/src/error/ServerError.ts","../../lib/msal-common/src/network/ThrottlingUtils.ts","../../lib/msal-common/src/network/NetworkManager.ts","../../lib/msal-common/src/client/BaseClient.ts","../../lib/msal-common/src/request/RequestValidator.ts","../../lib/msal-common/src/request/RequestParameterBuilder.ts","../../lib/msal-common/src/cache/entities/IdTokenEntity.ts","../../lib/msal-common/src/utils/TimeUtils.ts","../../lib/msal-common/src/cache/entities/AccessTokenEntity.ts","../../lib/msal-common/src/cache/entities/RefreshTokenEntity.ts","../../lib/msal-common/src/error/InteractionRequiredAuthError.ts","../../lib/msal-common/src/cache/entities/CacheRecord.ts","../../lib/msal-common/src/utils/ProtocolUtils.ts","../../lib/msal-common/src/url/UrlString.ts","../../lib/msal-common/src/crypto/PopTokenGenerator.ts","../../lib/msal-common/src/cache/entities/AppMetadataEntity.ts","../../lib/msal-common/src/cache/persistence/TokenCacheContext.ts","../../lib/msal-common/src/response/ResponseHandler.ts","../../lib/msal-common/src/client/AuthorizationCodeClient.ts","../../lib/msal-common/src/client/DeviceCodeClient.ts","../../lib/msal-common/src/client/RefreshTokenClient.ts","../../lib/msal-common/src/client/ClientCredentialClient.ts","../../lib/msal-common/src/client/OnBehalfOfClient.ts","../../lib/msal-common/src/client/SilentFlowClient.ts","../../lib/msal-common/src/client/UsernamePasswordClient.ts","../../lib/msal-common/src/authority/OpenIdConfigResponse.ts","../../lib/msal-common/src/authority/ProtocolMode.ts","../../lib/msal-common/src/cache/entities/AuthorityMetadataEntity.ts","../../lib/msal-common/src/authority/CloudInstanceDiscoveryResponse.ts","../../lib/msal-common/src/authority/RegionDiscovery.ts","../../lib/msal-common/src/authority/Authority.ts","../../lib/msal-common/src/authority/AuthorityFactory.ts","../../lib/msal-common/src/cache/entities/ServerTelemetryEntity.ts","../../lib/msal-common/src/cache/entities/ThrottlingEntity.ts","../../lib/msal-common/src/telemetry/server/ServerTelemetryManager.ts","../../lib/msal-node/src/network/HttpClient.ts","../../lib/msal-node/src/utils/NetworkUtils.ts","../../lib/msal-node/src/config/Configuration.ts","../../lib/msal-node/src/crypto/GuidGenerator.ts","../../lib/msal-node/src/utils/EncodingUtils.ts","../../lib/msal-node/src/crypto/PkceGenerator.ts","../../lib/msal-node/src/crypto/CryptoProvider.ts","../../lib/msal-node/src/cache/serializer/Deserializer.ts","../../lib/msal-node/src/cache/serializer/Serializer.ts","../../lib/msal-node/src/cache/NodeStorage.ts","../../lib/msal-node/src/cache/TokenCache.ts","../../lib/msal-node/src/packageMetadata.ts","../../lib/msal-node/src/client/ClientApplication.ts","../../lib/msal-node/src/client/PublicClientApplication.ts","../../lib/msal-node/src/client/ClientAssertion.ts","../../lib/msal-node/src/client/ConfidentialClientApplication.ts"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * http methods\n */\nexport enum HttpMethod {\n    GET = \"get\",\n    POST = \"post\",\n}\n\n/**\n * Constants used for region discovery\n */\nexport const REGION_ENVIRONMENT_VARIABLE = \"REGION_NAME\";\n\n/**\n * Constant used for PKCE\n */\nexport const RANDOM_OCTET_SIZE = 32;\n\n/**\n * Constants used in PKCE\n */\nexport const Hash = {\n    SHA256: \"sha256\",\n};\n\n/**\n * Constants for encoding schemes\n */\nexport const CharSet = {\n    CV_CHARSET:\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\",\n};\n\n/**\n * Cache Constants\n */\nexport const CACHE = {\n    FILE_CACHE: \"fileCache\",\n    EXTENSION_LIB: \"extenstion_library\",\n};\n\n/**\n * Constants\n */\nexport const Constants = {\n    MSAL_SKU: \"msal.js.node\",\n    JWT_BEARER_ASSERTION_TYPE: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\n};\n\n/**\n * API Codes for Telemetry purposes.\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\n * 0-99 Silent Flow\n * 600-699 Device Code Flow\n * 800-899 Auth Code Flow\n */\nexport enum ApiId {\n    acquireTokenSilent = 62,\n    acquireTokenByUsernamePassword = 371,\n    acquireTokenByDeviceCode = 671,\n    acquireTokenByClientCredential = 771,\n    acquireTokenByCode = 871,\n    acquireTokenByRefreshToken = 872\n}\n\n/**\n * JWT  constants\n */\nexport const JwtConstants = {\n    ALGORITHM: \"alg\",\n    RSA_256: \"RS256\",\n    X5T: \"x5t\", \n    X5C: \"x5c\",\n    AUDIENCE: \"aud\",\n    EXPIRATION_TIME: \"exp\",\n    ISSUER: \"iss\",\n    SUBJECT: \"sub\",\n    NOT_BEFORE: \"nbf\",\n    JWT_ID: \"jti\",\n};\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const Constants = {\n    LIBRARY_NAME: \"MSAL.JS\",\n    SKU: \"msal.js.common\",\n    // Prefix for all library cache entries\n    CACHE_PREFIX: \"msal\",\n    // default authority\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n    // ADFS String\n    ADFS: \"adfs\",\n    // Default AAD Instance Discovery Endpoint\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n    // Resource delimiter - used for certain cache entries\n    RESOURCE_DELIM: \"|\",\n    // Placeholder for non-existent account ids/objects\n    NO_ACCOUNT: \"NO_ACCOUNT\",\n    // Claims\n    CLAIMS: \"claims\",\n    // Consumer UTID\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    // Default scopes\n    OPENID_SCOPE: \"openid\",\n    PROFILE_SCOPE: \"profile\",\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\n    EMAIL_SCOPE: \"email\",\n    // Default response type for authorization code flow\n    CODE_RESPONSE_TYPE: \"code\",\n    CODE_GRANT_TYPE: \"authorization_code\",\n    RT_GRANT_TYPE: \"refresh_token\",\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n    AUTHORIZATION_PENDING: \"authorization_pending\",\n    NOT_DEFINED: \"not_defined\",\n    EMPTY_STRING: \"\",\n    FORWARD_SLASH: \"/\",\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n    IMDS_VERSION: \"2020-06-01\",\n    IMDS_TIMEOUT: 2000,\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"AUTO_DISCOVER\",\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n    KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"]\n};\n\nexport const OIDC_DEFAULT_SCOPES = [\n    Constants.OPENID_SCOPE,\n    Constants.PROFILE_SCOPE,\n    Constants.OFFLINE_ACCESS_SCOPE\n];\n\nexport const OIDC_SCOPES = [\n    ...OIDC_DEFAULT_SCOPES,\n    Constants.EMAIL_SCOPE\n];\n\n/**\n * Request header names\n */\nexport enum HeaderNames {\n    CONTENT_TYPE = \"Content-Type\",\n    RETRY_AFTER = \"Retry-After\"\n}\n\n/**\n * Persistent cache keys MSAL which stay while user is logged in.\n */\nexport enum PersistentCacheKeys {\n    ID_TOKEN = \"idtoken\",\n    CLIENT_INFO = \"client.info\",\n    ADAL_ID_TOKEN = \"adal.idtoken\",\n    ERROR = \"error\",\n    ERROR_DESC = \"error.description\"\n}\n\n/**\n * String constants related to AAD Authority\n */\nexport enum AADAuthorityConstants {\n    COMMON = \"common\",\n    ORGANIZATIONS = \"organizations\",\n    CONSUMERS = \"consumers\"\n}\n\n/**\n * Keys in the hashParams sent by AAD Server\n */\nexport enum AADServerParamKeys {\n    CLIENT_ID = \"client_id\",\n    REDIRECT_URI = \"redirect_uri\",\n    RESPONSE_TYPE = \"response_type\",\n    RESPONSE_MODE = \"response_mode\",\n    GRANT_TYPE = \"grant_type\",\n    CLAIMS = \"claims\",\n    SCOPE = \"scope\",\n    ERROR = \"error\",\n    ERROR_DESCRIPTION = \"error_description\",\n    ACCESS_TOKEN = \"access_token\",\n    ID_TOKEN = \"id_token\",\n    REFRESH_TOKEN = \"refresh_token\",\n    EXPIRES_IN = \"expires_in\",\n    STATE = \"state\",\n    NONCE = \"nonce\",\n    PROMPT = \"prompt\",\n    SESSION_STATE = \"session_state\",\n    CLIENT_INFO = \"client_info\",\n    CODE = \"code\",\n    CODE_CHALLENGE = \"code_challenge\",\n    CODE_CHALLENGE_METHOD = \"code_challenge_method\",\n    CODE_VERIFIER = \"code_verifier\",\n    CLIENT_REQUEST_ID = \"client-request-id\",\n    X_CLIENT_SKU = \"x-client-SKU\",\n    X_CLIENT_VER = \"x-client-VER\",\n    X_CLIENT_OS = \"x-client-OS\",\n    X_CLIENT_CPU = \"x-client-CPU\",\n    X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\",\n    X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\",\n    X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\",\n    POST_LOGOUT_URI = \"post_logout_redirect_uri\",\n    ID_TOKEN_HINT= \"id_token_hint\",\n    DEVICE_CODE = \"device_code\",\n    CLIENT_SECRET = \"client_secret\",\n    CLIENT_ASSERTION = \"client_assertion\",\n    CLIENT_ASSERTION_TYPE = \"client_assertion_type\",\n    TOKEN_TYPE = \"token_type\",\n    REQ_CNF = \"req_cnf\",\n    OBO_ASSERTION = \"assertion\",\n    REQUESTED_TOKEN_USE = \"requested_token_use\",\n    ON_BEHALF_OF = \"on_behalf_of\",\n    FOCI = \"foci\"\n}\n\n/**\n * Claims request keys\n */\nexport enum ClaimsRequestKeys {\n    ACCESS_TOKEN = \"access_token\",\n    XMS_CC = \"xms_cc\"\n}\n\n/**\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\n */\nexport const PromptValue = {\n    LOGIN: \"login\",\n    SELECT_ACCOUNT: \"select_account\",\n    CONSENT: \"consent\",\n    NONE: \"none\",\n};\n\n/**\n * SSO Types - generated to populate hints\n */\nexport enum SSOTypes {\n    ACCOUNT = \"account\",\n    SID = \"sid\",\n    LOGIN_HINT = \"login_hint\",\n    ID_TOKEN = \"id_token\",\n    DOMAIN_HINT = \"domain_hint\",\n    ORGANIZATIONS = \"organizations\",\n    CONSUMERS = \"consumers\",\n    ACCOUNT_ID = \"accountIdentifier\",\n    HOMEACCOUNT_ID = \"homeAccountIdentifier\"\n}\n\n/**\n * Disallowed extra query parameters.\n */\nexport const BlacklistedEQParams = [\n    SSOTypes.SID,\n    SSOTypes.LOGIN_HINT\n];\n\n/**\n * allowed values for codeVerifier\n */\nexport const CodeChallengeMethodValues = {\n    PLAIN: \"plain\",\n    S256: \"S256\"\n};\n\n/**\n * The method used to encode the code verifier for the code challenge parameter. can be one\n * of plain or s256. if excluded, code challenge is assumed to be plaintext. for more\n * information, see the pkce rcf: https://tools.ietf.org/html/rfc7636\n */\nexport const CodeChallengeMethodValuesArray: string[] = [\n    CodeChallengeMethodValues.PLAIN,\n    CodeChallengeMethodValues.S256\n];\n\n/**\n * allowed values for response_mode\n */\nexport enum ResponseMode {\n    QUERY = \"query\",\n    FRAGMENT = \"fragment\",\n    FORM_POST = \"form_post\"\n}\n\n/**\n * allowed grant_type\n */\nexport enum GrantType {\n    IMPLICIT_GRANT = \"implicit\",\n    AUTHORIZATION_CODE_GRANT = \"authorization_code\",\n    CLIENT_CREDENTIALS_GRANT = \"client_credentials\",\n    RESOURCE_OWNER_PASSWORD_GRANT = \"password\",\n    REFRESH_TOKEN_GRANT = \"refresh_token\",\n    DEVICE_CODE_GRANT = \"device_code\",\n    JWT_BEARER = \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n}\n\n/**\n * Account types in Cache\n */\nexport enum CacheAccountType {\n    MSSTS_ACCOUNT_TYPE = \"MSSTS\",\n    ADFS_ACCOUNT_TYPE = \"ADFS\",\n    MSAV1_ACCOUNT_TYPE = \"MSA\",\n    GENERIC_ACCOUNT_TYPE = \"Generic\" // NTLM, Kerberos, FBA, Basic etc\n}\n\n/**\n * Separators used in cache\n */\nexport enum Separators {\n    CACHE_KEY_SEPARATOR = \"-\",\n    CLIENT_INFO_SEPARATOR = \".\"\n}\n\n/**\n * Credential Type stored in the cache\n */\nexport enum CredentialType {\n    ID_TOKEN = \"IdToken\",\n    ACCESS_TOKEN = \"AccessToken\",\n    ACCESS_TOKEN_WITH_AUTH_SCHEME = \"AccessToken_With_AuthScheme\",\n    REFRESH_TOKEN = \"RefreshToken\",\n}\n\n/**\n * Credential Type stored in the cache\n */\nexport enum CacheSchemaType {\n    ACCOUNT = \"Account\",\n    CREDENTIAL = \"Credential\",\n    ID_TOKEN = \"IdToken\",\n    ACCESS_TOKEN = \"AccessToken\",\n    REFRESH_TOKEN = \"RefreshToken\",\n    APP_METADATA = \"AppMetadata\",\n    TEMPORARY = \"TempCache\",\n    TELEMETRY = \"Telemetry\",\n    UNDEFINED = \"Undefined\",\n    THROTTLING = \"Throttling\"\n}\n\n/**\n * Combine all cache types\n */\nexport enum CacheType {\n    ADFS = 1001,\n    MSA = 1002,\n    MSSTS = 1003,\n    GENERIC = 1004,\n    ACCESS_TOKEN = 2001,\n    REFRESH_TOKEN = 2002,\n    ID_TOKEN = 2003,\n    APP_METADATA = 3001,\n    UNDEFINED = 9999\n}\n\n/**\n * More Cache related constants\n */\nexport const APP_METADATA = \"appmetadata\";\nexport const ClientInfo = \"client_info\";\nexport const THE_FAMILY_ID = \"1\";\n\nexport const AUTHORITY_METADATA_CONSTANTS = {\n    CACHE_KEY: \"authority-metadata\",\n    REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\n};\n\nexport enum AuthorityMetadataSource {\n    CONFIG = \"config\",\n    CACHE = \"cache\",\n    NETWORK = \"network\"\n}\n\nexport const SERVER_TELEM_CONSTANTS = {\n    SCHEMA_VERSION: 2,\n    MAX_CUR_HEADER_BYTES: 80, // ESTS limit is 100B, set to 80 to provide a 20B buffer\n    MAX_LAST_HEADER_BYTES: 330, // ESTS limit is 350B, set to 330 to provide a 20B buffer,\n    MAX_CACHED_ERRORS: 50, // Limit the number of errors that can be stored to prevent uncontrolled size gains\n    CACHE_KEY: \"server-telemetry\",\n    CATEGORY_SEPARATOR: \"|\",\n    VALUE_SEPARATOR: \",\",\n    OVERFLOW_TRUE: \"1\",\n    OVERFLOW_FALSE: \"0\",\n    UNKNOWN_ERROR: \"unknown_error\"\n};\n\n/**\n * Type of the authentication request\n */\nexport enum AuthenticationScheme {\n    POP = \"pop\",\n    BEARER = \"Bearer\"\n}\n\n/**\n * Constants related to throttling\n */\nexport const ThrottlingConstants = {\n    // Default time to throttle RequestThumbprint in seconds\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\n    // Default maximum time to throttle in seconds, overrides what the server sends back\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n    // Prefix for storing throttling entries\n    THROTTLING_PREFIX: \"throttling\",\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\n\nexport const Errors = {\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\n};\n\n/**\n * Password grant parameters\n */\nexport enum PasswordGrantConstants {\n    username = \"username\",\n    password = \"password\"\n}\n\n/**\n * Response codes\n */\nexport enum  ResponseCodes {\n    httpSuccess = 200,\n    httpBadRequest = 400\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants } from \"../utils/Constants\";\n\n/**\n * AuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const AuthErrorMessage = {\n    unexpectedError: {\n        code: \"unexpected_error\",\n        desc: \"Unexpected error in authentication.\"\n    }\n};\n\n/**\n * General error class thrown by the MSAL.js library.\n */\nexport class AuthError extends Error {\n\n    /**\n     * Short string denoting error\n     */\n    errorCode: string;\n\n    /**\n     * Detailed description of error\n     */\n    errorMessage: string;\n\n    /**\n     * Describes the subclass of an error\n     */\n    subError: string;\n\n    constructor(errorCode?: string, errorMessage?: string, suberror?: string) {\n        const errorString = errorMessage ? `${errorCode}: ${errorMessage}` : errorCode;\n        super(errorString);\n        Object.setPrototypeOf(this, AuthError.prototype);\n\n        this.errorCode = errorCode || Constants.EMPTY_STRING;\n        this.errorMessage = errorMessage || \"\";\n        this.subError = suberror || \"\";\n        this.name = \"AuthError\";\n    }\n\n    /**\n     * Creates an error that is thrown when something unexpected happens in the library.\n     * @param errDesc\n     */\n    static createUnexpectedError(errDesc: string): AuthError {\n        return new AuthError(AuthErrorMessage.unexpectedError.code, `${AuthErrorMessage.unexpectedError.desc}: ${errDesc}`);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"../error/AuthError\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { SignedHttpRequest } from \"./SignedHttpRequest\";\n\n/**\n * The PkceCodes type describes the structure\n * of objects that contain PKCE code\n * challenge and verifier pairs\n */\nexport type PkceCodes = {\n    verifier: string,\n    challenge: string\n};\n\n/**\n * Interface for crypto functions used by library\n */\nexport interface ICrypto {\n    /**\n     * Creates a guid randomly.\n     */\n    createNewGuid(): string;\n    /**\n     * base64 Encode string\n     * @param input \n     */\n    base64Encode(input: string): string;\n    /**\n     * base64 decode string\n     * @param input \n     */\n    base64Decode(input: string): string;\n    /**\n     * Generate PKCE codes for OAuth. See RFC here: https://tools.ietf.org/html/rfc7636\n     */\n    generatePkceCodes(): Promise<PkceCodes>;\n    /**\n     * Generates an JWK RSA S256 Thumbprint\n     * @param request\n     */\n    getPublicKeyThumbprint(request: BaseAuthRequest): Promise<string>;\n    /** \n     * Returns a signed proof-of-possession token with a given acces token that contains a cnf claim with the required kid.\n     * @param accessToken \n     */\n    signJwt(payload: SignedHttpRequest, kid: string): Promise<string>;\n}\n\nexport const DEFAULT_CRYPTO_IMPLEMENTATION: ICrypto = {\n    createNewGuid: (): string => {\n        const notImplErr = \"Crypto interface - createNewGuid() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    base64Decode: (): string => {\n        const notImplErr = \"Crypto interface - base64Decode() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    base64Encode: (): string => {\n        const notImplErr = \"Crypto interface - base64Encode() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async generatePkceCodes(): Promise<PkceCodes> {\n        const notImplErr = \"Crypto interface - generatePkceCodes() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async getPublicKeyThumbprint(): Promise<string> {\n        const notImplErr = \"Crypto interface - getPublicKeyThumbprint() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async signJwt(): Promise<string> {\n        const notImplErr = \"Crypto interface - signJwt() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\nimport { ScopeSet } from \"../request/ScopeSet\";\n\n/**\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const ClientAuthErrorMessage = {\n    clientInfoDecodingError: {\n        code: \"client_info_decoding_error\",\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n    },\n    clientInfoEmptyError: {\n        code: \"client_info_empty_error\",\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n    },\n    tokenParsingError: {\n        code: \"token_parsing_error\",\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n    },\n    nullOrEmptyToken: {\n        code: \"null_or_empty_token\",\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n    },\n    endpointResolutionError: {\n        code: \"endpoints_resolution_error\",\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n    },\n    networkError: {\n        code: \"network_error\",\n        desc: \"Network request failed. Please check network trace to determine root cause.\"\n    },\n    unableToGetOpenidConfigError: {\n        code: \"openid_config_error\",\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n    },\n    hashNotDeserialized: {\n        code: \"hash_not_deserialized\",\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n    },\n    blankGuidGenerated: {\n        code: \"blank_guid_generated\",\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n    },\n    invalidStateError: {\n        code: \"invalid_state\",\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n    },\n    stateMismatchError: {\n        code: \"state_mismatch\",\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n    },\n    stateNotFoundError: {\n        code: \"state_not_found\",\n        desc: \"State not found\"\n    },\n    nonceMismatchError: {\n        code: \"nonce_mismatch\",\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n    },\n    nonceNotFoundError: {\n        code: \"nonce_not_found\",\n        desc: \"nonce not found\"\n    },\n    noTokensFoundError: {\n        code: \"no_tokens_found\",\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n    },\n    multipleMatchingTokens: {\n        code: \"multiple_matching_tokens\",\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\n            \"Call AcquireToken again providing more requirements such as authority or account.\"\n    },\n    multipleMatchingAccounts: {\n        code: \"multiple_matching_accounts\",\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n    },\n    multipleMatchingAppMetadata: {\n        code: \"multiple_matching_appMetadata\",\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n    },\n    tokenRequestCannotBeMade: {\n        code: \"request_cannot_be_made\",\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\n    },\n    appendEmptyScopeError: {\n        code: \"cannot_append_empty_scope\",\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n    },\n    removeEmptyScopeError: {\n        code: \"cannot_remove_empty_scope\",\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n    },\n    appendScopeSetError: {\n        code: \"cannot_append_scopeset\",\n        desc: \"Cannot append ScopeSet due to error.\"\n    },\n    emptyInputScopeSetError: {\n        code: \"empty_input_scopeset\",\n        desc: \"Empty input ScopeSet cannot be processed.\"\n    },\n    DeviceCodePollingCancelled: {\n        code: \"device_code_polling_cancelled\",\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n    },\n    DeviceCodeExpired: {\n        code: \"device_code_expired\",\n        desc: \"Device code is expired.\"\n    },\n    NoAccountInSilentRequest: {\n        code: \"no_account_in_silent_request\",\n        desc: \"Please pass an account object, silent flow is not supported without account information\"\n    },\n    invalidCacheRecord: {\n        code: \"invalid_cache_record\",\n        desc: \"Cache record object was null or undefined.\"\n    },\n    invalidCacheEnvironment: {\n        code: \"invalid_cache_environment\",\n        desc: \"Invalid environment when attempting to create cache entry\"\n    },\n    noAccountFound: {\n        code: \"no_account_found\",\n        desc: \"No account found in cache for given key.\"\n    },\n    CachePluginError: {\n        code: \"no cache plugin set on CacheManager\",\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n    },\n    noCryptoObj: {\n        code: \"no_crypto_object\",\n        desc: \"No crypto object detected. This is required for the following operation: \"\n    },\n    invalidCacheType: {\n        code: \"invalid_cache_type\",\n        desc: \"Invalid cache type\"\n    },\n    unexpectedAccountType: {\n        code: \"unexpected_account_type\",\n        desc: \"Unexpected account type.\"\n    },\n    unexpectedCredentialType: {\n        code: \"unexpected_credential_type\",\n        desc: \"Unexpected credential type.\"\n    },\n    invalidAssertion: {\n        code: \"invalid_assertion\",\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n    },\n    invalidClientCredential: {\n        code: \"invalid_client_credential\",\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n    },\n    tokenRefreshRequired: {\n        code: \"token_refresh_required\",\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n    },\n    userTimeoutReached: {\n        code: \"user_timeout_reached\",\n        desc: \"User defined timeout for device code polling reached\",\n    },\n    tokenClaimsRequired: {\n        code: \"token_claims_cnf_required_for_signedjwt\",\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n    },\n    noAuthorizationCodeFromServer: {\n        code: \"authorization_code_missing_from_server_response\",\n        desc: \"Server response does not contain an authorization code to proceed\"\n    },\n    noAzureRegionDetected: {\n        code: \"no_azure_region_detected\",\n        desc: \"No azure region was detected and no fallback was made available\"\n    },\n    accessTokenEntityNullError: {\n        code: \"access_token_entity_null\",\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n    }\n};\n\n/**\n * Error thrown when there is an error in the client code running on the browser.\n */\nexport class ClientAuthError extends AuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientAuthError\";\n\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\n    }\n\n    /**\n     * Creates an error thrown when client info object doesn't decode correctly.\n     * @param caughtError\n     */\n    static createClientInfoDecodingError(caughtError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code,\n            `${ClientAuthErrorMessage.clientInfoDecodingError.desc} Failed with error: ${caughtError}`);\n    }\n\n    /**\n     * Creates an error thrown if the client info is empty.\n     * @param rawClientInfo\n     */\n    static createClientInfoEmptyError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code,\n            `${ClientAuthErrorMessage.clientInfoEmptyError.desc}`);\n    }\n\n    /**\n     * Creates an error thrown when the id token extraction errors out.\n     * @param err\n     */\n    static createTokenParsingError(caughtExtractionError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code,\n            `${ClientAuthErrorMessage.tokenParsingError.desc} Failed with error: ${caughtExtractionError}`);\n    }\n\n    /**\n     * Creates an error thrown when the id token string is null or empty.\n     * @param invalidRawTokenString\n     */\n    static createTokenNullOrEmptyError(invalidRawTokenString: string) : ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code,\n            `${ClientAuthErrorMessage.nullOrEmptyToken.desc} Raw Token Value: ${invalidRawTokenString}`);\n    }\n\n    /**\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\n     */\n    static createEndpointDiscoveryIncompleteError(errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code,\n            `${ClientAuthErrorMessage.endpointResolutionError.desc} Detail: ${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the fetch client throws\n     */\n    static createNetworkError(endpoint: string, errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code,\n            `${ClientAuthErrorMessage.networkError.desc} | Fetch client threw: ${errDetail} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\n     */\n    static createUnableToGetOpenidConfigError(errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code,\n            `${ClientAuthErrorMessage.unableToGetOpenidConfigError.desc} Attempted to retrieve endpoints from: ${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the hash cannot be deserialized.\n     * @param hashParamObj\n     */\n    static createHashNotDeserializedError(hashParamObj: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code,\n            `${ClientAuthErrorMessage.hashNotDeserialized.desc} Given Object: ${hashParamObj}`);\n    }\n\n    /**\n     * Creates an error thrown when the state cannot be parsed.\n     * @param invalidState\n     */\n    static createInvalidStateError(invalidState: string, errorString?: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code,\n            `${ClientAuthErrorMessage.invalidStateError.desc} Invalid State: ${invalidState}, Root Err: ${errorString}`);\n    }\n\n    /**\n     * Creates an error thrown when two states do not match.\n     */\n    static createStateMismatchError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code,\n            ClientAuthErrorMessage.stateMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the state is not present\n     * @param missingState\n     */\n    static createStateNotFoundError(missingState: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code,\n            `${ClientAuthErrorMessage.stateNotFoundError.desc}:  ${missingState}`);\n    }\n\n    /**\n     * Creates an error thrown when the nonce does not match.\n     */\n    static createNonceMismatchError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code,\n            ClientAuthErrorMessage.nonceMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the mnonce is not present\n     * @param missingNonce\n     */\n    static createNonceNotFoundError(missingNonce: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code,\n            `${ClientAuthErrorMessage.nonceNotFoundError.desc}:  ${missingNonce}`);\n    }\n\n    /**\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\n     */\n    static createNoTokensFoundError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);\n    }\n\n    /**\n     * Throws error when multiple tokens are in cache.\n     */\n    static createMultipleMatchingTokensInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code,\n            `${ClientAuthErrorMessage.multipleMatchingTokens.desc}.`);\n    }\n\n    /**\n     * Throws error when multiple accounts are in cache for the given params\n     */\n    static createMultipleMatchingAccountsInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code,\n            ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n    }\n\n    /**\n     * Throws error when multiple appMetada are in cache for the given clientId.\n     */\n    static createMultipleMatchingAppMetadataInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code,\n            ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n    }\n\n    /**\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\n     */\n    static createTokenRequestCannotBeMadeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n    }\n\n    /**\n     * Throws error when attempting to append a null, undefined or empty scope to a set\n     * @param givenScope\n     */\n    static createAppendEmptyScopeToSetError(givenScope: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, `${ClientAuthErrorMessage.appendEmptyScopeError.desc} Given Scope: ${givenScope}`);\n    }\n\n    /**\n     * Throws error when attempting to append a null, undefined or empty scope to a set\n     * @param givenScope\n     */\n    static createRemoveEmptyScopeFromSetError(givenScope: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, `${ClientAuthErrorMessage.removeEmptyScopeError.desc} Given Scope: ${givenScope}`);\n    }\n\n    /**\n     * Throws error when attempting to append null or empty ScopeSet.\n     * @param appendError\n     */\n    static createAppendScopeSetError(appendError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, `${ClientAuthErrorMessage.appendScopeSetError.desc} Detail Error: ${appendError}`);\n    }\n\n    /**\n     * Throws error if ScopeSet is null or undefined.\n     * @param givenScopeSet\n     */\n    static createEmptyInputScopeSetError(givenScopeSet: ScopeSet): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, `${ClientAuthErrorMessage.emptyInputScopeSetError.desc} Given ScopeSet: ${givenScopeSet}`);\n    }\n\n    /**\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\n     */\n    static createDeviceCodeCancelledError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, `${ClientAuthErrorMessage.DeviceCodePollingCancelled.desc}`);\n    }\n\n    /**\n     * Throws error if device code is expired\n     */\n    static createDeviceCodeExpiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, `${ClientAuthErrorMessage.DeviceCodeExpired.desc}`);\n    }\n\n    /**\n     * Throws error when silent requests are made without an account object\n     */\n    static createNoAccountInSilentRequestError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, `${ClientAuthErrorMessage.NoAccountInSilentRequest.desc}`);\n    }\n\n    /**\n     * Throws error when cache record is null or undefined.\n     */\n    static createNullOrUndefinedCacheRecord(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n    }\n\n    /**\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\n     */\n    static createInvalidCacheEnvironmentError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n    }\n\n    /**\n     * Throws error when account is not found in cache.\n     */\n    static createNoAccountFoundError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n    }\n\n    /**\n     * Throws error if ICachePlugin not set on CacheManager.\n     */\n    static createCachePluginError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, `${ClientAuthErrorMessage.CachePluginError.desc}`);\n    }\n\n    /**\n     * Throws error if crypto object not found.\n     * @param operationName\n     */\n    static createNoCryptoObjectError(operationName: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, `${ClientAuthErrorMessage.noCryptoObj.desc}${operationName}`);\n    }\n\n    /**\n     * Throws error if cache type is invalid.\n     */\n    static createInvalidCacheTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, `${ClientAuthErrorMessage.invalidCacheType.desc}`);\n    }\n\n    /**\n     * Throws error if unexpected account type.\n     */\n    static createUnexpectedAccountTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, `${ClientAuthErrorMessage.unexpectedAccountType.desc}`);\n    }\n\n    /**\n     * Throws error if unexpected credential type.\n     */\n    static createUnexpectedCredentialTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, `${ClientAuthErrorMessage.unexpectedCredentialType.desc}`);\n    }\n\n    /**\n     * Throws error if client assertion is not valid.\n     */\n    static createInvalidAssertionError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, `${ClientAuthErrorMessage.invalidAssertion.desc}`);\n    }\n\n    /**\n     * Throws error if client assertion is not valid.\n     */\n    static createInvalidCredentialError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, `${ClientAuthErrorMessage.invalidClientCredential.desc}`);\n    }\n\n    /**\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\n     */\n    static createRefreshRequiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n    }\n\n    /**\n     * Throws error if the user defined timeout is reached.\n     */\n    static createUserTimeoutReachedError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n    }\n\n    /*\n     * Throws error if token claims are not populated for a signed jwt generation\n     */\n    static createTokenClaimsRequiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n    }\n\n    /**\n     * Throws error when the authorization code is missing from the server response\n     */\n    static createNoAuthCodeInServerResponseError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { DecodedAuthToken } from \"../account/DecodedAuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * @hidden\n */\nexport class StringUtils {\n\n    /**\n     * decode a JWT\n     *\n     * @param authToken\n     */\n    static decodeAuthToken(authToken: string): DecodedAuthToken {\n        if (StringUtils.isEmpty(authToken)) {\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n        }\n        const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n        const matches = tokenPartsRegex.exec(authToken);\n        if (!matches || matches.length < 4) {\n            throw ClientAuthError.createTokenParsingError(`Given token is malformed: ${JSON.stringify(authToken)}`);\n        }\n        const crackedToken: DecodedAuthToken = {\n            header: matches[1],\n            JWSPayload: matches[2],\n            JWSSig: matches[3]\n        };\n        return crackedToken;\n    }\n\n    /**\n     * Check if a string is empty.\n     *\n     * @param str\n     */\n    static isEmpty(str?: string): boolean {\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\n    }\n\n    /**\n     * Check if stringified object is empty\n     * @param strObj \n     */\n    static isEmptyObj(strObj?: string): boolean {\n        if (strObj && !StringUtils.isEmpty(strObj)) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            } catch (e) {}\n        }\n        return true;\n    }\n\n    static startsWith(str: string, search: string): boolean {\n        return str.indexOf(search) === 0;\n    }\n\n    static endsWith(str: string, search: string): boolean {\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\n    }\n\n    /**\n     * Parses string into an object.\n     *\n     * @param query\n     */\n    static queryStringToObject<T>(query: string): T {\n        let match: Array<string> | null; // Regex for replacing addition symbol with a space\n        const pl = /\\+/g;\n        const search = /([^&=]+)=([^&]*)/g;\n        const decode = (s: string): string => decodeURIComponent(decodeURIComponent(s.replace(pl, \" \")));\n        const obj: {} = {};\n        match = search.exec(query);\n        while (match) {\n            obj[decode(match[1])] = decode(match[2]);\n            match = search.exec(query);\n        }\n        return obj as T;\n    }\n\n    /**\n     * Trims entries in an array.\n     *\n     * @param arr\n     */\n    static trimArrayEntries(arr: Array<string>): Array<string> {\n        return arr.map(entry => entry.trim());\n    }\n\n    /**\n     * Removes empty strings from array\n     * @param arr\n     */\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string> {\n        return arr.filter(entry => {\n            return !StringUtils.isEmpty(entry);\n        });\n    }\n\n    /**\n     * Attempts to parse a string into JSON\n     * @param str\n     */\n    static jsonParseHelper<T>(str: string): T | null {\n        try {\n            return JSON.parse(str) as T;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n     * @param input String to match against\n     */\n    static matchPattern(pattern: string, input: string): boolean {\n        /**\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n         */\n        const regex: RegExp = new RegExp(pattern.replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\"));\n\n        return regex.test(input);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { LoggerOptions } from \"../config/ClientConfiguration\";\nimport { Constants } from \"../utils/Constants\";\n\n/**\n * Options for logger messages.\n */\nexport type LoggerMessageOptions = {\n    logLevel: LogLevel,\n    correlationId?: string,\n    containsPii?: boolean,\n    context?: string\n};\n\n/**\n * Log message level.\n */\nexport enum LogLevel {\n    Error,\n    Warning,\n    Info,\n    Verbose,\n    Trace\n}\n\n/**\n * Callback to send the messages to.\n */\nexport interface ILoggerCallback {\n    (level: LogLevel, message: string, containsPii: boolean): void;\n}\n\n/**\n * Class which facilitates logging of messages to a specific place.\n */\nexport class Logger {\n\n    // Correlation ID for request, usually set by user.\n    private correlationId: string;\n\n    // Current log level, defaults to info.\n    private level: LogLevel = LogLevel.Info;\n\n    // Boolean describing whether PII logging is allowed.\n    private piiLoggingEnabled: boolean;\n\n    // Callback to send messages to.\n    private localCallback: ILoggerCallback;\n\n    // Package name implementing this logger\n    private packageName: string;\n\n    // Package version implementing this logger\n    private packageVersion: string;\n\n    constructor(loggerOptions: LoggerOptions, packageName?: string, packageVersion?: string) {\n        const defaultLoggerCallback = () => {};\n        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\n        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\n        this.level = loggerOptions.logLevel || LogLevel.Info;\n\n        this.packageName = packageName || Constants.EMPTY_STRING;\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Create new Logger with existing configurations.\n     */\n    public clone(packageName: string, packageVersion: string): Logger {\n        return new Logger({loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level}, packageName, packageVersion);\n    }\n\n    /**\n     * Log message with required options.\n     */\n    private logMessage(logMessage: string, options: LoggerMessageOptions): void {\n        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {\n            return;\n        }\n        const timestamp = new Date().toUTCString();\n        const logHeader: string = StringUtils.isEmpty(this.correlationId) ? `[${timestamp}] : ` : `[${timestamp}] : [${this.correlationId}]`;\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": \"\"}${options.context ? `:${options.context}` : \"\"}`)(logMessage);\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\n    }\n\n    /**\n     * Execute callback with message.\n     */\n    executeCallback(level: LogLevel, message: string, containsPii: boolean): void {\n        if (this.localCallback) {\n            this.localCallback(level, message, containsPii);\n        }\n    }\n\n    /**\n     * Logs error messages.\n     */\n    error(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs error messages with PII.\n     */\n    errorPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs warning messages.\n     */\n    warning(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs warning messages with PII.\n     */\n    warningPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs info messages.\n     */\n    info(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs info messages with PII.\n     */\n    infoPii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs verbose messages.\n     */\n    verbose(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs verbose messages with PII.\n     */\n    verbosePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs trace messages.\n     */\n    trace(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: false,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Logs trace messages with PII.\n     */\n    tracePii(message: string, correlationId?: string): void {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: true,\n            correlationId: correlationId || \"\"\n        });\n    }\n\n    /**\n     * Returns whether PII Logging is enabled or not.\n     */\n    isPiiLoggingEnabled(): boolean {\n        return this.piiLoggingEnabled || false;\n    }\n}\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-common\";\nexport const version = \"4.3.0\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Separators, CredentialType, CacheType, Constants } from \"../../utils/Constants\";\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\n\n/**\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\n *\n * Key:Value Schema:\n *\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, usually only used for refresh tokens\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n *      oboAssertion: access token passed in as part of OBO request\n * }\n */\nexport class CredentialEntity {\n    homeAccountId: string;\n    environment: string;\n    credentialType: CredentialType;\n    clientId: string;\n    secret: string;\n    familyId?: string;\n    realm?: string;\n    target?: string;\n    oboAssertion?: string;\n\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId(): string {\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n    }\n\n    /**\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\n     */\n    generateCredentialId(): string {\n        return CredentialEntity.generateCredentialIdForCacheKey(\n            this.credentialType,\n            this.clientId,\n            this.realm,\n            this.familyId\n        );\n    }\n\n    /**\n     * Generate target key component as per schema: <target>\n     */\n    generateTarget(): string {\n        return CredentialEntity.generateTargetForCacheKey(this.target);\n    }\n\n    /**\n     * generates credential key\n     */\n    generateCredentialKey(): string {\n        return CredentialEntity.generateCredentialCacheKey(\n            this.homeAccountId,\n            this.environment,\n            this.credentialType,\n            this.clientId,\n            this.realm,\n            this.target,\n            this.familyId\n        );\n    }\n\n    /**\n     * returns the type of the cache (in this case credential)\n     */\n    generateType(): number {\n        switch (this.credentialType) {\n            case CredentialType.ID_TOKEN:\n                return CacheType.ID_TOKEN;\n            case CredentialType.ACCESS_TOKEN:\n                return CacheType.ACCESS_TOKEN;\n            case CredentialType.REFRESH_TOKEN:\n                return CacheType.REFRESH_TOKEN;\n            default: {\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\n            }\n        }\n    }\n\n    /**\n     * helper function to return `CredentialType`\n     * @param key\n     */\n    static getCredentialType(key: string): string {\n        // First keyword search will match all \"AccessToken\" and \"AccessToken_With_AuthScheme\" credentials\n        if (key.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {\n            // Perform second search to differentiate between \"AccessToken\" and \"AccessToken_With_AuthScheme\" credential types\n            if (key.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) {\n                return CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n            }\n            return CredentialType.ACCESS_TOKEN;\n        } else if (key.indexOf(CredentialType.ID_TOKEN.toLowerCase()) !== -1) {\n            return CredentialType.ID_TOKEN;\n        } else if (key.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {\n            return CredentialType.REFRESH_TOKEN;\n        }\n\n        return Constants.NOT_DEFINED;\n    }\n\n    /**\n     * generates credential key\n     */\n    static generateCredentialCacheKey(\n        homeAccountId: string,\n        environment: string,\n        credentialType: CredentialType,\n        clientId: string,\n        realm?: string,\n        target?: string,\n        familyId?: string\n    ): string {\n        const credentialKey = [\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\n            this.generateTargetForCacheKey(target),\n        ];\n\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * generates Account Id for keys\n     * @param homeAccountId\n     * @param environment\n     */\n    private static generateAccountIdForCacheKey(\n        homeAccountId: string,\n        environment: string\n    ): string {\n        const accountId: Array<string> = [homeAccountId, environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generates Credential Id for keys\n     * @param credentialType\n     * @param realm\n     * @param clientId\n     * @param familyId\n     */\n    private static generateCredentialIdForCacheKey(\n        credentialType: CredentialType,\n        clientId: string,\n        realm?: string,\n        familyId?: string\n    ): string {\n        const clientOrFamilyId =\n            credentialType === CredentialType.REFRESH_TOKEN\n                ? familyId || clientId\n                : clientId;\n        const credentialId: Array<string> = [\n            credentialType,\n            clientOrFamilyId,\n            realm || \"\",\n        ];\n\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generate target key component as per schema: <target>\n     */\n    private static generateTargetForCacheKey(scopes?: string): string {\n        return (scopes || \"\").toLowerCase();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientAuthError } from \"./ClientAuthError\";\n\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n */\nexport const ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: \"redirect_uri_empty\",\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\n    },\n    postLogoutUriNotSet: {\n        code: \"post_logout_uri_empty\",\n        desc: \"A post logout redirect has not been set.\"\n    },\n    claimsRequestParsingError: {\n        code: \"claims_request_parsing_error\",\n        desc: \"Could not parse the given claims request object.\"\n    },\n    authorityUriInsecure: {\n        code: \"authority_uri_insecure\",\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\n    },\n    urlParseError: {\n        code: \"url_parse_error\",\n        desc: \"URL could not be parsed into appropriate segments.\"\n    },\n    urlEmptyError: {\n        code: \"empty_url_error\",\n        desc: \"URL was empty or null.\"\n    },\n    emptyScopesError: {\n        code: \"empty_input_scopes_error\",\n        desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\n    },\n    nonArrayScopesError: {\n        code: \"nonarray_input_scopes_error\",\n        desc: \"Scopes cannot be passed as non-array.\"\n    },\n    clientIdSingleScopeError: {\n        code: \"clientid_input_scopes_error\",\n        desc: \"Client ID can only be provided as a single scope.\"\n    },\n    invalidPrompt: {\n        code: \"invalid_prompt_value\",\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent' and 'none'.  Please see here for valid configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n    },\n    invalidClaimsRequest: {\n        code: \"invalid_claims\",\n        desc: \"Given claims parameter must be a stringified JSON object.\"\n    },\n    tokenRequestEmptyError: {\n        code: \"token_request_empty\",\n        desc: \"Token request was empty and not found in cache.\"\n    },\n    logoutRequestEmptyError: {\n        code: \"logout_request_empty\",\n        desc: \"The logout request was null or undefined.\"\n    },\n    invalidCodeChallengeMethod: {\n        code: \"invalid_code_challenge_method\",\n        desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\n    },\n    invalidCodeChallengeParams: {\n        code: \"pkce_params_missing\",\n        desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: \"invalid_cloud_discovery_metadata\",\n        desc: \"Invalid cloudDiscoveryMetadata provided. Must be a JSON object containing tenant_discovery_endpoint and metadata fields\"\n    },\n    invalidAuthorityMetadata: {\n        code: \"invalid_authority_metadata\",\n        desc: \"Invalid authorityMetadata provided. Must by a JSON object containing authorization_endpoint, token_endpoint, end_session_endpoint, issuer fields.\"\n    },\n    untrustedAuthority: {\n        code: \"untrusted_authority\",\n        desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\n    }\n};\n\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nexport class ClientConfigurationError extends ClientAuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n\n    /**\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\n     */\n    static createRedirectUriEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code,\n            ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\n     */\n    static createPostLogoutRedirectUriEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code,\n            ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n    }\n\n    /**\n     * Creates an error thrown when the claims request could not be successfully parsed\n     */\n    static createClaimsRequestParsingError(claimsRequestParseError: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code,\n            `${ClientConfigurationErrorMessage.claimsRequestParsingError.desc} Given value: ${claimsRequestParseError}`);\n    }\n\n    /**\n     * Creates an error thrown if authority uri is given an insecure protocol.\n     * @param urlString\n     */\n    static createInsecureAuthorityUriError(urlString: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code,\n            `${ClientConfigurationErrorMessage.authorityUriInsecure.desc} Given URI: ${urlString}`);\n    }\n\n    /**\n     * Creates an error thrown if URL string does not parse into separate segments.\n     * @param urlString\n     */\n    static createUrlParseError(urlParseError: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code,\n            `${ClientConfigurationErrorMessage.urlParseError.desc} Given Error: ${urlParseError}`);\n    }\n\n    /**\n     * Creates an error thrown if URL string is empty or null.\n     * @param urlString\n     */\n    static createUrlEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code,\n            ClientConfigurationErrorMessage.urlEmptyError.desc);\n    }\n\n    /**\n     * Error thrown when scopes are not an array\n     * @param inputScopes\n     */\n    static createScopesNonArrayError(inputScopes: Array<string>): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.nonArrayScopesError.code,\n            `${ClientConfigurationErrorMessage.nonArrayScopesError.desc} Given Scopes: ${inputScopes}`);\n    }\n\n    /**\n     * Error thrown when scopes are empty.\n     * @param scopesValue\n     */\n    static createEmptyScopesArrayError(inputScopes: Array<string>): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code,\n            `${ClientConfigurationErrorMessage.emptyScopesError.desc} Given Scopes: ${inputScopes}`);\n    }\n\n    /**\n     * Error thrown when client id scope is not provided as single scope.\n     * @param inputScopes\n     */\n    static createClientIdSingleScopeError(inputScopes: Array<string>): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code,\n            `${ClientConfigurationErrorMessage.clientIdSingleScopeError.desc} Given Scopes: ${inputScopes}`);\n    }\n\n    /**\n     * Error thrown when prompt is not an allowed type.\n     * @param promptValue\n     */\n    static createInvalidPromptError(promptValue: string): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code,\n            `${ClientConfigurationErrorMessage.invalidPrompt.desc} Given value: ${promptValue}`);\n    }\n\n    /**\n     * Creates error thrown when claims parameter is not a stringified JSON object\n     */\n    static createInvalidClaimsRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code,\n            ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n    }\n\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyLogoutRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.code,\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.desc\n        );\n    }\n\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyTokenRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.code,\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.desc\n        );\n    }\n\n    /**\n     * Throws error when an invalid code_challenge_method is passed by the user\n     */\n    static createInvalidCodeChallengeMethodError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code,\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc\n        );\n    }\n\n    /**\n     * Throws error when both params: code_challenge and code_challenge_method are not passed together\n     */\n    static createInvalidCodeChallengeParamsError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.code,\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc\n        );\n    }\n\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidCloudDiscoveryMetadataError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code,\n            ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n    }\n\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidAuthorityMetadataError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code,\n            ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n    }\n\n    /**\n     * Throws error when provided authority is not a member of the trusted host list\n     */\n    static createUntrustedAuthorityError(): ClientConfigurationError {\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code,\n            ClientConfigurationErrorMessage.untrustedAuthority.desc);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { OIDC_SCOPES } from \"../utils/Constants\";\n\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nexport class ScopeSet {\n    // Scopes as a Set of strings\n    private scopes: Set<string>;\n\n    constructor(inputScopes: Array<string>) {\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\n        const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach(scope => this.scopes.add(scope));\n    }\n\n    /**\n     * Factory method to create ScopeSet from space-delimited string\n     * @param inputScopeString\n     * @param appClientId\n     * @param scopesRequired\n     */\n    static fromString(inputScopeString: string): ScopeSet {\n        inputScopeString = inputScopeString || \"\";\n        const inputScopes: Array<string> = inputScopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n\n    /**\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     */\n    private validateInputScopes(inputScopes: Array<string>): void {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw ClientConfigurationError.createEmptyScopesArrayError(inputScopes);\n        }\n    }\n\n    /**\n     * Check if a given scope is present in this set of scopes.\n     * @param scope\n     */\n    containsScope(scope: string): boolean {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n    }\n\n    /**\n     * Check if a set of scopes is present in this set of scopes.\n     * @param scopeSet\n     */\n    containsScopeSet(scopeSet: ScopeSet): boolean {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope)));\n    }\n\n    /**\n     * Check if set of scopes contains only the defaults\n     */\n    containsOnlyOIDCScopes(): boolean {\n        let defaultScopeCount = 0;\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n\n        return this.scopes.size === defaultScopeCount;\n    }\n\n    /**\n     * Appends single scope if passed\n     * @param newScope\n     */\n    appendScope(newScope: string): void {\n        if (!StringUtils.isEmpty(newScope)) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n\n    /**\n     * Appends multiple scopes if passed\n     * @param newScopes\n     */\n    appendScopes(newScopes: Array<string>): void {\n        try {\n            newScopes.forEach(newScope => this.appendScope(newScope));\n        } catch (e) {\n            throw ClientAuthError.createAppendScopeSetError(e);\n        }\n    }\n\n    /**\n     * Removes element from set of scopes.\n     * @param scope\n     */\n    removeScope(scope: string): void {\n        if (StringUtils.isEmpty(scope)) {\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n\n    /**\n     * Removes default scopes from set of scopes\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\n     */\n    removeOIDCScopes(): void {\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            this.scopes.delete(defaultScope);\n        });\n    }\n\n    /**\n     * Combines an array of scopes with the current set of scopes.\n     * @param otherScopes\n     */\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError(otherScopes);\n        }\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n        this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n\n    /**\n     * Check if scopes intersect between this set and another.\n     * @param otherScopes\n     */\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError(otherScopes);\n        }\n        \n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\n    }\n\n    /**\n     * Returns size of set of scopes.\n     */\n    getScopeCount(): number {\n        return this.scopes.size;\n    }\n\n    /**\n     * Returns the scopes as an array of string values\n     */\n    asArray(): Array<string> {\n        const array: Array<string> = [];\n        this.scopes.forEach(val => array.push(val));\n        return array;\n    }\n\n    /**\n     * Prints scopes into a space-delimited string\n     */\n    printScopes(): string {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return \"\";\n    }\n\n    /**\n     * Prints scopes into a space-delimited lower-case string (used for caching)\n     */\n    printScopesLowerCase(): string {\n        return this.printScopes().toLowerCase();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ICrypto } from \"../crypto/ICrypto\";\n\n/**\n * Client info object which consists of two IDs. Need to add more info here.\n */\nexport type ClientInfo = {\n    uid: string,\n    utid: string\n};\n\n/**\n * Function to build a client info object\n * @param rawClientInfo\n * @param crypto\n */\nexport function buildClientInfo(rawClientInfo: string, crypto: ICrypto): ClientInfo {\n    if (StringUtils.isEmpty(rawClientInfo)) {\n        throw ClientAuthError.createClientInfoEmptyError();\n    }\n\n    try {\n        const decodedClientInfo: string = crypto.base64Decode(rawClientInfo);\n        return JSON.parse(decodedClientInfo) as ClientInfo;\n    } catch (e) {\n        throw ClientAuthError.createClientInfoDecodingError(e);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Authority types supported by MSAL.\n */\nexport enum AuthorityType {\n    Default,\n    Adfs\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Separators,\n    CacheAccountType,\n    CacheType,\n    Constants,\n} from \"../../utils/Constants\";\nimport { Authority } from \"../../authority/Authority\";\nimport { AuthToken } from \"../../account/AuthToken\";\nimport { ICrypto } from \"../../crypto/ICrypto\";\nimport { buildClientInfo } from \"../../account/ClientInfo\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport { AccountInfo } from \"../../account/AccountInfo\";\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\nimport { AuthorityType } from \"../../authority/AuthorityType\";\nimport { Logger } from \"../../logger/Logger\";\nimport { TokenClaims } from \"../../account/TokenClaims\";\n\n/**\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\n *\n * Key : Value Schema\n *\n * Key: <home_account_id>-<environment>-<realm*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\n *      authorityType: Accounts authority type as a string\n *      name: Full name for the account, including given name and family name,\n *      clientInfo: Full base64 encoded client info received from ESTS\n *      lastModificationTime: last time this entity was modified in the cache\n *      lastModificationApp:\n *      oboAssertion: access token passed in as part of OBO request\n *      idTokenClaims: Object containing claims parsed from ID token\n * }\n */\nexport class AccountEntity {\n    homeAccountId: string;\n    environment: string;\n    realm: string;\n    localAccountId: string;\n    username: string;\n    authorityType: string;\n    name?: string;\n    clientInfo?: string;\n    lastModificationTime?: string;\n    lastModificationApp?: string;\n    oboAssertion?: string;\n    cloudGraphHostName?: string;\n    msGraphHost?: string; \n    idTokenClaims?: TokenClaims;\n\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId(): string {\n        const accountId: Array<string> = [this.homeAccountId, this.environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\n     */\n    generateAccountKey(): string {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId\n        });\n    }\n\n    /**\n     * returns the type of the cache (in this case account)\n     */\n    generateType(): number {\n        switch (this.authorityType) {\n            case CacheAccountType.ADFS_ACCOUNT_TYPE:\n                return CacheType.ADFS;\n            case CacheAccountType.MSAV1_ACCOUNT_TYPE:\n                return CacheType.MSA;\n            case CacheAccountType.MSSTS_ACCOUNT_TYPE:\n                return CacheType.MSSTS;\n            case CacheAccountType.GENERIC_ACCOUNT_TYPE:\n                return CacheType.GENERIC;\n            default: {\n                throw ClientAuthError.createUnexpectedAccountTypeError();\n            }\n        }\n    }\n\n    /**\n     * Returns the AccountInfo interface for this account.\n     */\n    getAccountInfo(): AccountInfo {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            idTokenClaims: this.idTokenClaims\n        };\n    }\n\n    /**\n     * Generates account key from interface\n     * @param accountInterface\n     */\n    static generateAccountCacheKey(accountInterface: AccountInfo): string {\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || \"\",\n            accountInterface.tenantId || \"\",\n        ];\n\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\n     * @param clientInfo\n     * @param authority\n     * @param idToken\n     * @param policy\n     */\n    static createAccount(\n        clientInfo: string,\n        homeAccountId: string,\n        authority: Authority,\n        idToken: AuthToken,\n        oboAssertion?: string,\n        cloudGraphHostName?: string,\n        msGraphHost?: string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        account.clientInfo = clientInfo;\n        account.homeAccountId = homeAccountId;\n\n        const env = authority.getPreferredCache();\n        if (StringUtils.isEmpty(env)) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm = idToken?.claims?.tid || \"\";\n        account.oboAssertion = oboAssertion;\n        \n        if (idToken) {\n            account.idTokenClaims = idToken.claims;\n\n            // How do you account for MSA CID here?\n            account.localAccountId = idToken?.claims?.oid || idToken?.claims?.sub || \"\";\n\n            /*\n             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.\n             * This field should not be relied upon if a custom policy is configured to return more than 1 email.\n             */\n            account.username = idToken?.claims?.preferred_username || (idToken?.claims?.emails? idToken.claims.emails[0]: \"\");\n            account.name = idToken?.claims?.name;\n        }\n\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n\n        return account;\n    }\n\n    /**\n     * Builds non-AAD/ADFS account.\n     * @param authority\n     * @param idToken\n     */\n    static createGenericAccount(\n        authority: Authority,\n        homeAccountId: string,\n        idToken: AuthToken,\n        oboAssertion?: string,\n        cloudGraphHostName?: string,\n        msGraphHost?: string\n    ): AccountEntity {\n        const account: AccountEntity = new AccountEntity();\n\n        account.authorityType = (authority.authorityType === AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        account.homeAccountId = homeAccountId;\n        // non AAD scenarios can have empty realm\n        account.realm = \"\";\n        account.oboAssertion = oboAssertion;\n\n        const env = authority.getPreferredCache();\n\n        if (StringUtils.isEmpty(env)) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        if (idToken) {\n            // How do you account for MSA CID here?\n            account.localAccountId = idToken?.claims?.oid || idToken?.claims?.sub || \"\";\n            // upn claim for most ADFS scenarios\n            account.username = idToken?.claims?.upn || \"\";\n            account.name = idToken?.claims?.name || \"\";\n            account.idTokenClaims = idToken?.claims;\n        }\n\n        account.environment = env;\n\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n\n        /*\n         * add uniqueName to claims\n         * account.name = idToken.claims.uniqueName;\n         */\n\n        return account;\n    }\n\n    /**\n     * Generate HomeAccountId from server response\n     * @param serverClientInfo\n     * @param authType\n     */\n    static generateHomeAccountId(serverClientInfo: string, authType: AuthorityType, logger: Logger, cryptoObj: ICrypto, idToken?: AuthToken): string {\n\n        const accountId = idToken?.claims?.sub ? idToken.claims.sub : Constants.EMPTY_STRING;\n\n        // since ADFS does not have tid and does not set client_info\n        if (authType === AuthorityType.Adfs) {\n            return accountId;\n        }\n\n        // for cases where there is clientInfo\n        if (serverClientInfo) {\n            const clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n            if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n                return `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`;\n            }\n        }\n\n        // default to \"sub\" claim\n        logger.verbose(\"No client info in response\");\n        return accountId;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccountEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"localAccountId\") &&\n            entity.hasOwnProperty(\"username\") &&\n            entity.hasOwnProperty(\"authorityType\")\n        );\n    }\n\n    /**\n     * Helper function to determine whether 2 accountInfo objects represent the same account\n     * @param accountA \n     * @param accountB \n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\n     */\n    static accountInfoIsEqual(accountA: AccountInfo | null, accountB: AccountInfo | null, compareClaims?: boolean): boolean {\n        if (!accountA || !accountB) {\n            return false;\n        }\n\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = (accountA.idTokenClaims || {}) as TokenClaims;\n            const accountBClaims = (accountB.idTokenClaims || {}) as TokenClaims;\n\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\n            (accountAClaims.nonce === accountBClaims.nonce);\n        }\n\n        return (accountA.homeAccountId === accountB.homeAccountId) && \n            (accountA.localAccountId === accountB.localAccountId) &&\n            (accountA.username === accountB.username) &&\n            (accountA.tenantId === accountB.tenantId) &&\n            (accountA.environment === accountB.environment) &&\n            claimsMatch;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenClaims } from \"./TokenClaims\";\nimport { DecodedAuthToken } from \"./DecodedAuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ICrypto } from \"../crypto/ICrypto\";\n\n/**\n * JWT Token representation class. Parses token string and generates claims object.\n */\nexport class AuthToken {\n\n    // Raw Token string\n    rawToken: string;\n    // Claims inside token\n    claims: TokenClaims;\n    constructor(rawToken: string, crypto: ICrypto) {\n        if (StringUtils.isEmpty(rawToken)) {\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n        }\n\n        this.rawToken = rawToken;\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n    }\n\n    /**\n     * Extract token by decoding the rawToken\n     *\n     * @param encodedToken\n     */\n    static extractTokenClaims(encodedToken: string, crypto: ICrypto): TokenClaims {\n\n        const decodedToken: DecodedAuthToken = StringUtils.decodeAuthToken(encodedToken);\n\n        // token will be decoded to get the username\n        try {\n            const base64TokenPayload = decodedToken.JWSPayload;\n\n            // base64Decode() should throw an error if there is an issue\n            const base64Decoded = crypto.base64Decode(base64TokenPayload);\n            return JSON.parse(base64Decoded) as TokenClaims;\n        } catch (err) {\n            throw ClientAuthError.createTokenParsingError(err);\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountCache, AccountFilter, CredentialFilter, CredentialCache, ValidCredentialType, AppMetadataFilter, AppMetadataCache } from \"./utils/CacheTypes\";\nimport { CacheRecord } from \"./entities/CacheRecord\";\nimport { CacheSchemaType, CredentialType, Constants, APP_METADATA, THE_FAMILY_ID, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme } from \"../utils/Constants\";\nimport { CredentialEntity } from \"./entities/CredentialEntity\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AccountEntity } from \"./entities/AccountEntity\";\nimport { AccessTokenEntity } from \"./entities/AccessTokenEntity\";\nimport { IdTokenEntity } from \"./entities/IdTokenEntity\";\nimport { RefreshTokenEntity } from \"./entities/RefreshTokenEntity\";\nimport { AuthError } from \"../error/AuthError\";\nimport { ICacheManager } from \"./interface/ICacheManager\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { AccountInfo } from \"../account/AccountInfo\";\nimport { AppMetadataEntity } from \"./entities/AppMetadataEntity\";\nimport { ServerTelemetryEntity } from \"./entities/ServerTelemetryEntity\";\nimport { ThrottlingEntity } from \"./entities/ThrottlingEntity\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { AuthorityMetadataEntity } from \"./entities/AuthorityMetadataEntity\";\n\n/**\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\n */\nexport abstract class CacheManager implements ICacheManager {\n    protected clientId: string;\n    protected cryptoImpl: ICrypto;\n\n    constructor(clientId: string, cryptoImpl: ICrypto) {\n        this.clientId = clientId;\n        this.cryptoImpl = cryptoImpl;\n    }\n\n    /**\n     * fetch the account entity from the platform cache\n     *  @param accountKey\n     */\n    abstract getAccount(accountKey: string): AccountEntity | null;\n\n    /**\n     * set account entity in the platform cache\n     * @param account\n     */\n    abstract setAccount(account: AccountEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param idTokenKey\n     */\n    abstract getIdTokenCredential(idTokenKey: string): IdTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param idToken\n     */\n    abstract setIdTokenCredential(idToken: IdTokenEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param accessTokenKey\n     */\n    abstract getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param accessToken\n     */\n    abstract setAccessTokenCredential(accessToken: AccessTokenEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param refreshTokenKey\n     */\n    abstract getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param refreshToken\n     */\n    abstract setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void;\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey\n     */\n    abstract getAppMetadata(appMetadataKey: string): AppMetadataEntity | null;\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata\n     */\n    abstract setAppMetadata(appMetadata: AppMetadataEntity): void;\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetryKey\n     */\n    abstract getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null;\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey\n     * @param serverTelemetry\n     */\n    abstract setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void;\n\n    /**\n     * fetch cloud discovery metadata entity from the platform cache\n     * @param key\n     */\n    abstract getAuthorityMetadata(key: string): AuthorityMetadataEntity | null;\n\n    /**\n     * \n     */\n    abstract getAuthorityMetadataKeys(): Array<string>;\n\n    /**\n     * set cloud discovery metadata entity to the platform cache\n     * @param key\n     * @param value\n     */\n    abstract setAuthorityMetadata(key: string, value: AuthorityMetadataEntity): void;\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey\n     */\n    abstract getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null;\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey\n     * @param throttlingCache\n     */\n    abstract setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void;;\n\n    /**\n     * Function to remove an item from cache given its key.\n     * @param key\n     */\n    abstract removeItem(key: string, type?: string): boolean;\n\n    /**\n     * Function which returns boolean whether cache contains a specific key.\n     * @param key\n     */\n    abstract containsKey(key: string, type?: string): boolean;\n\n    /**\n     * Function which retrieves all current keys from the cache.\n     */\n    abstract getKeys(): string[];\n\n    /**\n     * Function which clears cache.\n     */\n    abstract clear(): void;\n\n    /**\n     * Returns all accounts in cache\n     */\n    getAllAccounts(): AccountInfo[] {\n        const currentAccounts: AccountCache = this.getAccountsFilteredBy();\n        const accountValues: AccountEntity[] = Object.keys(currentAccounts).map(accountKey => currentAccounts[accountKey]);\n        const numAccounts = accountValues.length;\n        if (numAccounts < 1) {\n            return [];\n        } else {\n            const allAccounts = accountValues.map<AccountInfo>((value) => {\n                const accountEntity = CacheManager.toObject<AccountEntity>(new AccountEntity(), value);\n                const accountInfo = accountEntity.getAccountInfo();\n                const idToken = this.readIdTokenFromCache(this.clientId, accountInfo);\n                if (idToken && !accountInfo.idTokenClaims) {\n                    accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\n                }\n\n                return accountInfo;\n                \n            });\n            return allAccounts;\n        }\n    }\n\n    /**\n     * saves a cache record\n     * @param cacheRecord\n     */\n    saveCacheRecord(cacheRecord: CacheRecord): void {\n        if (!cacheRecord) {\n            throw ClientAuthError.createNullOrUndefinedCacheRecord();\n        }\n\n        if (!!cacheRecord.account) {\n            this.setAccount(cacheRecord.account);\n        }\n\n        if (!!cacheRecord.idToken) {\n            this.setIdTokenCredential(cacheRecord.idToken);\n        }\n\n        if (!!cacheRecord.accessToken) {\n            this.saveAccessToken(cacheRecord.accessToken);\n        }\n\n        if (!!cacheRecord.refreshToken) {\n            this.setRefreshTokenCredential(cacheRecord.refreshToken);\n        }\n\n        if (!!cacheRecord.appMetadata) {\n            this.setAppMetadata(cacheRecord.appMetadata);\n        }\n    }\n\n    /**\n     * saves access token credential\n     * @param credential\n     */\n    private saveAccessToken(credential: AccessTokenEntity): void {\n        const currentTokenCache = this.getCredentialsFilteredBy({\n            clientId: credential.clientId,\n            credentialType: credential.credentialType,\n            environment: credential.environment,\n            homeAccountId: credential.homeAccountId,\n            realm: credential.realm,\n        });\n        const currentScopes = ScopeSet.fromString(credential.target);\n        const currentAccessTokens: AccessTokenEntity[] = Object.keys(currentTokenCache.accessTokens).map(key => currentTokenCache.accessTokens[key]);\n        if (currentAccessTokens) {\n            currentAccessTokens.forEach((tokenEntity) => {\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                    this.removeCredential(tokenEntity);\n                }\n            });\n        }\n        this.setAccessTokenCredential(credential);\n    }\n\n    /**\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\n     * @param homeAccountId\n     * @param environment\n     * @param realm\n     */\n    getAccountsFilteredBy(accountFilter?: AccountFilter): AccountCache {\n        return this.getAccountsFilteredByInternal(\n            accountFilter ? accountFilter.homeAccountId : \"\",\n            accountFilter ? accountFilter.environment : \"\",\n            accountFilter ? accountFilter.realm : \"\"\n        );\n    }\n\n    /**\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\n     * @param homeAccountId\n     * @param environment\n     * @param realm\n     */\n    private getAccountsFilteredByInternal(\n        homeAccountId?: string,\n        environment?: string,\n        realm?: string\n    ): AccountCache {\n        const allCacheKeys = this.getKeys();\n        const matchingAccounts: AccountCache = {};\n\n        allCacheKeys.forEach((cacheKey) => {\n            const entity: AccountEntity | null = this.getAccount(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (!!homeAccountId && !this.matchHomeAccountId(entity, homeAccountId)) {\n                return;\n            }\n\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\n                return;\n            }\n\n            if (!!realm && !this.matchRealm(entity, realm)) {\n                return;\n            }\n\n            matchingAccounts[cacheKey] = entity;\n        });\n\n        return matchingAccounts;\n    }\n\n    /**\n     * retrieve credentails matching all provided filters; if no filter is set, get all credentials\n     * @param homeAccountId\n     * @param environment\n     * @param credentialType\n     * @param clientId\n     * @param realm\n     * @param target\n     */\n    getCredentialsFilteredBy(filter: CredentialFilter): CredentialCache {\n        return this.getCredentialsFilteredByInternal(\n            filter.homeAccountId,\n            filter.environment,\n            filter.credentialType,\n            filter.clientId,\n            filter.familyId,\n            filter.realm,\n            filter.target,\n            filter.oboAssertion\n        );\n    }\n\n    /**\n     * Support function to help match credentials\n     * @param homeAccountId\n     * @param environment\n     * @param credentialType\n     * @param clientId\n     * @param realm\n     * @param target\n     */\n    private getCredentialsFilteredByInternal(\n        homeAccountId?: string,\n        environment?: string,\n        credentialType?: string,\n        clientId?: string,\n        familyId?: string,\n        realm?: string,\n        target?: string,\n        oboAssertion?: string\n    ): CredentialCache {\n        const allCacheKeys = this.getKeys();\n        const matchingCredentials: CredentialCache = {\n            idTokens: {},\n            accessTokens: {},\n            refreshTokens: {},\n        };\n        \n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-credential type cache entities\n            const credType = CredentialEntity.getCredentialType(cacheKey);\n\n            if (credType === Constants.NOT_DEFINED) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getSpecificCredential(cacheKey, credType);\n\n            if (!entity) {\n                return;\n            }\n\n            if (!!oboAssertion && !this.matchOboAssertion(entity, oboAssertion)) {\n                return;\n            }\n\n            if (!!homeAccountId && !this.matchHomeAccountId(entity, homeAccountId)) {\n                return;\n            }\n\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\n                return;\n            }\n\n            if (!!realm && !this.matchRealm(entity, realm)) {\n                return;\n            }\n\n            if (!!credentialType && !this.matchCredentialType(entity, credentialType)) {\n                return;\n            }\n\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\n                return;\n            }\n\n            if (!!familyId && !this.matchFamilyId(entity, familyId)) {\n                return;\n            }\n\n            /*\n             * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\n             * Resource specific refresh tokens case will be added when the support is deemed necessary\n             */\n            if (!!target && !this.matchTarget(entity, target)) {\n                return;\n            }\n\n            switch (credType) {\n                case CredentialType.ID_TOKEN:\n                    matchingCredentials.idTokens[cacheKey] = entity as IdTokenEntity;\n                    break;\n                case CredentialType.ACCESS_TOKEN:\n                case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                    matchingCredentials.accessTokens[cacheKey] = entity as AccessTokenEntity;\n                    break;\n                case CredentialType.REFRESH_TOKEN:\n                    matchingCredentials.refreshTokens[cacheKey] = entity as RefreshTokenEntity;\n                    break;\n            }\n        });\n\n        return matchingCredentials;\n    }\n\n    /**\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\n     * @param filter\n     */\n    getAppMetadataFilteredBy(filter: AppMetadataFilter): AppMetadataCache {\n        return this.getAppMetadataFilteredByInternal(\n            filter.environment,\n            filter.clientId,\n        );\n    }\n\n    /**\n     * Support function to help match appMetadata\n     * @param environment\n     * @param clientId\n     */\n    private getAppMetadataFilteredByInternal(\n        environment?: string,\n        clientId?: string\n    ): AppMetadataCache {\n\n        const allCacheKeys = this.getKeys();\n        const matchingAppMetadata: AppMetadataCache = {};\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-appMetadata type cache entities\n            if (!this.isAppMetadata(cacheKey)) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getAppMetadata(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\n                return;\n            }\n\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\n                return;\n            }\n\n            matchingAppMetadata[cacheKey] = entity;\n\n        });\n\n        return matchingAppMetadata;\n    }\n\n    /**\n     * retrieve authorityMetadata that contains a matching alias\n     * @param filter\n     */\n    getAuthorityMetadataByAlias(host: string): AuthorityMetadataEntity | null {\n        const allCacheKeys = this.getAuthorityMetadataKeys();\n        let matchedEntity = null;\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-authorityMetadata type cache entities\n            if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getAuthorityMetadata(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (entity.aliases.indexOf(host) === -1) {\n                return;\n            }\n\n            matchedEntity = entity;\n\n        });\n        \n        return matchedEntity;\n    }\n\n    /**\n     * Removes all accounts and related tokens from cache.\n     */\n    removeAllAccounts(): boolean {\n        const allCacheKeys = this.getKeys();\n        allCacheKeys.forEach((cacheKey) => {\n            const entity = this.getAccount(cacheKey);\n            if (!entity) {\n                return;\n            }\n            this.removeAccount(cacheKey);\n        });\n\n        return true;\n    }\n\n    /**\n     * returns a boolean if the given account is removed\n     * @param account\n     */\n    removeAccount(accountKey: string): boolean {\n        const account = this.getAccount(accountKey);\n        if (!account) {\n            throw ClientAuthError.createNoAccountFoundError();\n        }\n        return (this.removeAccountContext(account) && this.removeItem(accountKey, CacheSchemaType.ACCOUNT));\n    }\n\n    /**\n     * returns a boolean if the given account is removed\n     * @param account\n     */\n    removeAccountContext(account: AccountEntity): boolean {\n        const allCacheKeys = this.getKeys();\n        const accountId = account.generateAccountId();\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-credential type cache entities\n            const credType = CredentialEntity.getCredentialType(cacheKey);\n            if (credType === Constants.NOT_DEFINED) {\n                return;\n            }\n\n            const cacheEntity = this.getSpecificCredential(cacheKey, credType);\n            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {\n                this.removeCredential(cacheEntity);\n            }\n        });\n\n        return true;\n    }\n\n    /**\n     * returns a boolean if the given credential is removed\n     * @param credential\n     */\n    removeCredential(credential: CredentialEntity): boolean {\n        const key = credential.generateCredentialKey();\n        return this.removeItem(key, CacheSchemaType.CREDENTIAL);\n    }\n\n    /**\n     * Removes all app metadata objects from cache.\n     */\n    removeAppMetadata(): boolean {\n        const allCacheKeys = this.getKeys();\n        allCacheKeys.forEach((cacheKey) => {\n            if (this.isAppMetadata(cacheKey)) {\n                this.removeItem(cacheKey, CacheSchemaType.APP_METADATA);\n            }\n        });\n\n        return true;\n    }\n\n    /**\n     * Retrieve the cached credentials into a cacherecord\n     * @param account\n     * @param clientId\n     * @param scopes\n     * @param environment\n     * @param authScheme\n     */\n    readCacheRecord(account: AccountInfo, clientId: string, scopes: ScopeSet, environment: string, authScheme: AuthenticationScheme): CacheRecord {\n        const cachedAccount = this.readAccountFromCache(account);\n        const cachedIdToken = this.readIdTokenFromCache(clientId, account);\n        const cachedAccessToken = this.readAccessTokenFromCache(clientId, account, scopes, authScheme);\n        const cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);\n        const cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);\n\n        if (cachedAccount && cachedIdToken) {\n            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\n        }\n\n        return {\n            account: cachedAccount,\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n            refreshToken: cachedRefreshToken,\n            appMetadata: cachedAppMetadata,\n        };\n    }\n\n    /**\n     * Retrieve AccountEntity from cache\n     * @param account\n     */\n    readAccountFromCache(account: AccountInfo): AccountEntity | null {\n        const accountKey: string = AccountEntity.generateAccountCacheKey(account);\n        return this.getAccount(accountKey);\n    }\n\n    /**\n     * Retrieve IdTokenEntity from cache\n     * @param clientId\n     * @param account\n     * @param inputRealm\n     */\n    readIdTokenFromCache(clientId: string, account: AccountInfo): IdTokenEntity | null {\n        const idTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: CredentialType.ID_TOKEN,\n            clientId: clientId,\n            realm: account.tenantId,\n        };\n\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(idTokenFilter);\n        const idTokens = Object.keys(credentialCache.idTokens).map((key) => credentialCache.idTokens[key]);\n        const numIdTokens = idTokens.length;\n\n        if (numIdTokens < 1) {\n            return null;\n        } else if (numIdTokens > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n\n        return idTokens[0] as IdTokenEntity;\n    }\n\n    /**\n     * Retrieve AccessTokenEntity from cache\n     * @param clientId\n     * @param account\n     * @param scopes\n     * @param authScheme\n     */\n    readAccessTokenFromCache(clientId: string, account: AccountInfo, scopes: ScopeSet, authScheme: AuthenticationScheme): AccessTokenEntity | null {\n        const credentialType = (authScheme === AuthenticationScheme.POP) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n\n        const accessTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: credentialType,\n            clientId,\n            realm: account.tenantId,\n            target: scopes.printScopesLowerCase(),\n        };\n\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(accessTokenFilter);\n\n        const accessTokens = Object.keys(credentialCache.accessTokens).map((key) => credentialCache.accessTokens[key]);\n\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            return null;\n        } else if (numAccessTokens > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * Helper to retrieve the appropriate refresh token from cache\n     * @param clientId\n     * @param account\n     * @param familyRT\n     */\n    readRefreshTokenFromCache(clientId: string, account: AccountInfo, familyRT: boolean): RefreshTokenEntity | null {\n        const id = familyRT ? THE_FAMILY_ID : undefined;\n        const refreshTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: CredentialType.REFRESH_TOKEN,\n            clientId: clientId,\n            familyId: id\n        };\n\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);\n        const refreshTokens = Object.keys(credentialCache.refreshTokens).map((key) => credentialCache.refreshTokens[key]);\n\n        const numRefreshTokens = refreshTokens.length;\n        if (numRefreshTokens < 1) {\n            return null;\n        }\n        // address the else case after remove functions address environment aliases\n\n        return refreshTokens[0] as RefreshTokenEntity;\n    }\n\n    /**\n     * Retrieve AppMetadataEntity from cache\n     */\n    readAppMetadataFromCache(environment: string, clientId: string): AppMetadataEntity | null {\n        const appMetadataFilter: AppMetadataFilter = {\n            environment,\n            clientId,\n        };\n\n        const appMetadata: AppMetadataCache = this.getAppMetadataFilteredBy(appMetadataFilter);\n        const appMetadataEntries: AppMetadataEntity[] = Object.keys(appMetadata).map((key) => appMetadata[key]);\n\n        const numAppMetadata = appMetadataEntries.length;\n        if (numAppMetadata < 1) {\n            return null;\n        } else if (numAppMetadata > 1) {\n            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\n        }\n\n        return appMetadataEntries[0] as AppMetadataEntity;\n    }\n\n    /**\n     * Return the family_id value associated  with FOCI\n     * @param environment\n     * @param clientId\n     */\n    isAppMetadataFOCI(environment: string, clientId: string): boolean {\n        const appMetadata = this.readAppMetadataFromCache(environment, clientId);\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n    }\n\n    /**\n     * helper to match account ids\n     * @param value\n     * @param homeAccountId\n     */\n    private matchHomeAccountId(entity: AccountEntity | CredentialEntity, homeAccountId: string): boolean {\n        return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);\n    }\n\n    /**\n     * helper to match assertion\n     * @param value\n     * @param oboAssertion\n     */\n    private matchOboAssertion(entity: AccountEntity | CredentialEntity, oboAssertion: string): boolean {\n        return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);\n    }\n\n    /**\n     * helper to match environment\n     * @param value\n     * @param environment\n     */\n    private matchEnvironment(entity: AccountEntity | CredentialEntity | AppMetadataEntity, environment: string): boolean {\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * helper to match credential type\n     * @param entity\n     * @param credentialType\n     */\n    private matchCredentialType(entity: CredentialEntity, credentialType: string): boolean {\n        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());\n    }\n\n    /**\n     * helper to match client ids\n     * @param entity\n     * @param clientId\n     */\n    private matchClientId(entity: CredentialEntity | AppMetadataEntity, clientId: string): boolean {\n        return !!(entity.clientId && clientId === entity.clientId);\n    }\n\n    /**\n     * helper to match family ids\n     * @param entity\n     * @param familyId\n     */\n    private matchFamilyId(entity: CredentialEntity | AppMetadataEntity, familyId: string): boolean {\n        return !!(entity.familyId && familyId === entity.familyId);\n    }\n\n    /**\n     * helper to match realm\n     * @param entity\n     * @param realm\n     */\n    private matchRealm(entity: AccountEntity | CredentialEntity, realm: string): boolean {\n        return !!(entity.realm && realm === entity.realm);\n    }\n\n    /**\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\n     * @param entity\n     * @param target\n     */\n    private matchTarget(entity: CredentialEntity, target: string): boolean {\n        const isNotAccessTokenCredential = (entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n\n        if ( isNotAccessTokenCredential || !entity.target) {\n            return false;\n        }\n\n        const entityScopeSet: ScopeSet = ScopeSet.fromString(entity.target);\n        const requestTargetScopeSet: ScopeSet = ScopeSet.fromString(target);\n\n        if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {\n            requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes\n        } else {\n            requestTargetScopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n        }\n        return entityScopeSet.containsScopeSet(requestTargetScopeSet);\n    }\n\n    /**\n     * returns if a given cache entity is of the type appmetadata\n     * @param key\n     */\n    private isAppMetadata(key: string): boolean {\n        return key.indexOf(APP_METADATA) !== -1;\n    }\n\n    /**\n     * returns if a given cache entity is of the type authoritymetadata\n     * @param key\n     */\n    protected isAuthorityMetadata(key: string): boolean {\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n    }\n\n    /**\n     * returns cache key used for cloud instance metadata\n     */\n    generateAuthorityMetadataCacheKey(authority: string): string {\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\n    }\n\n    /**\n     * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache\n     * @param key\n     * @param credType\n     */\n    private getSpecificCredential(key: string, credType: string): ValidCredentialType | null {\n        switch (credType) {\n            case CredentialType.ID_TOKEN: {\n                return this.getIdTokenCredential(key);\n            }\n            case CredentialType.ACCESS_TOKEN:\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME: {\n                return this.getAccessTokenCredential(key);\n            }\n            case CredentialType.REFRESH_TOKEN: {\n                return this.getRefreshTokenCredential(key);\n            }\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * Helper to convert serialized data to object\n     * @param obj\n     * @param json\n     */\n    static toObject<T>(obj: T, json: object): T {\n        for (const propertyName in json) {\n            obj[propertyName] = json[propertyName];\n        }\n        return obj;\n    }\n}\n\nexport class DefaultStorageClass extends CacheManager {\n    setAccount(): void {\n        const notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAccount(): AccountEntity {\n        const notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setIdTokenCredential(): void {\n        const notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getIdTokenCredential(): IdTokenEntity {\n        const notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setAccessTokenCredential(): void {\n        const notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAccessTokenCredential(): AccessTokenEntity {\n        const notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setRefreshTokenCredential(): void {\n        const notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getRefreshTokenCredential(): RefreshTokenEntity {\n        const notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setAppMetadata(): void {\n        const notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAppMetadata(): AppMetadataEntity {\n        const notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setServerTelemetry(): void {\n        const notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getServerTelemetry(): ServerTelemetryEntity {\n        const notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setAuthorityMetadata(): void {\n        const notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAuthorityMetadata(): AuthorityMetadataEntity | null {\n        const notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAuthorityMetadataKeys(): Array<string> {\n        const notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setThrottlingCache(): void {\n        const notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getThrottlingCache(): ThrottlingEntity {\n        const notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    removeItem(): boolean {\n        const notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    containsKey(): boolean {\n        const notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getKeys(): string[] {\n        const notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    clear(): void {\n        const notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, ICrypto } from \"../crypto/ICrypto\";\nimport { AuthError } from \"../error/AuthError\";\nimport { ILoggerCallback, LogLevel } from \"../logger/Logger\";\nimport { Constants } from \"../utils/Constants\";\nimport { version } from \"../packageMetadata\";\nimport { Authority } from \"../authority/Authority\";\nimport { CacheManager, DefaultStorageClass } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\n\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n\n/**\n * Use the configuration object to configure MSAL Modules and initialize the base interfaces for MSAL.\n *\n * This object allows you to configure important elements of MSAL functionality:\n * - authOptions                - Authentication for application\n * - cryptoInterface            - Implementation of crypto functions\n * - libraryInfo                - Library metadata\n * - loggerOptions              - Logging for application\n * - networkInterface           - Network implementation\n * - storageInterface           - Storage implementation\n * - systemOptions              - Additional library options\n * - clientCredentials          - Credentials options for confidential clients\n */\nexport type ClientConfiguration = {\n    authOptions: AuthOptions,\n    systemOptions?: SystemOptions,\n    loggerOptions?: LoggerOptions,\n    storageInterface?: CacheManager,\n    networkInterface?: INetworkModule,\n    cryptoInterface?: ICrypto,\n    clientCredentials?: ClientCredentials,\n    libraryInfo?: LibraryInfo\n    serverTelemetryManager?: ServerTelemetryManager | null,\n    persistencePlugin?: ICachePlugin | null,\n    serializableCache?: ISerializableTokenCache | null\n};\n\nexport type CommonClientConfiguration = {\n    authOptions: Required<AuthOptions>,\n    systemOptions: Required<SystemOptions>,\n    loggerOptions : Required<LoggerOptions>,\n    storageInterface: CacheManager,\n    networkInterface : INetworkModule,\n    cryptoInterface : Required<ICrypto>,\n    libraryInfo : LibraryInfo,\n    serverTelemetryManager: ServerTelemetryManager | null,\n    clientCredentials: ClientCredentials,\n    persistencePlugin: ICachePlugin | null,\n    serializableCache: ISerializableTokenCache | null\n};\n\n/**\n * Use this to configure the auth options in the ClientConfiguration object\n *\n * - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\n * - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\n * - knownAuthorities            - An array of URIs that are known to be valid. Used in B2C scenarios.\n * - cloudDiscoveryMetadata      - A string containing the cloud discovery response. Used in AAD scenarios.\n * - clientCapabilities          - Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\n * - protocolMode                - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n */\nexport type AuthOptions = {\n    clientId: string;\n    authority: Authority;\n    clientCapabilities?: Array<string>;\n};\n\n/**\n * Use this to configure token renewal info in the Configuration object\n *\n * - tokenRenewalOffsetSeconds    - Sets the window of offset needed to renew the token before expiry\n */\nexport type SystemOptions = {\n    tokenRenewalOffsetSeconds?: number;\n};\n\n/**\n *  Use this to configure the logging that MSAL does, by configuring logger options in the Configuration object\n *\n * - loggerCallback                - Callback for logger\n * - piiLoggingEnabled             - Sets whether pii logging is enabled\n * - logLevel                      - Sets the level at which logging happens\n */\nexport type LoggerOptions = {\n    loggerCallback?: ILoggerCallback,\n    piiLoggingEnabled?: boolean,\n    logLevel?: LogLevel\n};\n\n/**\n * Library-specific options\n */\nexport type LibraryInfo = {\n    sku: string,\n    version: string,\n    cpu: string,\n    os: string\n};\n\n/**\n * Credentials for confidential clients\n */\nexport type ClientCredentials = {\n    clientSecret?: string,\n    clientAssertion? : {\n        assertion: string,\n        assertionType: string\n    };\n};\n\nexport const DEFAULT_SYSTEM_OPTIONS: Required<SystemOptions> = {\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC\n};\n\nconst DEFAULT_LOGGER_IMPLEMENTATION: Required<LoggerOptions> = {\n    loggerCallback: () => {\n        // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info\n};\n\nconst DEFAULT_NETWORK_IMPLEMENTATION: INetworkModule = {\n    async sendGetRequestAsync<T>(): Promise<T> {\n        const notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async sendPostRequestAsync<T>(): Promise<T> {\n        const notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n};\n\nconst DEFAULT_LIBRARY_INFO: LibraryInfo = {\n    sku: Constants.SKU,\n    version: version,\n    cpu: \"\",\n    os: \"\"\n};\n\nconst DEFAULT_CLIENT_CREDENTIALS: ClientCredentials = {\n    clientSecret: \"\",\n    clientAssertion: undefined\n};\n\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nexport function buildClientConfiguration(\n    {\n        authOptions: userAuthOptions,\n        systemOptions: userSystemOptions,\n        loggerOptions: userLoggerOption,\n        storageInterface: storageImplementation,\n        networkInterface: networkImplementation,\n        cryptoInterface: cryptoImplementation,\n        clientCredentials: clientCredentials,\n        libraryInfo: libraryInfo,\n        serverTelemetryManager: serverTelemetryManager,\n        persistencePlugin: persistencePlugin,\n        serializableCache: serializableCache\n    }: ClientConfiguration): CommonClientConfiguration {\n\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\n        loggerOptions: { ...DEFAULT_LOGGER_IMPLEMENTATION, ...userLoggerOption },\n        storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION),\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null\n    };\n}\n\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions: AuthOptions): Required<AuthOptions> {\n    return {\n        clientCapabilities: [],\n        ...authOptions\n    };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\n\n/**\n * Error thrown when there is an error with the server code, for example, unavailability.\n */\nexport class ServerError extends AuthError {\n\n    constructor(errorCode?: string, errorMessage?: string, subError?: string) {\n        super(errorCode, errorMessage, subError);\n        this.name = \"ServerError\";\n\n        Object.setPrototypeOf(this, ServerError.prototype);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NetworkResponse } from \"./NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { HeaderNames, CacheSchemaType, ThrottlingConstants, Constants } from \"../utils/Constants\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerError } from \"../error/ServerError\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingEntity } from \"../cache/entities/ThrottlingEntity\";\n\nexport class ThrottlingUtils {\n\n    /**\n     * Prepares a RequestThumbprint to be stored as a key.\n     * @param thumbprint\n     */\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string {\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n    }\n\n    /**\n     * Performs necessary throttling checks before a network request.\n     * @param cacheManager\n     * @param thumbprint\n     */\n    static preProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint): void {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n                return;\n            }\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n        }\n    }\n\n    /**\n     * Performs necessary throttling checks after a network request.\n     * @param cacheManager\n     * @param thumbprint\n     * @param response\n     */\n    static postProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint, response: NetworkResponse<ServerAuthorizationTokenResponse>): void {\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n            const thumbprintValue: ThrottlingEntity = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror\n            };\n            cacheManager.setThrottlingCache(\n                ThrottlingUtils.generateThrottlingStorageKey(thumbprint),\n                thumbprintValue\n            );\n        }\n    }\n\n    /**\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\n     * @param response\n     */\n    static checkResponseStatus(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\n        return response.status === 429 || response.status >= 500 && response.status < 600;\n    }\n\n    /**\n     * Checks a NetworkResponse object's RetryAfter header\n     * @param response\n     */\n    static checkResponseForRetryAfter(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\n        if (response.headers) {\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n        }\n        return false;\n    }\n\n    /**\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n     * @param throttleTime\n     */\n    static calculateThrottleTime(throttleTime: number): number {\n        if(throttleTime <= 0) {\n            throttleTime = 0;\n        }\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(Math.min(\n            currentSeconds + (throttleTime || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),\n            currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS\n        ) * 1000);\n    }\n\n    static removeThrottle(cacheManager: CacheManager, clientId: string, authority: string, scopes: Array<string>, homeAccountIdentifier?: string): boolean {\n        const thumbprint: RequestThumbprint = {\n            clientId,\n            authority,\n            scopes,\n            homeAccountIdentifier\n        };\n\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        return cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule, NetworkRequestOptions } from \"./INetworkModule\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingUtils } from \"./ThrottlingUtils\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { AuthError } from \"../error/AuthError\";\n\nexport type NetworkResponse<T> = {\n    headers: Record<string, string>;\n    body: T;\n    status: number;\n};\n\nexport class NetworkManager {\n    private networkClient: INetworkModule;\n    private cacheManager: CacheManager;\n\n    constructor(networkClient: INetworkModule, cacheManager: CacheManager) {\n        this.networkClient = networkClient;\n        this.cacheManager = cacheManager;\n    }\n\n    /**\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\n     * @param thumbprint\n     * @param tokenEndpoint\n     * @param options\n     */\n    async sendPostRequest<T>(thumbprint: RequestThumbprint, tokenEndpoint: string, options: NetworkRequestOptions): Promise<NetworkResponse<T>> {\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n\n        let response;\n        try {\n            response = await this.networkClient.sendPostRequestAsync<T>(tokenEndpoint, options);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                throw e;\n            } else {\n                throw ClientAuthError.createNetworkError(tokenEndpoint, e);\n            }\n        }\n\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n\n        return response;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration, buildClientConfiguration, CommonClientConfiguration } from \"../config/ClientConfiguration\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkManager, NetworkResponse } from \"../network/NetworkManager\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { Authority } from \"../authority/Authority\";\nimport { Logger } from \"../logger/Logger\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { version, name } from \"../packageMetadata\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n */\nexport abstract class BaseClient {\n    // Logger object\n    public logger: Logger;\n\n    // Application config\n    protected config: CommonClientConfiguration;\n\n    // Crypto Interface\n    protected cryptoUtils: ICrypto;\n\n    // Storage Interface\n    protected cacheManager: CacheManager;\n\n    // Network Interface\n    protected networkClient: INetworkModule;\n\n    // Server Telemetry Manager\n    protected serverTelemetryManager: ServerTelemetryManager | null;\n\n    // Network Manager\n    protected networkManager: NetworkManager;\n\n    // Default authority object\n    public authority: Authority;\n\n    protected constructor(configuration: ClientConfiguration) {\n        // Set the configuration\n        this.config = buildClientConfiguration(configuration);\n\n        // Initialize the logger\n        this.logger = new Logger(this.config.loggerOptions, name, version);\n\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n\n        // Set the NetworkManager\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n    }\n\n    /**\n     * Creates default headers for requests to token endpoint\n     */\n    protected createDefaultTokenRequestHeaders(): Record<string, string> {\n        const headers: Record<string, string> = {};\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n\n        return headers;\n    }\n\n    /**\n     * Http post to token endpoint\n     * @param tokenEndpoint\n     * @param queryString\n     * @param headers\n     * @param thumbprint\n     */\n    protected async executePostToTokenEndpoint(tokenEndpoint: string, queryString: string, headers: Record<string, string>, thumbprint: RequestThumbprint): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const response = await this.networkManager.sendPostRequest<ServerAuthorizationTokenResponse>(\n            thumbprint,\n            tokenEndpoint,\n            { body: queryString, headers: headers }\n        );\n\n        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n\n        return response;\n    }\n\n    /**\n     * Updates the authority object of the client. Endpoint discovery must be completed.\n     * @param updatedAuthority \n     */\n    updateAuthority(updatedAuthority: Authority): void {\n        if (!updatedAuthority.discoveryComplete()) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n        }\n        this.authority = updatedAuthority;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { PromptValue, CodeChallengeMethodValues} from \"../utils/Constants\";\nimport { StringDict } from \"../utils/MsalTypes\";\n\n/**\n * Validates server consumable params from the \"request\" objects\n */\nexport class RequestValidator {\n\n    /**\n     * Utility to check if the `redirectUri` in the request is a non-null value\n     * @param redirectUri\n     */\n    static validateRedirectUri(redirectUri: string) : void {\n        if (StringUtils.isEmpty(redirectUri)) {\n            throw ClientConfigurationError.createRedirectUriEmptyError();\n        }\n    }\n\n    /**\n     * Utility to validate prompt sent by the user in the request\n     * @param prompt\n     */\n    static validatePrompt(prompt: string) : void {\n        if (\n            [\n                PromptValue.LOGIN,\n                PromptValue.SELECT_ACCOUNT,\n                PromptValue.CONSENT,\n                PromptValue.NONE\n            ].indexOf(prompt) < 0\n        ) {\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\n        }\n    }\n\n    static validateClaims(claims: string) : void {\n        try {\n            JSON.parse(claims);\n        } catch(e) {\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge and code_challenge_method\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeParams(codeChallenge: string, codeChallengeMethod: string) : void  {\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        } else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge_method\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeMethod(codeChallengeMethod: string) : void {\n        if (\n            [\n                CodeChallengeMethodValues.PLAIN,\n                CodeChallengeMethodValues.S256\n            ].indexOf(codeChallengeMethod) < 0\n        ) {\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n        }\n    }\n\n    /**\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\n     * @param request\n     */\n    static sanitizeEQParams(eQParams: StringDict, queryParams: Map<string, string>) : StringDict {\n        if (!eQParams) {\n            return {};\n        }\n\n        // Remove any query parameters already included in SSO params\n        queryParams.forEach((value, key) => {\n            if (eQParams[key]) {\n                delete eQParams[key];\n            }\n        });\n\n        return eQParams;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AADServerParamKeys, Constants, ResponseMode, SSOTypes, ClientInfo, AuthenticationScheme, ClaimsRequestKeys, PasswordGrantConstants, OIDC_DEFAULT_SCOPES, ThrottlingConstants} from \"../utils/Constants\";\nimport { ScopeSet } from \"./ScopeSet\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringDict } from \"../utils/MsalTypes\";\nimport { RequestValidator } from \"./RequestValidator\";\nimport { LibraryInfo } from \"../config/ClientConfiguration\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\n\nexport class RequestParameterBuilder {\n\n    private parameters: Map<string, string>;\n\n    constructor() {\n        this.parameters = new Map<string, string>();\n    }\n\n    /**\n     * add response_type = code\n     */\n    addResponseTypeCode(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\n        );\n    }\n\n    /**\n     * add response_mode. defaults to query.\n     * @param responseMode\n     */\n    addResponseMode(responseMode?: ResponseMode): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_MODE,\n            encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY)\n        );\n    }\n\n    /**\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n     * @param scopeSet\n     * @param addOidcScopes\n     */\n    addScopes(scopes: string[], addOidcScopes: boolean = true): void {\n        const requestScopes = addOidcScopes ? [...scopes || [], ...OIDC_DEFAULT_SCOPES] : scopes || [];\n        const scopeSet = new ScopeSet(requestScopes);\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n    }\n\n    /**\n     * add clientId\n     * @param clientId\n     */\n    addClientId(clientId: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n    }\n\n    /**\n     * add redirect_uri\n     * @param redirectUri\n     */\n    addRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n    }\n\n    /**\n     * add post logout redirectUri\n     * @param redirectUri\n     */\n    addPostLogoutRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n    }\n\n    /**\n     * add id_token_hint to logout request\n     * @param idTokenHint\n     */\n    addIdTokenHint(idTokenHint: string): void {\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n    }\n\n    /**\n     * add domain_hint\n     * @param domainHint\n     */\n    addDomainHint(domainHint: string): void {\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n    }\n\n    /**\n     * add login_hint\n     * @param loginHint\n     */\n    addLoginHint(loginHint: string): void {\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n    }\n\n    /**\n     * add sid\n     * @param sid\n     */\n    addSid(sid: string): void {\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n    }\n\n    /**\n     * add claims\n     * @param claims\n     */\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n        RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n    }\n\n    /**\n     * add correlationId\n     * @param correlationId\n     */\n    addCorrelationId(correlationId: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n    }\n\n    /**\n     * add library info query params\n     * @param libraryInfo\n     */\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\n        // Telemetry Info\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n        this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n    }\n\n    /**\n     * add prompt\n     * @param prompt\n     */\n    addPrompt(prompt: string): void {\n        RequestValidator.validatePrompt(prompt);\n        this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\n    }\n\n    /**\n     * add state\n     * @param state\n     */\n    addState(state: string): void {\n        if (!StringUtils.isEmpty(state)) {\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n        }\n    }\n\n    /**\n     * add nonce\n     * @param nonce\n     */\n    addNonce(nonce: string): void {\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n    }\n\n    /**\n     * add code_challenge and code_challenge_method\n     * - throw if either of them are not passed\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    addCodeChallengeParams(\n        codeChallenge: string,\n        codeChallengeMethod: string\n    ): void {\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n        } else {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        }\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addAuthorizationCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addDeviceCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `refreshToken` passed by the user\n     * @param refreshToken\n     */\n    addRefreshToken(refreshToken: string): void {\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n    }\n\n    /**\n     * add the `code_verifier` passed by the user to exchange for a token\n     * @param codeVerifier\n     */\n    addCodeVerifier(codeVerifier: string): void {\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n    }\n\n    /**\n     * add client_secret\n     * @param clientSecret\n     */\n    addClientSecret(clientSecret: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n    }\n\n    /**\n     * add clientAssertion for confidential client flows\n     * @param clientAssertion\n     */\n    addClientAssertion(clientAssertion: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n\n    /**\n     * add clientAssertionType for confidential client flows\n     * @param clientAssertionType\n     */\n    addClientAssertionType(clientAssertionType: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n\n    /**\n     * add OBO assertion for confidential client flows\n     * @param clientAssertion\n     */\n    addOboAssertion(oboAssertion: string): void {\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addRequestTokenUse(tokenUse: string): void {\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addGrantType(grantType: string): void {\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n    }\n\n    /**\n     * add client info\n     *\n     */\n    addClientInfo(): void {\n        this.parameters.set(ClientInfo, \"1\");\n    }\n\n    /**\n     * add extraQueryParams\n     * @param eQparams\n     */\n    addExtraQueryParameters(eQparams: StringDict): void {\n        RequestValidator.sanitizeEQParams(eQparams, this.parameters);\n        Object.keys(eQparams).forEach((key) => {\n            this.parameters.set(key, eQparams[key]);\n        });\n    }\n\n    addClientCapabilitiesToClaims(claims?: string, clientCapabilities?: Array<string>): string {\n        let mergedClaims: object;\n\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        } else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            } catch(e) {\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\n            }\n        }\n\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)){\n                // Add access_token key to claims object\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n                values: clientCapabilities\n            };\n        }\n\n        return JSON.stringify(mergedClaims);\n    }\n\n    /**\n     * adds `username` for Password Grant flow\n     * @param username\n     */\n    addUsername(username: string): void {\n        this.parameters.set(PasswordGrantConstants.username, username);\n    }\n\n    /**\n     * adds `password` for Password Grant flow\n     * @param password\n     */\n    addPassword(password: string): void {\n        this.parameters.set(PasswordGrantConstants.password, password);\n    }\n\n    /**\n     * add pop_jwk to query params\n     * @param cnfString\n     */\n    addPopToken(cnfString: string): void {\n        if (!StringUtils.isEmpty(cnfString)) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n        }\n    }\n\n    /**\n     * add server telemetry fields\n     * @param serverTelemetryManager \n     */\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n    }\n\n    /**\n     * Adds parameter that indicates to the server that throttling is supported\n     */\n    addThrottling(): void {\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n    }\n\n    /**\n     * Utility to create a URL from the params map\n     */\n    createQueryString(): string {\n        const queryParameterArray: Array<string> = new Array<string>();\n\n        this.parameters.forEach((value, key) => {\n            queryParameterArray.push(`${key}=${value}`);\n        });\n\n        return queryParameterArray.join(\"&\");\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CredentialEntity } from \"./CredentialEntity\";\nimport { CredentialType } from \"../../utils/Constants\";\n\n/**\n * ID_TOKEN Cache\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      realm: Full tenant or organizational identifier that the account belongs to\n * }\n */\nexport class IdTokenEntity extends CredentialEntity {\n    realm: string;\n\n    /**\n     * Create IdTokenEntity\n     * @param homeAccountId\n     * @param authenticationResult\n     * @param clientId\n     * @param authority\n     */\n    static createIdTokenEntity(\n        homeAccountId: string,\n        environment: string,\n        idToken: string,\n        clientId: string,\n        tenantId: string,\n        oboAssertion?: string\n    ): IdTokenEntity {\n        const idTokenEntity = new IdTokenEntity();\n\n        idTokenEntity.credentialType = CredentialType.ID_TOKEN;\n        idTokenEntity.homeAccountId = homeAccountId;\n        idTokenEntity.environment = environment;\n        idTokenEntity.clientId = clientId;\n        idTokenEntity.secret = idToken;\n        idTokenEntity.realm = tenantId;\n        idTokenEntity.oboAssertion = oboAssertion;\n\n        return idTokenEntity;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isIdTokenEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"credentialType\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"secret\") &&\n            entity[\"credentialType\"] === CredentialType.ID_TOKEN\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Utility class which exposes functions for managing date and time operations.\n */\nexport class TimeUtils {\n\n    /**\n     * return the current time in Unix time (seconds).\n     */\n    static nowSeconds(): number {\n        // Date.getTime() returns in milliseconds.\n        return Math.round(new Date().getTime() / 1000.0);\n    }\n    \n    /**\n     * check if a token is expired based on given UTC time in seconds.\n     * @param expiresOn\n     */\n    static isTokenExpired(expiresOn: string, offset: number): boolean {\n        // check for access token expiry\n        const expirationSec = Number(expiresOn) || 0;\n        const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n\n        // If current time + offset is greater than token expiration time, then token is expired.\n        return (offsetCurrentTimeSec > expirationSec);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CredentialEntity } from \"./CredentialEntity\";\nimport { CredentialType, AuthenticationScheme } from \"../../utils/Constants\";\nimport { TimeUtils } from \"../../utils/TimeUtils\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport { ICrypto } from \"../../crypto/ICrypto\";\nimport { TokenClaims } from \"../../account/TokenClaims\";\nimport { AuthToken } from \"../../account/AuthToken\";\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\n\n/**\n * ACCESS_TOKEN Credential Type\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, usually only used for refresh tokens\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n *      cachedAt: Absolute device time when entry was created in the cache.\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\n *      keyId: used for POP and SSH tokenTypes\n *      tokenType: Type of the token issued. Usually \"Bearer\"\n * }\n */\nexport class AccessTokenEntity extends CredentialEntity {\n    realm: string;\n    target: string;\n    cachedAt: string;\n    expiresOn: string;\n    extendedExpiresOn?: string;\n    refreshOn?: string;\n    keyId?: string; // for POP and SSH tokenTypes\n    tokenType?: string;\n\n    /**\n     * Create AccessTokenEntity\n     * @param homeAccountId\n     * @param environment\n     * @param accessToken\n     * @param clientId\n     * @param tenantId\n     * @param scopes\n     * @param expiresOn\n     * @param extExpiresOn\n     */\n    static createAccessTokenEntity(\n        homeAccountId: string,\n        environment: string,\n        accessToken: string,\n        clientId: string,\n        tenantId: string,\n        scopes: string,\n        expiresOn: number,\n        extExpiresOn: number,\n        cryptoUtils: ICrypto,\n        refreshOn?: number,\n        tokenType?: string,\n        oboAssertion?: string\n    ): AccessTokenEntity {\n        const atEntity: AccessTokenEntity = new AccessTokenEntity();\n\n        atEntity.homeAccountId = homeAccountId;\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN;\n        atEntity.secret = accessToken;\n\n        const currentTime = TimeUtils.nowSeconds();\n        atEntity.cachedAt = currentTime.toString();\n\n        /*\n         * Token expiry time.\n         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\n         */\n        atEntity.expiresOn = expiresOn.toString();\n        atEntity.extendedExpiresOn = extExpiresOn.toString();\n        if (refreshOn) {\n            atEntity.refreshOn = refreshOn.toString();\n        }\n\n        atEntity.environment = environment;\n        atEntity.clientId = clientId;\n        atEntity.realm = tenantId;\n        atEntity.target = scopes;\n        atEntity.oboAssertion = oboAssertion;\n\n        atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType;\n\n        // Create Access Token With AuthScheme instead of regular access token\n        if (atEntity.tokenType === AuthenticationScheme.POP) {\n            atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n            // Make sure keyId is present and add it to credential\n            const tokenClaims: TokenClaims | null = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\n            if (!tokenClaims?.cnf?.kid) {\n                throw ClientAuthError.createTokenClaimsRequiredError();\n            }\n            atEntity.keyId = tokenClaims.cnf.kid;\n        }\n\n        return atEntity;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAccessTokenEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"credentialType\") &&\n            entity.hasOwnProperty(\"realm\") &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"secret\") &&\n            entity.hasOwnProperty(\"target\") &&\n            (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME)\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CredentialEntity } from \"./CredentialEntity\";\nimport { CredentialType } from \"../../utils/Constants\";\n\n/**\n * REFRESH_TOKEN Cache\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--\n *\n * Value:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, '1' represents Microsoft Family\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n * }\n */\nexport class RefreshTokenEntity extends CredentialEntity {\n    familyId?: string;\n\n    /**\n     * Create RefreshTokenEntity\n     * @param homeAccountId\n     * @param authenticationResult\n     * @param clientId\n     * @param authority\n     */\n    static createRefreshTokenEntity(\n        homeAccountId: string,\n        environment: string,\n        refreshToken: string,\n        clientId: string,\n        familyId?: string,\n        oboAssertion?: string\n    ): RefreshTokenEntity {\n        const rtEntity = new RefreshTokenEntity();\n\n        rtEntity.clientId = clientId;\n        rtEntity.credentialType = CredentialType.REFRESH_TOKEN;\n        rtEntity.environment = environment;\n        rtEntity.homeAccountId = homeAccountId;\n        rtEntity.secret = refreshToken;\n        rtEntity.oboAssertion = oboAssertion;\n\n        if (familyId)\n            rtEntity.familyId = familyId;\n\n        return rtEntity;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isRefreshTokenEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"credentialType\") &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"secret\") &&\n            entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerError } from \"./ServerError\";\n\n/**\n * InteractionRequiredAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const InteractionRequiredAuthErrorMessage = [\n    \"interaction_required\",\n    \"consent_required\",\n    \"login_required\"\n];\n\nexport const InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\"\n];\n\n/**\n * Error thrown when user interaction is required at the auth server.\n */\nexport class InteractionRequiredAuthError extends ServerError {\n\n    constructor(errorCode?: string, errorMessage?: string, subError?: string) {\n        super(errorCode, errorMessage, subError);\n        this.name = \"InteractionRequiredAuthError\";\n\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n    }\n\n    static isInteractionRequiredError(errorCode?: string, errorString?: string, subError?: string) : boolean {\n        const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredAuthErrorMessage.indexOf(errorCode) > -1;\n        const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n        const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredAuthErrorMessage.some((irErrorCode) => {\n            return errorString.indexOf(irErrorCode) > -1;\n        });\n\n        return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IdTokenEntity } from \"./IdTokenEntity\";\nimport { AccessTokenEntity } from \"./AccessTokenEntity\";\nimport { RefreshTokenEntity } from \"./RefreshTokenEntity\";\nimport { AccountEntity } from \"./AccountEntity\";\nimport { AppMetadataEntity } from \"./AppMetadataEntity\";\n\nexport class CacheRecord {\n    account: AccountEntity | null;\n    idToken: IdTokenEntity | null;\n    accessToken: AccessTokenEntity | null;\n    refreshToken: RefreshTokenEntity | null;\n    appMetadata: AppMetadataEntity | null;\n\n    constructor(accountEntity?: AccountEntity | null, idTokenEntity?: IdTokenEntity | null, accessTokenEntity?: AccessTokenEntity | null, refreshTokenEntity?: RefreshTokenEntity | null, appMetadataEntity?: AppMetadataEntity | null) {\n        this.account = accountEntity || null;\n        this.idToken = idTokenEntity || null;\n        this.accessToken = accessTokenEntity || null;\n        this.refreshToken = refreshTokenEntity || null;\n        this.appMetadata = appMetadataEntity || null;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"./StringUtils\";\nimport { Constants } from \"./Constants\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * Type which defines the object that is stringified, encoded and sent in the state value.\n * Contains the following:\n * - id - unique identifier for this request\n * - ts - timestamp for the time the request was made. Used to ensure that token expiration is not calculated incorrectly.\n * - platformState - string value sent from the platform.\n */\nexport type LibraryStateObject = {\n    id: string,\n    meta?: Record<string, string>\n};\n\n/**\n * Type which defines the stringified and encoded object sent to the service in the authorize request.\n */\nexport type RequestStateObject = {\n    userRequestState: string,\n    libraryState: LibraryStateObject\n};\n\n/**\n * Class which provides helpers for OAuth 2.0 protocol specific values\n */\nexport class ProtocolUtils {\n\n    /**\n     * Appends user state with random guid, or returns random guid.\n     * @param userState \n     * @param randomGuid \n     */\n    static setRequestState(cryptoObj: ICrypto, userState?: string, meta?: Record<string, string>): string {\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n        return !StringUtils.isEmpty(userState) ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}` : libraryState;\n    }\n\n    /**\n     * Generates the state value used by the common library.\n     * @param randomGuid \n     * @param cryptoObj \n     */\n    static generateLibraryState(cryptoObj: ICrypto, meta?: Record<string, string>): string {\n        if (!cryptoObj) {\n            throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\n        }\n\n        // Create a state object containing a unique id and the timestamp of the request creation\n        const stateObj: LibraryStateObject = {\n            id: cryptoObj.createNewGuid()\n        };\n\n        if (meta) {\n            stateObj.meta = meta;\n        }\n\n        const stateString = JSON.stringify(stateObj);\n\n        return cryptoObj.base64Encode(stateString);\n    }\n\n    /**\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\n     * @param state \n     * @param cryptoObj \n     */\n    static parseRequestState(cryptoObj: ICrypto, state: string): RequestStateObject {\n        if (!cryptoObj) {\n            throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\n        }\n\n        if (StringUtils.isEmpty(state)) {\n            throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\n        }\n\n        try {\n            // Split the state between library state and user passed state and decode them separately\n            const splitState = decodeURIComponent(state).split(Constants.RESOURCE_DELIM);\n            const libraryState = splitState[0];\n            const userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : \"\";\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\n            const libraryStateObj = JSON.parse(libraryStateString) as LibraryStateObject;\n            return {\n                userRequestState: !StringUtils.isEmpty(userState) ? userState : \"\",\n                libraryState: libraryStateObj\n            };\n        } catch(e) {\n            throw ClientAuthError.createInvalidStateError(state, e);\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { IUri } from \"./IUri\";\nimport { AADAuthorityConstants, Constants } from \"../utils/Constants\";\n\n/**\n * Url object class which can perform various transformations on url strings.\n */\nexport class UrlString {\n\n    // internal url string field\n    private _urlString: string;\n    public get urlString(): string {\n        return this._urlString;\n    }\n    \n    constructor(url: string) {\n        this._urlString = url;\n        if (StringUtils.isEmpty(this._urlString)) {\n            // Throws error if url is empty\n            throw ClientConfigurationError.createUrlEmptyError();\n        }\n\n        if (StringUtils.isEmpty(this.getHash())) {\n            this._urlString = UrlString.canonicalizeUri(url);\n        }\n    }\n\n    /**\n     * Ensure urls are lower case and end with a / character.\n     * @param url \n     */\n    static canonicalizeUri(url: string): string {\n        if (url) {\n            url = url.toLowerCase();\n\n            if (StringUtils.endsWith(url, \"?\")) {\n                url = url.slice(0, -1);\n            } else if (StringUtils.endsWith(url, \"?/\")) {\n                url = url.slice(0, -2);\n            }\n\n            if (!StringUtils.endsWith(url, \"/\")) {\n                url += \"/\";\n            }\n        }\n\n        return url;\n    }\n\n    /**\n     * Throws if urlString passed is not a valid authority URI string.\n     */\n    validateAsUri(): void {\n        // Attempts to parse url for uri components\n        let components;\n        try {\n            components = this.getUrlComponents();\n        } catch (e) {\n            throw ClientConfigurationError.createUrlParseError(e);\n        }\n\n        // Throw error if URI or path segments are not parseable.\n        if (!components.HostNameAndPort || !components.PathSegments) {\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\n        }\n\n        // Throw error if uri is insecure.\n        if(!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\n        }\n    }\n\n    /**\n     * Function to remove query string params from url. Returns the new url.\n     * @param url\n     * @param name\n     */\n    urlRemoveQueryStringParameter(name: string): string {\n        let regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\n        this._urlString = this.urlString.replace(regex, \"\");\n        // name=value&\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\n        this._urlString = this.urlString.replace(regex, \"\");\n        // name=value\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\n        this._urlString = this.urlString.replace(regex, \"\");\n        return this.urlString;\n    }\n\n    /**\n     * Given a url and a query string return the url with provided query string appended\n     * @param url \n     * @param queryString \n     */\n    static appendQueryString(url: string, queryString: string): string {\n        if (StringUtils.isEmpty(queryString)) {\n            return url;\n        }\n\n        return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\n    }\n\n    /**\n     * Returns a url with the hash removed\n     * @param url \n     */\n    static removeHashFromUrl(url: string): string {\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n    }\n\n    /**\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\n     * @param href The url\n     * @param tenantId The tenant id to replace\n     */\n    replaceTenantPath(tenantId: string): UrlString {\n        const urlObject = this.getUrlComponents();\n        const pathArray = urlObject.PathSegments;\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\n            pathArray[0] = tenantId;\n        }\n        return UrlString.constructAuthorityUriFromObject(urlObject);\n    }\n\n    /**\n     * Returns the anchor part(#) of the URL\n     */\n    getHash(): string {\n        return UrlString.parseHash(this.urlString);\n    }\n\n    /**\n     * Parses out the components from a url string.\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\n     */\n    getUrlComponents(): IUri {\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n\n        // If url string does not match regEx, we throw an error\n        const match = this.urlString.match(regEx);\n        if (!match) {\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\n        }\n\n        // Url component object\n        const urlComponents = {\n            Protocol: match[1],\n            HostNameAndPort: match[4],\n            AbsolutePath: match[5],\n            QueryString: match[7]\n        } as IUri;\n\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\n        urlComponents.PathSegments = pathSegments;\n\n        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length-1);\n        }\n        return urlComponents;\n    }\n\n    static getDomainFromUrl(url: string): string {\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n\n        const match = url.match(regEx);\n\n        if (!match) {\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${url}`);\n        }\n\n        return match[2];\n    }\n\n    static getAbsoluteUrl(relativeUrl: string, baseUrl: string): string {\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n            const url = new UrlString(baseUrl);\n            const baseComponents = url.getUrlComponents();\n\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n        }\n        \n        return relativeUrl;\n    }\n    \n    /**\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\n     * @param hashString \n     */\n    static parseHash(hashString: string): string {\n        const hashIndex1 = hashString.indexOf(\"#\");\n        const hashIndex2 = hashString.indexOf(\"#/\");\n        if (hashIndex2 > -1) {\n            return hashString.substring(hashIndex2 + 2);\n        } else if (hashIndex1 > -1) {\n            return hashString.substring(hashIndex1 + 1);\n        }\n        return \"\";\n    }\n\n    static constructAuthorityUriFromObject(urlObject: IUri): UrlString {\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n    }\n\n    /**\n     * Returns URL hash as server auth code response object.\n     */\n    static getDeserializedHash(hash: string): ServerAuthorizationCodeResponse {\n        // Check if given hash is empty\n        if (StringUtils.isEmpty(hash)) {\n            return {};\n        }\n        // Strip the # symbol if present\n        const parsedHash = UrlString.parseHash(hash);\n        // If # symbol was not present, above will return empty string, so give original hash value\n        const deserializedHash: ServerAuthorizationCodeResponse = StringUtils.queryStringToObject<ServerAuthorizationCodeResponse>(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\n        // Check if deserialization didn't work\n        if (!deserializedHash) {\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n        }\n        return deserializedHash;\n    }\n\n    /**\n     * Check if the hash of the URL string contains known properties\n     */\n    static hashContainsKnownProperties(hash: string): boolean {\n        if (StringUtils.isEmpty(hash)) {\n            return false;\n        }\n\n        const parameters: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\n        return !!(\n            parameters.code ||\n            parameters.error_description ||\n            parameters.error ||\n            parameters.state\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto } from \"./ICrypto\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { TokenClaims } from \"../account/TokenClaims\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/**\n * See eSTS docs for more info.\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\n *      - sw: software storage\n *      - uhw: hardware storage\n */\ntype ReqCnf = {\n    kid: string;\n    xms_ksl: KeyLocation;\n};\n\nenum KeyLocation {\n    SW = \"sw\",\n    UHW = \"uhw\"\n}\n\nexport class PopTokenGenerator {\n\n    private cryptoUtils: ICrypto;\n\n    constructor(cryptoUtils: ICrypto) {\n        this.cryptoUtils = cryptoUtils;\n    }\n\n    async generateCnf(request: BaseAuthRequest): Promise<string> {\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n        const reqCnf: ReqCnf = {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW\n        };\n        return this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n    }\n\n    async signPopToken(accessToken: string, request: BaseAuthRequest): Promise<string> {\n        const tokenClaims: TokenClaims | null = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);\n\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims } = request;\n\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n\n        if (!tokenClaims?.cnf?.kid) {\n            throw ClientAuthError.createTokenClaimsRequiredError();\n        }\n\n        return await this.cryptoUtils.signJwt({\n            at: accessToken,\n            ts: TimeUtils.nowSeconds(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n            client_claims: shrClaims || undefined\n        }, tokenClaims.cnf.kid);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { APP_METADATA, Separators } from \"../../utils/Constants\";\n\n/**\n * APP_METADATA Cache\n *\n * Key:Value Schema:\n *\n * Key: appmetadata-<environment>-<client_id>\n *\n * Value:\n * {\n *      clientId: client ID of the application\n *      environment: entity that issued the token, represented as a full host\n *      familyId: Family ID identifier, '1' represents Microsoft Family\n * }\n */\nexport class AppMetadataEntity {\n    clientId: string;\n    environment: string;\n    familyId?: string;\n\n    /**\n     * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\n     */\n    generateAppMetadataKey(): string {\n        return AppMetadataEntity.generateAppMetadataCacheKey(this.environment, this.clientId);\n    }\n\n    /**\n     * Generate AppMetadata Cache Key\n     */\n    static generateAppMetadataCacheKey(environment: string, clientId: string): string {\n        const appMetaDataKeyArray: Array<string> = [\n            APP_METADATA,\n            environment,\n            clientId,\n        ];\n        return appMetaDataKeyArray.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Creates AppMetadataEntity\n     * @param clientId\n     * @param environment\n     * @param familyId\n     */\n    static createAppMetadataEntity(clientId: string, environment: string, familyId?: string): AppMetadataEntity {\n        const appMetadata = new AppMetadataEntity();\n\n        appMetadata.clientId = clientId;\n        appMetadata.environment = environment;\n        if (familyId) {\n            appMetadata.familyId = familyId;\n        }\n\n        return appMetadata;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAppMetadataEntity(key: string, entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            key.indexOf(APP_METADATA) === 0 &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"environment\")\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ISerializableTokenCache } from \"../interface/ISerializableTokenCache\";\n\n/**\n * This class instance helps track the memory changes facilitating\n * decisions to read from and write to the persistent cache\n */export class TokenCacheContext {\n    /**\n     * boolean indicating cache change\n     */\n    hasChanged: boolean;\n    /**\n     * serializable token cache interface\n     */\n    cache: ISerializableTokenCache;\n\n    constructor(tokenCache: ISerializableTokenCache, hasChanged: boolean) {\n        this.cache = tokenCache;\n        this.hasChanged = hasChanged;\n    }\n\n    /**\n     * boolean which indicates the changes in cache\n     */\n    get cacheHasChanged(): boolean {\n        return this.hasChanged;\n    }\n\n    /**\n     * function to retrieve the token cache\n     */\n    get tokenCache(): ISerializableTokenCache {\n        return this.cache;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationTokenResponse } from \"./ServerAuthorizationTokenResponse\";\nimport { buildClientInfo} from \"../account/ClientInfo\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ServerAuthorizationCodeResponse } from \"./ServerAuthorizationCodeResponse\";\nimport { Logger } from \"../logger/Logger\";\nimport { ServerError } from \"../error/ServerError\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AuthenticationResult } from \"./AuthenticationResult\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { Authority } from \"../authority/Authority\";\nimport { AuthorityType } from \"../authority/AuthorityType\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { RefreshTokenEntity } from \"../cache/entities/RefreshTokenEntity\";\nimport { InteractionRequiredAuthError } from \"../error/InteractionRequiredAuthError\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ProtocolUtils, RequestStateObject } from \"../utils/ProtocolUtils\";\nimport { AuthenticationScheme, Constants, THE_FAMILY_ID } from \"../utils/Constants\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { AppMetadataEntity } from \"../cache/entities/AppMetadataEntity\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { TokenCacheContext } from \"../cache/persistence/TokenCacheContext\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\nimport { AuthorizationCodePayload } from \"./AuthorizationCodePayload\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/**\n * Class that handles response parsing.\n */\nexport class ResponseHandler {\n    private clientId: string;\n    private cacheStorage: CacheManager;\n    private cryptoObj: ICrypto;\n    private logger: Logger;\n    private homeAccountIdentifier: string;\n    private serializableCache: ISerializableTokenCache | null;\n    private persistencePlugin: ICachePlugin | null;\n\n    constructor(clientId: string, cacheStorage: CacheManager, cryptoObj: ICrypto, logger: Logger, serializableCache: ISerializableTokenCache | null, persistencePlugin: ICachePlugin | null) {\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n    }\n\n    /**\n     * Function which validates server authorization code response.\n     * @param serverResponseHash\n     * @param cachedState\n     * @param cryptoObj\n     */\n    validateServerAuthorizationCodeResponse(serverResponseHash: ServerAuthorizationCodeResponse, cachedState: string, cryptoObj: ICrypto): void {\n\n        if (!serverResponseHash.state || !cachedState) {\n            throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\n            throw ClientAuthError.createStateMismatchError();\n        }\n\n        // Check for error\n        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n            }\n\n            throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n        }\n\n        if (serverResponseHash.client_info) {\n            buildClientInfo(serverResponseHash.client_info, cryptoObj);\n        }\n    }\n\n    /**\n     * Function which validates server authorization token response.\n     * @param serverResponse\n     */\n    validateTokenResponse(serverResponse: ServerAuthorizationTokenResponse): void {\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\n            }\n\n            const errString = `${serverResponse.error_codes} - [${serverResponse.timestamp}]: ${serverResponse.error_description} - Correlation ID: ${serverResponse.correlation_id} - Trace ID: ${serverResponse.trace_id}`;\n            throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\n        }\n    }\n\n    /**\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\n     * @param serverTokenResponse\n     * @param authority\n     */\n    async handleServerTokenResponse(\n        serverTokenResponse: ServerAuthorizationTokenResponse,\n        authority: Authority,\n        reqTimestamp: number,\n        request: BaseAuthRequest,\n        authCodePayload?: AuthorizationCodePayload,\n        oboAssertion?: string,\n        handlingRefreshTokenResponse?: boolean): Promise<AuthenticationResult> {\n\n        // create an idToken object (not entity)\n        let idTokenObj: AuthToken | undefined;\n        if (serverTokenResponse.id_token) {\n            idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);\n    \n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\n                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\n                    throw ClientAuthError.createNonceMismatchError();\n                }\n            }\n        }\n\n        // generate homeAccountId\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\n\n        // save the response tokens\n        let requestStateObj: RequestStateObject | undefined;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n        }\n\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, idTokenObj, request.scopes, oboAssertion, authCodePayload);\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n                cacheContext = new TokenCacheContext(this.serializableCache, true);\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.\n             */\n            if (handlingRefreshTokenResponse && cacheRecord.account) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key);\n                if (!account) {\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                    return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj);\n                }\n            }\n            this.cacheStorage.saveCacheRecord(cacheRecord);\n        } finally {\n            if (this.persistencePlugin && this.serializableCache && cacheContext) {\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj);\n    }\n\n    /**\n     * Generates CacheRecord\n     * @param serverTokenResponse\n     * @param idTokenObj\n     * @param authority\n     */\n    private generateCacheRecord(serverTokenResponse: ServerAuthorizationTokenResponse, authority: Authority, reqTimestamp: number, idTokenObj?: AuthToken, requestScopes?: string[], oboAssertion?: string, authCodePayload?: AuthorizationCodePayload): CacheRecord {\n        const env = authority.getPreferredCache();\n        if (StringUtils.isEmpty(env)) {\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\n        }\n\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken: IdTokenEntity | undefined;\n        let cachedAccount: AccountEntity | undefined;\n        if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\n            cachedIdToken = IdTokenEntity.createIdTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.id_token || Constants.EMPTY_STRING,\n                this.clientId,\n                idTokenObj.claims.tid || Constants.EMPTY_STRING,\n                oboAssertion\n            );\n\n            cachedAccount = this.generateAccountEntity(\n                serverTokenResponse,\n                idTokenObj,\n                authority,\n                oboAssertion,\n                authCodePayload\n            );\n        }\n\n        // AccessToken\n        let cachedAccessToken: AccessTokenEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\n\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(requestScopes || []);\n\n            /*\n             * Use timestamp calculated before request\n             * Server may return timestamps as strings, parse to numbers if so.\n             */\n            const expiresIn: number = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn: number = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn: number | undefined = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.access_token || Constants.EMPTY_STRING,\n                this.clientId,\n                idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant,\n                responseScopes.printScopes(),\n                tokenExpirationSeconds,\n                extendedTokenExpirationSeconds,\n                this.cryptoObj,\n                refreshOnSeconds,\n                serverTokenResponse.token_type,\n                oboAssertion\n            );\n        }\n\n        // refreshToken\n        let cachedRefreshToken: RefreshTokenEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\n            cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(\n                this.homeAccountIdentifier,\n                env,\n                serverTokenResponse.refresh_token || Constants.EMPTY_STRING,\n                this.clientId,\n                serverTokenResponse.foci,\n                oboAssertion\n            );\n        }\n\n        // appMetadata\n        let cachedAppMetadata: AppMetadataEntity | null = null;\n        if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\n            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n        }\n\n        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n    }\n\n    /**\n     * Generate Account\n     * @param serverTokenResponse\n     * @param idToken\n     * @param authority\n     */\n    private generateAccountEntity(serverTokenResponse: ServerAuthorizationTokenResponse, idToken: AuthToken, authority: Authority, oboAssertion?: string, authCodePayload?: AuthorizationCodePayload): AccountEntity {\n        const authorityType = authority.authorityType;\n        const cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : \"\";\n        const msGraphhost = authCodePayload ? authCodePayload.msgraph_host : \"\";\n\n        // ADFS does not require client_info in the response\n        if (authorityType === AuthorityType.Adfs) {\n            this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\n            return AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\n        }\n\n        // This fallback applies to B2C as well as they fall under an AAD account type.\n        if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\n            throw ClientAuthError.createClientInfoEmptyError();\n        }\n\n        return serverTokenResponse.client_info ?\n            AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, authority, idToken, oboAssertion, cloudGraphHostName, msGraphhost) :\n            AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\n    }\n\n    /**\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\n     *\n     * Optionally takes a state string that is set as-is in the response.\n     *\n     * @param cacheRecord\n     * @param idTokenObj\n     * @param fromTokenCache\n     * @param stateString\n     */\n    static async generateAuthenticationResult(\n        cryptoObj: ICrypto, \n        authority: Authority,\n        cacheRecord: CacheRecord, \n        fromTokenCache: boolean, \n        request: BaseAuthRequest,\n        idTokenObj?: AuthToken,\n        requestState?: RequestStateObject): Promise<AuthenticationResult> {\n        let accessToken: string = \"\";\n        let responseScopes: Array<string> = [];\n        let expiresOn: Date | null = null;\n        let extExpiresOn: Date | undefined;\n        let familyId: string = Constants.EMPTY_STRING;\n\n        if (cacheRecord.accessToken) {\n            if (cacheRecord.accessToken.tokenType === AuthenticationScheme.POP) {\n                const popTokenGenerator: PopTokenGenerator = new PopTokenGenerator(cryptoObj);\n                accessToken = await popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request);\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n        }\n\n        if (cacheRecord.appMetadata) {\n            familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\n        }\n        const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\n        const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\n\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            extExpiresOn: extExpiresOn,\n            familyId: familyId,\n            tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || Constants.EMPTY_STRING,\n            msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, PromptValue } from \"../utils/Constants\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { UrlString } from \"../url/UrlString\";\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { TokenClaims } from \"../account/TokenClaims\";\nimport { AccountInfo } from \"../account/AccountInfo\";\n\n/**\n * Oauth2.0 Authorization Code client\n */\nexport class AuthorizationCodeClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\n     * application. The URL target the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * acquireToken(AuthorizationCodeRequest)\n     * @param request\n     */\n    async getAuthCodeUrl(request: CommonAuthorizationUrlRequest): Promise<string> {\n        const queryString = this.createAuthCodeUrlQueryString(request);\n\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n\n    /**\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n     * authorization_code_grant\n     * @param request\n     */\n    async acquireToken(request: CommonAuthorizationCodeRequest, authCodePayload?: AuthorizationCodePayload): Promise<AuthenticationResult> {\n        this.logger.info(\"in acquireToken call\");\n        if (!request || StringUtils.isEmpty(request.code)) {\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\n        }\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return await responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload);\n    }\n\n    /**\n     * Handles the hash fragment response from public client code request. Returns a code response used by\n     * the client to exchange for a token in acquireToken.\n     * @param hashFragment\n     */\n    handleFragmentResponse(hashFragment: string, cachedState: string): AuthorizationCodePayload {\n        // Handle responses.\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n\n        // Deserialize hash fragment response parameters.\n        const hashUrlString = new UrlString(hashFragment);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hashUrlString.getHash());\n\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\n        }\n\n        return {\n            ...serverParams,\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n            code: serverParams.code\n        };\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param authorityUri\n     */\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\n        }\n\n        if (logoutRequest.account) {\n            // Clear given account.\n            this.cacheManager.removeAccount(AccountEntity.generateAccountCacheKey(logoutRequest.account));\n        } else {\n            // Clear all accounts and tokens\n            this.cacheManager.clear();\n        }\n\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n\n        // Construct logout URI.\n        return StringUtils.isEmpty(queryString) ? this.authority.endSessionEndpoint : `${this.authority.endSessionEndpoint}?${queryString}`;\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonAuthorizationCodeRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes\n        };\n\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        const headers: Record<string, string> = this.createDefaultTokenRequestHeaders();\n\n        const endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : `${authority.tokenEndpoint}?${queryParameters}`;\n\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request \n     */\n    private createTokenQueryParameters(request: CommonAuthorizationCodeRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonAuthorizationCodeRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes);\n\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const cnfString = await popTokenGenerator.generateCnf(request);\n            parameterBuilder.addPopToken(cnfString);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n     * @param request\n     */\n    private createAuthCodeUrlQueryString(request: CommonAuthorizationUrlRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        const requestScopes = [...request.scopes || [], ...request.extraScopesToConsent || []];\n        parameterBuilder.addScopes(requestScopes);\n\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n\n        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            } else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                // If account and loginHint are provided, we will check account first for sid before adding loginHint\n                if (accountSid && request.prompt === PromptValue.NONE) {\n                    // SessionId is only used in silent calls\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                } else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                } else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                }\n            } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n            }\n        } else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `EndSessionRequest` and creates a URL\n     * @param request\n     */\n    private createLogoutUrlQueryString(request: CommonEndSessionRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n     * @param account \n     */\n    private extractAccountSid(account: AccountInfo): string | null {\n        if (account.idTokenClaims) {\n            const tokenClaims = account.idTokenClaims as TokenClaims;\n            return tokenClaims.sid || null;\n        }\n        return null;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { DeviceCodeResponse, ServerDeviceCodeResponse } from \"../response/DeviceCodeResponse\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonDeviceCodeRequest } from \"../request/CommonDeviceCodeRequest\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { Constants, GrantType } from \"../utils/Constants\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\n\n/**\n * OAuth2.0 Device code client\n */\nexport class DeviceCodeClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Gets device code from device code endpoint, calls back to with device code response, and\n     * polls token endpoint to exchange device code for tokens\n     * @param request\n     */\n    public async acquireToken(request: CommonDeviceCodeRequest): Promise<AuthenticationResult | null> {\n        const deviceCodeResponse: DeviceCodeResponse = await this.getDeviceCode(request);\n        request.deviceCodeCallback(deviceCodeResponse);\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response: ServerAuthorizationTokenResponse = await this.acquireTokenWithDeviceCode(\n            request,\n            deviceCodeResponse);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response);\n        return await responseHandler.handleServerTokenResponse(\n            response,\n            this.authority,\n            reqTimestamp,\n            request\n        );\n    }\n\n    /**\n     * Creates device code request and executes http GET\n     * @param request\n     */\n    private async getDeviceCode(request: CommonDeviceCodeRequest): Promise<DeviceCodeResponse> {\n        const queryString = this.createQueryString(request);\n        const headers = this.createDefaultTokenRequestHeaders();\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes\n        };\n\n        return this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint);\n    }\n\n    /**\n     * Executes POST request to device code endpoint\n     * @param deviceCodeEndpoint\n     * @param queryString\n     * @param headers\n     */\n    private async executePostRequestToDeviceCodeEndpoint(\n        deviceCodeEndpoint: string,\n        queryString: string,\n        headers: Record<string, string>,\n        thumbprint: RequestThumbprint): Promise<DeviceCodeResponse> {\n\n        const {\n            body: {\n                user_code: userCode,\n                device_code: deviceCode,\n                verification_uri: verificationUri,\n                expires_in: expiresIn,\n                interval,\n                message\n            }\n        } = await this.networkManager.sendPostRequest<ServerDeviceCodeResponse>(\n            thumbprint,\n            deviceCodeEndpoint,\n            {\n                body: queryString,\n                headers: headers\n            });\n\n        return {\n            userCode,\n            deviceCode,\n            verificationUri,\n            expiresIn,\n            interval,\n            message\n        };\n    }\n\n    /**\n     * Create device code endpoint query parameters and returns string\n     */\n    private createQueryString(request: CommonDeviceCodeRequest): string {\n\n        const parameterBuilder: RequestParameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addScopes(request.scopes);\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\n     * response\n     * @param request\n     * @param deviceCodeResponse\n     */\n    private async acquireTokenWithDeviceCode(\n        request: CommonDeviceCodeRequest,\n        deviceCodeResponse: DeviceCodeResponse): Promise<ServerAuthorizationTokenResponse> {\n\n        const requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n        const headers: Record<string, string> = this.createDefaultTokenRequestHeaders();\n\n        const userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\n        const deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\n        const pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n\n        /*\n         * Poll token endpoint while (device code is not expired AND operation has not been cancelled by\n         * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli\n         */\n        return new Promise<ServerAuthorizationTokenResponse>((resolve, reject) => {\n\n            const intervalId: ReturnType<typeof setTimeout> = setInterval(async () => {\n                try {\n                    if (request.cancel) {\n\n                        this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n                        clearInterval(intervalId);\n                        reject(ClientAuthError.createDeviceCodeCancelledError());\n\n                    } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\n\n                        this.logger.error(`User defined timeout for device code polling reached. The timeout was set for ${userSpecifiedTimeout}`);\n                        clearInterval(intervalId);\n                        reject(ClientAuthError.createUserTimeoutReachedError());\n\n                    } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\n\n                        if (userSpecifiedTimeout) {\n                            this.logger.verbose(`User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for ${userSpecifiedTimeout}`);\n                        }\n\n                        this.logger.error(`Device code expired. Expiration time of device code was ${deviceCodeExpirationTime}`);\n                        clearInterval(intervalId);\n                        reject(ClientAuthError.createDeviceCodeExpiredError());\n\n                    } else {\n                        const thumbprint: RequestThumbprint = {\n                            clientId: this.config.authOptions.clientId,\n                            authority: request.authority,\n                            scopes: request.scopes\n                        };\n                        const response = await this.executePostToTokenEndpoint(\n                            this.authority.tokenEndpoint,\n                            requestBody,\n                            headers,\n                            thumbprint);\n\n                        if (response.body && response.body.error === Constants.AUTHORIZATION_PENDING) {\n                            // user authorization is pending. Sleep for polling interval and try again\n                            this.logger.info(response.body.error_description || \"no_error_description\");\n                        } else {\n                            clearInterval(intervalId);\n                            resolve(response.body);\n                        }\n                    }\n                } catch (error) {\n                    clearInterval(intervalId);\n                    reject(error);\n                }\n            }, pollingIntervalMilli);\n        });\n    }\n\n    /**\n     * Creates query parameters and converts to string.\n     * @param request\n     * @param deviceCodeResponse\n     */\n    private createTokenRequestBody(request: CommonDeviceCodeRequest, deviceCodeResponse: DeviceCodeResponse): string {\n\n        const requestParameters: RequestParameterBuilder = new RequestParameterBuilder();\n\n        requestParameters.addScopes(request.scopes);\n        requestParameters.addClientId(this.config.authOptions.clientId);\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        requestParameters.addCorrelationId(correlationId);\n        requestParameters.addClientInfo();\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\n        requestParameters.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        return requestParameters.createQueryString();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, Errors  } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError, ClientAuthErrorMessage } from \"../error/ClientAuthError\";\nimport { ServerError } from \"../error/ServerError\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\n\n/**\n * OAuth2.0 refresh token client\n */\nexport class RefreshTokenClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult>{\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(request, this.authority);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n        return responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            undefined,\n            undefined,\n            true\n        );\n    }\n\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\n\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return this.acquireTokenWithCachedRefreshToken(request, true);\n            } catch (e) {\n                const noFamilyRTInCache = e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\n                // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        // fall back to application refresh token acquisition\n        return this.acquireTokenWithCachedRefreshToken(request, false);\n    }\n\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\n        // fetches family RT or application RT based on FOCI value\n        const refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\n\n        // no refresh Token\n        if (!refreshToken) {\n            throw ClientAuthError.createNoTokensFoundError();\n        }\n\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER\n        };\n\n        return this.acquireToken(refreshTokenRequest);\n    }\n\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        const headers: Record<string, string> = this.createDefaultTokenRequestHeaders();\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes\n        };\n\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request \n     */\n    private createTokenQueryParameters(request: CommonRefreshTokenRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRefreshToken(request.refreshToken);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n\n            parameterBuilder.addPopToken(await popTokenGenerator.generateCnf(request));\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { GrantType , CredentialType } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { CommonClientCredentialRequest } from \"../request/CommonClientCredentialRequest\";\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n\n/**\n * OAuth2.0 client credential grant\n */\nexport class ClientCredentialClient extends BaseClient {\n\n    private scopeSet: ScopeSet;\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\n     * @param request\n     */\n    public async acquireToken(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\n\n        this.scopeSet = new ScopeSet(request.scopes || []);\n\n        if (request.skipCache) {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\n        if (cachedAuthenticationResult) {\n            return cachedAuthenticationResult;\n        } else {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n    }\n\n    /**\n     * looks up cache if the tokens are cached already\n     */\n    private async getCachedAuthenticationResult(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\n        const cachedAccessToken = this.readAccessTokenFromCache();\n        if (!cachedAccessToken ||\n            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            return null;\n        }\n\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            {\n                account: null,\n                idToken: null,\n                accessToken: cachedAccessToken,\n                refreshToken: null,\n                appMetadata: null\n            },\n            true,\n            request\n        );\n    }\n\n    /**\n     * Reads access token from the cache\n     * TODO: Move this call to cacheManager instead\n     */\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\n        const accessTokenFilter: CredentialFilter = {\n            homeAccountId: \"\",\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ACCESS_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant,\n            target: this.scopeSet.printScopesLowerCase()\n        };\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n        const accessTokens = Object.keys(credentialCache.accessTokens).map(key => credentialCache.accessTokens[key]);\n        if (accessTokens.length < 1) {\n            return null;\n        } else if (accessTokens.length > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * Makes a network call to request the token from the service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonClientCredentialRequest, authority: Authority)\n        : Promise<AuthenticationResult | null> {\n\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createDefaultTokenRequestHeaders();\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes\n        };\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request\n        );\n\n        return tokenResponse;\n    }\n\n    /**\n     * generate the request to the server in the acceptable format\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonClientCredentialRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes, false);\n\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { GrantType, AADServerParamKeys , CredentialType, Constants } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { CommonOnBehalfOfRequest } from \"../request/CommonOnBehalfOfRequest\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AccountInfo } from \"../account/AccountInfo\";\n\n/**\n * On-Behalf-Of client\n */\nexport class OnBehalfOfClient extends BaseClient {\n\n    private scopeSet: ScopeSet;\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Public API to acquire tokens with on behalf of flow\n     * @param request\n     */\n    public async acquireToken(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\n        this.scopeSet = new ScopeSet(request.scopes || []);\n\n        if (request.skipCache) {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\n        if (cachedAuthenticationResult) {\n            return cachedAuthenticationResult;\n        } else {\n            return await this.executeTokenRequest(request, this.authority);\n        }\n    }\n\n    /**\n     * look up cache for tokens\n     * @param request\n     */\n    private async getCachedAuthenticationResult(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\n        const cachedAccessToken = this.readAccessTokenFromCache(request);\n        if (!cachedAccessToken ||\n            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            return null;\n        }\n\n        const cachedIdToken = this.readIdTokenFromCache(request);\n        let idTokenObject: AuthToken | undefined;\n        let cachedAccount: AccountEntity | null = null;\n        if (cachedIdToken) {\n            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n            const localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n            const accountInfo: AccountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || \"\"\n            };\n\n            cachedAccount = this.readAccountFromCache(accountInfo);\n        }\n\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            {\n                account: cachedAccount,\n                accessToken: cachedAccessToken,\n                idToken: cachedIdToken,\n                refreshToken: null,\n                appMetadata: null\n            },\n            true,\n            request,\n            idTokenObject);\n    }\n\n    /**\n     * read access token from cache TODO: CacheManager API should be used here\n     * @param request\n     */\n    private readAccessTokenFromCache(request: CommonOnBehalfOfRequest): AccessTokenEntity | null {\n        const accessTokenFilter: CredentialFilter = {\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ACCESS_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant,\n            target: this.scopeSet.printScopesLowerCase(),\n            oboAssertion: request.oboAssertion\n        };\n\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n        const accessTokens = Object.keys(credentialCache.accessTokens).map(key => credentialCache.accessTokens[key]);\n\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            return null;\n        } else if (numAccessTokens > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * read idtoken from cache TODO: CacheManager API should be used here instead\n     * @param request\n     */\n    private readIdTokenFromCache(request: CommonOnBehalfOfRequest): IdTokenEntity | null {\n        const idTokenFilter: CredentialFilter = {\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ID_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant,\n            oboAssertion: request.oboAssertion\n        };\n\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\n        const idTokens = Object.keys(credentialCache.idTokens).map(key => credentialCache.idTokens[key]);\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\n        if (idTokens.length < 1) {\n            return null;\n        }\n        return idTokens[0] as IdTokenEntity;\n    }\n\n    /**\n     * read account from cache, TODO: CacheManager API should be used here instead\n     * @param account\n     */\n    private readAccountFromCache(account: AccountInfo): AccountEntity | null {\n        return this.cacheManager.readAccountFromCache(account);\n    }\n\n    /**\n     * Make a network call to the server requesting credentials\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonOnBehalfOfRequest, authority: Authority)\n        : Promise<AuthenticationResult | null> {\n\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createDefaultTokenRequestHeaders();\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes\n        };\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request\n        );\n\n        return tokenResponse;\n    }\n\n    /**\n     * generate a server request in accepable format\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonOnBehalfOfRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n\n        parameterBuilder.addOboAssertion(request.oboAssertion);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { RefreshTokenClient } from \"./RefreshTokenClient\";\nimport { ClientAuthError, ClientAuthErrorMessage } from \"../error/ClientAuthError\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\nimport { AuthenticationScheme } from \"../utils/Constants\";\nimport { StringUtils } from \"../utils/StringUtils\";\n\nexport class SilentFlowClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\n     * the given token and returns the renewed token\n     * @param request\n     */\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        try {\n            return await this.acquireCachedToken(request);\n        } catch (e) {\n            if (e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n                const refreshTokenClient = new RefreshTokenClient(this.config);\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    /**\n     * Retrieves token from cache or throws an error if it must be refreshed.\n     * @param request\n     */\n    async acquireCachedToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n        const requestScopes = new ScopeSet(request.scopes || []);\n        const environment = request.authority || this.authority.getPreferredCache();\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n        const cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, requestScopes, environment, authScheme);\n\n        if (request.forceRefresh || \n            !StringUtils.isEmptyObj(request.claims) || \n            !cacheRecord.accessToken || \n            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds) ||\n            (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0))) {\n            // Must refresh due to request parameters, or expired or non-existent access_token\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n\n        return await this.generateResultFromCacheRecord(cacheRecord, request);\n    }\n\n    /**\n     * Helper function to build response object from the CacheRecord\n     * @param cacheRecord\n     */\n    private async generateResultFromCacheRecord(cacheRecord: CacheRecord, request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        let idTokenObj: AuthToken | undefined;\n        if (cacheRecord.idToken) {\n            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\n        }\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            cacheRecord,\n            true,\n            request,\n            idTokenObj\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { CommonUsernamePasswordRequest } from \"../request/CommonUsernamePasswordRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { Authority } from \"../authority/Authority\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType } from \"../utils/Constants\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\n\n/**\n * Oauth2.0 Password grant client\n * Note: We are only supporting public clients for password grant and for purely testing purposes\n */\nexport class UsernamePasswordClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\n     * password_grant\n     * @param request\n     */\n    async acquireToken(request: CommonUsernamePasswordRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"in acquireToken call\");\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n\n        return tokenResponse;\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonUsernamePasswordRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes\n        };\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createDefaultTokenRequestHeaders();\n\n        return this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonUsernamePasswordRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n        parameterBuilder.addUsername(request.username);\n        parameterBuilder.addPassword(request.password);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n\n        parameterBuilder.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Tenant Discovery Response which contains the relevant OAuth endpoints and data needed for authentication and authorization.\n */\nexport type OpenIdConfigResponse = {\n    authorization_endpoint: string;\n    token_endpoint: string;\n    end_session_endpoint: string;\n    issuer: string;\n};\n\nexport function isOpenIdConfigResponse(response: object): boolean {\n    return (\n        response.hasOwnProperty(\"authorization_endpoint\") &&\n        response.hasOwnProperty(\"token_endpoint\") && \n        response.hasOwnProperty(\"end_session_endpoint\") &&\n        response.hasOwnProperty(\"issuer\")\n    );\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Protocol modes supported by MSAL.\n */\nexport enum ProtocolMode {\n    AAD = \"AAD\",\n    OIDC = \"OIDC\"\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CloudDiscoveryMetadata } from \"../../authority/CloudDiscoveryMetadata\";\nimport { OpenIdConfigResponse } from \"../../authority/OpenIdConfigResponse\";\nimport { AUTHORITY_METADATA_CONSTANTS } from \"../../utils/Constants\";\nimport { TimeUtils } from \"../../utils/TimeUtils\";\n\nexport class AuthorityMetadataEntity {\n    aliases: Array<string>;\n    preferred_cache: string;\n    preferred_network: string;\n    canonical_authority: string;\n    authorization_endpoint: string;\n    token_endpoint: string;\n    end_session_endpoint: string;\n    issuer: string;\n    aliasesFromNetwork: boolean;\n    endpointsFromNetwork: boolean;\n    expiresAt: number;\n\n    constructor() {\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n    }\n\n    /**\n     * Update the entity with new aliases, preferred_cache and preferred_network values\n     * @param metadata \n     * @param fromNetwork \n     */\n    updateCloudDiscoveryMetadata(metadata: CloudDiscoveryMetadata, fromNetwork: boolean): void {\n        this.aliases = metadata.aliases;\n        this.preferred_cache = metadata.preferred_cache;\n        this.preferred_network = metadata.preferred_network;\n        this.aliasesFromNetwork = fromNetwork;\n    }\n\n    /**\n     * Update the entity with new endpoints\n     * @param metadata \n     * @param fromNetwork \n     */\n    updateEndpointMetadata(metadata: OpenIdConfigResponse, fromNetwork: boolean): void {\n        this.authorization_endpoint = metadata.authorization_endpoint;\n        this.token_endpoint = metadata.token_endpoint;\n        this.end_session_endpoint = metadata.end_session_endpoint;\n        this.issuer = metadata.issuer;\n        this.endpointsFromNetwork = fromNetwork;\n    }\n\n    /**\n     * Save the authority that was used to create this cache entry\n     * @param authority \n     */\n    updateCanonicalAuthority(authority: string): void {\n        this.canonical_authority = authority;\n    }\n\n    /**\n     * Reset the exiresAt value\n     */\n    resetExpiresAt(): void {\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n    }\n\n    /**\n     * Returns whether or not the data needs to be refreshed\n     */\n    isExpired(): boolean {\n        return this.expiresAt <= TimeUtils.nowSeconds();\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAuthorityMetadataEntity(key: string, entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\n            entity.hasOwnProperty(\"aliases\") &&\n            entity.hasOwnProperty(\"preferred_cache\") &&\n            entity.hasOwnProperty(\"preferred_network\") &&\n            entity.hasOwnProperty(\"canonical_authority\") &&\n            entity.hasOwnProperty(\"authorization_endpoint\") &&\n            entity.hasOwnProperty(\"token_endpoint\") &&\n            entity.hasOwnProperty(\"end_session_endpoint\") &&\n            entity.hasOwnProperty(\"issuer\") &&\n            entity.hasOwnProperty(\"aliasesFromNetwork\") &&\n            entity.hasOwnProperty(\"endpointsFromNetwork\") &&\n            entity.hasOwnProperty(\"expiresAt\")\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata\";\n\n/**\n * The OpenID Configuration Endpoint Response type. Used by the authority class to get relevant OAuth endpoints.\n */\nexport type CloudInstanceDiscoveryResponse = {\n    tenant_discovery_endpoint: string;\n    metadata: Array<CloudDiscoveryMetadata>;\n};\n\nexport function isCloudInstanceDiscoveryResponse(response: object): boolean {\n    return (\n        response.hasOwnProperty(\"tenant_discovery_endpoint\") &&\n        response.hasOwnProperty(\"metadata\")\n    );\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\nimport { Constants, ResponseCodes } from \"../utils/Constants\";\n\nexport class RegionDiscovery {\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Options for the IMDS endpoint request\n    protected static IMDS_OPTIONS = {headers: {\"Metadata\": \"true\"}};\n\n    constructor(networkInterface: INetworkModule) {\n        this.networkInterface = networkInterface;\n    }\n\n    /**\n     * Detect the region from the application's environment.\n     * \n     * @returns Promise<string | null>\n     */\n    public async detectRegion(environmentRegion: string | undefined): Promise<string | null> {\n        // Initialize auto detected region with the region from the envrionment \n        let autodetectedRegionName = environmentRegion;\n\n        // Call the local IMDS endpoint for applications running in azure vms\n        if (!autodetectedRegionName) {\n            try {\n                const response = await this.getRegionFromIMDS(Constants.IMDS_VERSION);\n                if (response.status === ResponseCodes.httpSuccess) {\n                    autodetectedRegionName = response.body;\n                } \n                \n                if (response.status === ResponseCodes.httpBadRequest) {\n                    const latestIMDSVersion = await this.getCurrentVersion();\n                    if (!latestIMDSVersion) {\n                        return null;\n                    }\n\n                    const response = await this.getRegionFromIMDS(latestIMDSVersion);\n                    if (response.status === ResponseCodes.httpSuccess) {\n                        autodetectedRegionName = response.body;\n                    }\n                } \n            } catch(e) {\n                return null;\n            } \n        }\n\n        return autodetectedRegionName || null;\n    }\n\n    /**\n     * Make the call to the IMDS endpoint\n     * \n     * @param imdsEndpointUrl\n     * @returns Promise<NetworkResponse<string>>\n     */\n    private async getRegionFromIMDS(version: string): Promise<NetworkResponse<string>> {\n        return this.networkInterface.sendGetRequestAsync<string>(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT);\n    }\n\n    /**\n     * Get the most recent version of the IMDS endpoint available\n     *  \n     * @returns Promise<string | null>\n     */\n    private async getCurrentVersion(): Promise<string | null> {\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(`${Constants.IMDS_ENDPOINT}?format=json`, RegionDiscovery.IMDS_OPTIONS);\n\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n                return response.body[\"newest-versions\"][0];\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorityType } from \"./AuthorityType\";\nimport { isOpenIdConfigResponse, OpenIdConfigResponse } from \"./OpenIdConfigResponse\";\nimport { UrlString } from \"../url/UrlString\";\nimport { IUri } from \"../url/IUri\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { AuthorityMetadataSource, Constants } from \"../utils/Constants\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ProtocolMode } from \"./ProtocolMode\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityMetadataEntity } from \"../cache/entities/AuthorityMetadataEntity\";\nimport { AuthorityOptions } from \"./AuthorityOptions\";\nimport { CloudInstanceDiscoveryResponse, isCloudInstanceDiscoveryResponse } from \"./CloudInstanceDiscoveryResponse\";\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata\";\nimport { RegionDiscovery } from \"./RegionDiscovery\";\n\n/**\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\n * endpoint. It will store the pertinent config data in this object for use during token calls.\n */\nexport class Authority {\n\n    // Canonical authority url string\n    private _canonicalAuthority: UrlString;\n    // Canonicaly authority url components\n    private _canonicalAuthorityUrlComponents: IUri | null;\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Cache Manager to cache network responses\n    protected cacheManager: ICacheManager;\n    // Protocol mode to construct endpoints\n    private authorityOptions: AuthorityOptions;\n    // Authority metadata\n    private metadata: AuthorityMetadataEntity;\n    // Region discovery service\n    private regionDiscovery: RegionDiscovery;\n\n    constructor(authority: string, networkInterface: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions) {\n        this.canonicalAuthority = authority;\n        this._canonicalAuthority.validateAsUri();\n        this.networkInterface = networkInterface;\n        this.cacheManager = cacheManager;\n        this.authorityOptions = authorityOptions;\n        this.regionDiscovery = new RegionDiscovery(networkInterface);\n    }\n\n    // See above for AuthorityType\n    public get authorityType(): AuthorityType {\n        const pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n\n        if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\n            return AuthorityType.Adfs;\n        }\n\n        return AuthorityType.Default;\n    }\n\n    /**\n     * ProtocolMode enum representing the way endpoints are constructed.\n     */\n    public get protocolMode(): ProtocolMode {\n        return this.authorityOptions.protocolMode;\n    }\n\n    /**\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\n     */\n    public get options(): AuthorityOptions {\n        return this.authorityOptions;\n    }\n\n    /**\n     * A URL that is the authority set by the developer\n     */\n    public get canonicalAuthority(): string {\n        return this._canonicalAuthority.urlString;\n    }\n\n    /**\n     * Sets canonical authority.\n     */\n    public set canonicalAuthority(url: string) {\n        this._canonicalAuthority = new UrlString(url);\n        this._canonicalAuthority.validateAsUri();\n        this._canonicalAuthorityUrlComponents = null;\n    }\n\n    /**\n     * Get authority components.\n     */\n    public get canonicalAuthorityUrlComponents(): IUri {\n        if (!this._canonicalAuthorityUrlComponents) {\n            this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n        }\n\n        return this._canonicalAuthorityUrlComponents;\n    }\n\n    /**\n     * Get hostname and port i.e. login.microsoftonline.com\n     */\n    public get hostnameAndPort(): string {\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    }\n\n    /**\n     * Get tenant for authority.\n     */\n    public get tenant(): string {\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    }\n\n    /**\n     * OAuth /authorize endpoint for requests\n     */\n    public get authorizationEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.authorization_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth /token endpoint for requests\n     */\n    public get tokenEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.token_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    public get deviceCodeEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth logout endpoint for requests\n     */\n    public get endSessionEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.end_session_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth issuer for requests\n     */\n    public get selfSignedJwtAudience(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.issuer);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Replaces tenant in url path with current tenant. Defaults to common.\n     * @param urlString\n     */\n    private replaceTenant(urlString: string): string {\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n    }\n\n    /**\n     * Replaces path such as tenant or policy with the current tenant or policy.\n     * @param urlString \n     */\n    private replacePath(urlString: string): string {\n        let endpoint = urlString;\n        const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n        const cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n\n        currentAuthorityParts.forEach((currentPart, index) => {\n            const cachedPart = cachedAuthorityParts[index];\n            if (currentPart !== cachedPart) {\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\n            }\n        });\n\n        return endpoint;\n    }\n\n    /**\n     * The default open id configuration endpoint for any canonical authority.\n     */\n    protected get defaultOpenIdConfigurationEndpoint(): string {\n        if (this.authorityType === AuthorityType.Adfs || this.protocolMode === ProtocolMode.OIDC) {\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\n        }\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n    }\n\n    /**\n     * Boolean that returns whethr or not tenant discovery has been completed.\n     */\n    discoveryComplete(): boolean {\n        return !!this.metadata;\n    }\n\n    /**\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\n     * and the /authorize, /token and logout endpoints.\n     */\n    public async resolveEndpointsAsync(): Promise<void> {\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n        if (!metadataEntity) {\n            metadataEntity = new AuthorityMetadataEntity();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n\n        const cloudDiscoverySource = await this.updateCloudDiscoveryMetadata(metadataEntity);\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n        const endpointSource = await this.updateEndpointMetadata(metadataEntity);\n\n        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n            // Reset the expiration time unless both values came from a successful cache lookup\n            metadataEntity.resetExpiresAt();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        } \n\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n        this.metadata = metadataEntity;\n    }\n\n    /**\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\n     * @param metadataEntity \n     */\n    private async updateEndpointMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\n        let metadata = this.getEndpointMetadataFromConfig();\n        if (metadata) {\n            metadataEntity.updateEndpointMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        }\n\n        metadata = await this.getEndpointMetadataFromNetwork();\n        if (metadata) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                const autodetectedRegionName = await this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion);\n\n                const azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG \n                    ? autodetectedRegionName \n                    : this.authorityOptions.azureRegionConfiguration.azureRegion;\n\n                if (azureRegion) {\n                    metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);\n                }\n            }\n\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        } else {\n            throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\n        }\n    }\n\n    /**\n     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\n     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\n     * @param metadataEntity\n     */\n    private isAuthoritySameType(metadataEntity: AuthorityMetadataEntity): boolean {\n        const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n        \n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n    }\n\n    /**\n     * Parse authorityMetadata config option\n     */\n    private getEndpointMetadataFromConfig(): OpenIdConfigResponse | null {\n        if (this.authorityOptions.authorityMetadata) {\n            try {\n                return JSON.parse(this.authorityOptions.authorityMetadata) as OpenIdConfigResponse;\n            } catch (e) {\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\n     */\n    private async getEndpointMetadataFromNetwork(): Promise<OpenIdConfigResponse | null> {\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<OpenIdConfigResponse>(this.defaultOpenIdConfigurationEndpoint);\n            return isOpenIdConfigResponse(response.body) ? response.body : null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\n     * @param cachedMetadata \n     * @param newMetadata \n     */\n    private async updateCloudDiscoveryMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\n        let metadata = this.getCloudDiscoveryMetadataFromConfig();\n        if (metadata) {\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        }\n\n        metadata = await this.getCloudDiscoveryMetadataFromNetwork();\n        if (metadata) {\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        } else {\n            // Metadata could not be obtained from config, cache or network\n            throw ClientConfigurationError.createUntrustedAuthorityError();\n        }\n    }\n\n    /**\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\n     */\n    private getCloudDiscoveryMetadataFromConfig(): CloudDiscoveryMetadata | null {\n        // Check if network response was provided in config\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\n            try {\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata) as CloudInstanceDiscoveryResponse;\n                const metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n                if (metadata) {\n                    return metadata;\n                }\n            } catch (e) {\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n            }\n        }\n\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n        if (this.isInKnownAuthorities()) {\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n\n        return null;\n    }\n\n    /**\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\n     * @param networkInterface \n     */\n    private async getCloudDiscoveryMetadataFromNetwork(): Promise<CloudDiscoveryMetadata | null> {\n        const instanceDiscoveryEndpoint = `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n        let match = null;\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<CloudInstanceDiscoveryResponse>(instanceDiscoveryEndpoint);\n            const metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\n            if (metadata.length === 0) {\n                // If no metadata is returned, authority is untrusted\n                return null;\n            }\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n        } catch(e) {\n            return null;\n        }\n\n        if (!match) {\n            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded \n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return match;\n    } \n\n    /**\n     * Helper function to determine if this host is included in the knownAuthorities config option\n     */\n    private isInKnownAuthorities(): boolean {\n        const matches = this.authorityOptions.knownAuthorities.filter((authority) => {\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;\n        });\n\n        return matches.length > 0;\n    }\n\n    /**\n     * Creates cloud discovery metadata object from a given host\n     * @param host \n     */\n    static createCloudDiscoveryMetadataFromHost(host: string): CloudDiscoveryMetadata {\n        return {\n            preferred_network: host,\n            preferred_cache: host,\n            aliases: [host]\n        };\n    }\n\n    /**\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\n     * @param response \n     * @param authority \n     */\n    static getCloudDiscoveryMetadataFromNetworkResponse(response: CloudDiscoveryMetadata[], authority: string): CloudDiscoveryMetadata | null {\n        for (let i = 0; i < response.length; i++) {\n            const metadata = response[i];\n            if (metadata.aliases.indexOf(authority) > -1) {\n                return metadata;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * helper function to generate environment from authority object\n     */\n    getPreferredCache(): string {\n        if(this.discoveryComplete()) {\n            return this.metadata.preferred_cache;\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Returns whether or not the provided host is an alias of this authority instance\n     * @param host \n     */\n    isAlias(host: string): boolean {\n        return this.metadata.aliases.indexOf(host) > -1;\n    }\n\n    /**\n     * Checks whether the provided host is that of a public cloud authority\n     * \n     * @param authority string\n     * @returns bool\n     */\n    static isPublicCloudAuthority(host: string): boolean {\n        return Constants.KNOWN_PUBLIC_CLOUDS.includes(host);\n    }\n\n    /**\n     * Rebuild the authority string with the region\n     * \n     * @param host string\n     * @param region string \n     */\n    static buildRegionalAuthorityString(host: string, region: string, queryString?: string): string {\n        // Create and validate a Url string object with the initial authority string\n        const authorityUrlInstance = new UrlString(host);\n        authorityUrlInstance.validateAsUri();\n\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n\n        let hostNameAndPort= `${region}.${authorityUrlParts.HostNameAndPort}`;\n\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n            hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n        }\n\n        // Include the query string portion of the url\n        const url = UrlString.constructAuthorityUriFromObject({\n            ...authorityUrlInstance.getUrlComponents(),\n            HostNameAndPort: hostNameAndPort\n        }).urlString;\n\n        // Add the query string if a query string was provided\n        if (queryString) return `${url}?${queryString}`;\n\n        return url;\n    }\n\n    /**\n     * Replace the endpoints in the metadata object with their regional equivalents.\n     * \n     * @param metadata OpenIdConfigResponse\n     * @param azureRegion string\n     */\n    static replaceWithRegionalInformation(metadata: OpenIdConfigResponse, azureRegion: string): OpenIdConfigResponse {\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\n        metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n        \n        return metadata;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Authority } from \"./Authority\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityOptions } from \"./AuthorityOptions\";\n\nexport class AuthorityFactory {\n\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Also performs endpoint discovery.\n     *\n     * @param authorityUri\n     * @param networkClient\n     * @param protocolMode\n     */\n    static async createDiscoveredInstance(authorityUri: string, networkClient: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions): Promise<Authority> {\n        // Initialize authority and perform discovery endpoint check.\n        const acquireTokenAuthority: Authority = AuthorityFactory.createInstance(authorityUri, networkClient, cacheManager, authorityOptions);\n\n        try {\n            await acquireTokenAuthority.resolveEndpointsAsync();\n            return acquireTokenAuthority;\n        } catch (e) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e);\n        }\n    }\n\n    /**\n     * Create an authority object of the correct type based on the url\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\n     *\n     * Does not perform endpoint discovery.\n     *\n     * @param authorityUrl\n     * @param networkInterface\n     * @param protocolMode\n     */\n    static createInstance(authorityUrl: string, networkInterface: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions): Authority {\n        // Throw error if authority url is empty\n        if (StringUtils.isEmpty(authorityUrl)) {\n            throw ClientConfigurationError.createUrlEmptyError();\n        }\n\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { SERVER_TELEM_CONSTANTS } from \"../../utils/Constants\";\n\nexport class ServerTelemetryEntity {\n    failedRequests: Array<string|number>;\n    errors: string[];\n    cacheHits: number;\n\n    constructor() {\n        this.failedRequests = [];\n        this.errors = [];\n        this.cacheHits = 0;\n    }\n\n    /**\n     * validates if a given cache entry is \"Telemetry\", parses <key,value>\n     * @param key\n     * @param entity\n     */\n    static isServerTelemetryEntity(key: string, entity?: object): boolean {\n\n        const validateKey: boolean = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n        let validateEntity: boolean = true;\n\n        if (entity) {\n            validateEntity =\n                entity.hasOwnProperty(\"failedRequests\") &&\n                entity.hasOwnProperty(\"errors\") &&\n                entity.hasOwnProperty(\"cacheHits\");\n        }\n\n        return validateKey && validateEntity;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ThrottlingConstants } from \"../../utils/Constants\";\n\nexport class ThrottlingEntity {\n    // Unix-time value representing the expiration of the throttle\n    throttleTime: number;\n    // Information provided by the server\n    error?: string;\n    errorCodes?: Array<string>;\n    errorMessage?: string;\n    subError?: string;\n\n    /**\n     * validates if a given cache entry is \"Throttling\", parses <key,value>\n     * @param key\n     * @param entity\n     */\n    static isThrottlingEntity(key: string, entity?: object): boolean {\n        \n        let validateKey: boolean = false;\n        if (key) {\n            validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\n        }\n        \n        let validateEntity: boolean = true;\n        if (entity) {\n            validateEntity = entity.hasOwnProperty(\"throttleTime\");\n        }\n\n        return validateKey && validateEntity;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { SERVER_TELEM_CONSTANTS, Separators, Constants } from \"../../utils/Constants\";\nimport { CacheManager } from \"../../cache/CacheManager\";\nimport { AuthError } from \"../../error/AuthError\";\nimport { ServerTelemetryRequest } from \"./ServerTelemetryRequest\";\nimport { ServerTelemetryEntity } from \"../../cache/entities/ServerTelemetryEntity\";\nimport { StringUtils } from \"../../utils/StringUtils\";\n\nexport class ServerTelemetryManager {\n    private cacheManager: CacheManager;\n    private apiId: number;\n    private correlationId: string;\n    private forceRefresh: boolean;\n    private telemetryCacheKey: string;\n    private wrapperSKU: String;\n    private wrapperVer: String;\n\n    constructor(telemetryRequest: ServerTelemetryRequest, cacheManager: CacheManager) {\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.forceRefresh = telemetryRequest.forceRefresh || false;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n\n        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n    }\n\n    /**\n     * API to add MSER Telemetry to request\n     */\n    generateCurrentRequestHeaderValue(): string {\n        const forceRefreshInt = this.forceRefresh ? 1 : 0;\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${forceRefreshInt}`;\n        const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, request, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to add MSER Telemetry for the last failed request\n     */\n    generateLastRequestHeaderValue(): string {\n        const lastRequests = this.getLastRequests();\n\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests.slice(0, 2*maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n\n        // Indicate whether this header contains all data or partial data\n        const overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to cache token failures for MSER data capture\n     * @param error\n     */\n    cacheFailedRequest(error: AuthError): void {\n        const lastRequests = this.getLastRequests();\n        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n        \n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n\n        if (!StringUtils.isEmpty(error.subError)) {\n            lastRequests.errors.push(error.subError);\n        } else if (!StringUtils.isEmpty(error.errorCode)) {\n            lastRequests.errors.push(error.errorCode);\n        } else if (!!error && error.toString()) {\n            lastRequests.errors.push(error.toString());\n        } else {\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n\n        return;\n    }\n\n    /**\n     * Update server telemetry cache entry by incrementing cache hit counter\n     */\n    incrementCacheHits(): number {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return lastRequests.cacheHits;\n    }\n\n    /**\n     * Get the server telemetry entity from cache or initialize a new one\n     */\n    getLastRequests(): ServerTelemetryEntity {\n        const initialValue: ServerTelemetryEntity = new ServerTelemetryEntity();\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey) as ServerTelemetryEntity;\n\n        return lastRequests || initialValue;\n    }\n\n    /**\n     * Remove server telemetry cache entry\n     */\n    clearTelemetryCache(): void {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        } else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity = new ServerTelemetryEntity();\n            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed*2); // failedRequests contains 2 items for each error\n            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\n\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n        }\n    }\n\n    /**\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\n     * @param serverTelemetryEntity\n     */\n    static maxErrorsToSend(serverTelemetryEntity: ServerTelemetryEntity): number {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for (i = 0; i < errorCount; i++) {\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId = serverTelemetryEntity.failedRequests[2*i] || Constants.EMPTY_STRING;\n            const correlationId = serverTelemetryEntity.failedRequests[2*i + 1] || Constants.EMPTY_STRING;\n            const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            } else {\n                break;\n            }\n        }\n\n        return maxErrors;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    INetworkModule,\n    NetworkRequestOptions,\n    NetworkResponse,\n} from \"@azure/msal-common\";\nimport { HttpMethod } from \"../utils/Constants\";\nimport axios, { AxiosRequestConfig } from \"axios\";\n\n/**\n * This class implements the API for network requests.\n */\nexport class HttpClient implements INetworkModule {\n\n    /**\n     * Http Get request\n     * @param url\n     * @param options\n     */\n    async sendGetRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>> {\n        const request: AxiosRequestConfig = {\n            method: HttpMethod.GET,\n            url: url,\n            headers: options && options.headers,\n            validateStatus: () => true\n        };\n\n        const response = await axios(request);\n        return {\n            headers: response.headers,\n            body: response.data as T,\n            status: response.status,\n        };\n    }\n\n    /**\n     * Http Post request\n     * @param url\n     * @param options\n     */\n    async sendPostRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions,\n        cancellationToken?: number \n    ): Promise<NetworkResponse<T>> {\n        const request: AxiosRequestConfig = {\n            method: HttpMethod.POST,\n            url: url,\n            data: (options && options.body) || \"\",\n            timeout: cancellationToken,\n            headers: options && options.headers,\n            validateStatus: () => true\n        };\n\n        const response = await axios(request);\n        return {\n            headers: response.headers,\n            body: response.data as T,\n            status: response.status,\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"@azure/msal-common\";\nimport { HttpClient } from \"../network/HttpClient\";\n\nexport class NetworkUtils {\n    /**\n     * Returns best compatible network client object.\n     */\n    static getNetworkClient(): INetworkModule {\n        return new HttpClient();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    LoggerOptions,\n    INetworkModule,\n    LogLevel,\n    ProtocolMode,\n    ICachePlugin, Constants\n} from \"@azure/msal-common\";\nimport { NetworkUtils } from \"../utils/NetworkUtils\";\n\n/**\n * - clientId               - Client id of the application.\n * - authority              - Url of the authority. If no value is set, defaults to https://login.microsoftonline.com/common.\n * - knownAuthorities       - Needed for Azure B2C and ADFS. All authorities that will be used in the client application. Only the host of the authority should be passed in.\n * - clientSecret           - Secret string that the application uses when requesting a token. Only used in confidential client applications. Can be created in the Azure app registration portal.\n * - clientAssertion        - Assertion string that the application uses when requesting a token. Only used in confidential client applications. Assertion should be of type urn:ietf:params:oauth:client-assertion-type:jwt-bearer.\n * - clientCertificate      - Certificate that the application uses when requesting a token. Only used in confidential client applications. Requires hex encoded X.509 SHA-1 thumbprint of the certificiate, and the PEM encoded private key (string should contain -----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY----- )\n * - protocolMode           - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n * @public\n */\nexport type NodeAuthOptions = {\n    clientId: string;\n    authority?: string;\n    clientSecret?: string;\n    clientAssertion?:string;\n    clientCertificate?: {\n        thumbprint: string,\n        privateKey: string,\n        x5c?: string\n    };\n    knownAuthorities?: Array<string>;\n    cloudDiscoveryMetadata?: string;\n    authorityMetadata?: string,\n    clientCapabilities?: [];\n    protocolMode?: ProtocolMode;\n};\n\n/**\n * Use this to configure the below cache configuration options:\n *\n * - cachePlugin   - Plugin for reading and writing token cache to disk.\n * @public\n */\nexport type CacheOptions = {\n    cachePlugin?: ICachePlugin;\n};\n\n/**\n * Type for configuring logger and http client options\n *\n * - logger                       - Used to initialize the Logger object; TODO: Expand on logger details or link to the documentation on logger\n * - networkClient                - Http client used for all http get and post calls. Defaults to using MSAL's default http client.\n * @public\n */\nexport type NodeSystemOptions = {\n    loggerOptions?: LoggerOptions;\n    networkClient?: INetworkModule;\n};\n\n/**\n * Use the configuration object to configure MSAL and initialize the client application object\n *\n * - auth: this is where you configure auth elements like clientID, authority used for authenticating against the Microsoft Identity Platform\n * - cache: this is where you configure cache location\n * - system: this is where you can configure the network client, logger\n * @public\n */\nexport type Configuration = {\n    auth: NodeAuthOptions;\n    cache?: CacheOptions;\n    system?: NodeSystemOptions;\n};\n\nconst DEFAULT_AUTH_OPTIONS: NodeAuthOptions = {\n    clientId: \"\",\n    authority: Constants.DEFAULT_AUTHORITY,\n    clientSecret: \"\",\n    clientAssertion: \"\",\n    clientCertificate: {\n        thumbprint: \"\",\n        privateKey: \"\",\n        x5c: \"\"\n    },\n    knownAuthorities: [],\n    cloudDiscoveryMetadata: \"\",\n    authorityMetadata: \"\",\n    clientCapabilities: [],\n    protocolMode: ProtocolMode.AAD\n};\n\nconst DEFAULT_CACHE_OPTIONS: CacheOptions = {};\n\nconst DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\n    loggerCallback: (): void => {\n        // allow users to not set logger call back\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n};\n\nconst DEFAULT_SYSTEM_OPTIONS: NodeSystemOptions = {\n    loggerOptions: DEFAULT_LOGGER_OPTIONS,\n    networkClient: NetworkUtils.getNetworkClient(),\n};\n\n/**\n * Sets the default options when not explicitly configured from app developer\n *\n * @param auth - Authentication options\n * @param cache - Cache options\n * @param system - System options\n *\n * @returns Configuration\n * @public\n */\nexport function buildAppConfiguration({\n    auth,\n    cache,\n    system,\n}: Configuration): Configuration {\n    return {\n        auth: { ...DEFAULT_AUTH_OPTIONS, ...auth },\n        cache: { ...DEFAULT_CACHE_OPTIONS, ...cache },\n        system: { ...DEFAULT_SYSTEM_OPTIONS, ...system },\n    };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport class GuidGenerator {\n    /**\n     *\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or pseudo-random numbers.\n     * uuidv4 generates guids from cryprtographically-string random\n     */\n    static generateGuid(): string {\n        return uuidv4();\n    }\n\n    /**\n     * verifies if a string is  GUID\n     * @param guid\n     */\n    static isGuid(guid: string): boolean {\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        return regexGuid.test(guid);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport class EncodingUtils {\n    /**\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\n     * 'base64': Base64 encoding.\n     *\n     * @param str text\n     */\n    static base64Encode(str: string, encoding?: BufferEncoding): string {\n        return Buffer.from(str, encoding).toString(\"base64\");\n    }\n\n    /**\n     * encode a URL\n     * @param str\n     */\n    static base64EncodeUrl(str: string, encoding?: BufferEncoding): string {\n        return EncodingUtils.base64Encode(str, encoding)\n            .replace(/=/g, \"\")\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\");\n    }\n\n    /**\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\n     * 'base64': Base64 encoding.\n     *\n     * @param base64Str Base64 encoded text\n     */\n    static base64Decode(base64Str: string): string {\n        return Buffer.from(base64Str, \"base64\").toString(\"utf8\");\n    }\n\n    /**\n     * @param base64Str Base64 encoded Url\n     */\n    static base64DecodeUrl(base64Str: string): string {\n        let str = base64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        while (str.length % 4) {\n            str += \"=\";\n        }\n        return EncodingUtils.base64Decode(str);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { PkceCodes } from \"@azure/msal-common\";\nimport { CharSet, Hash, RANDOM_OCTET_SIZE } from \"../utils/Constants\";\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\nimport crypto from \"crypto\";\n\n/**\n * https://tools.ietf.org/html/rfc7636#page-8\n */\nexport class PkceGenerator {\n    /**\n     * generates the codeVerfier and the challenge from the codeVerfier\n     * reference: https://tools.ietf.org/html/rfc7636#section-4.1 and https://tools.ietf.org/html/rfc7636#section-4.2\n     */\n    async generatePkceCodes(): Promise<PkceCodes> {\n        const verifier = this.generateCodeVerifier();\n        const challenge = this.generateCodeChallengeFromVerifier(verifier);\n        return { verifier, challenge };\n    }\n\n    /**\n     * generates the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.1\n     */\n    private generateCodeVerifier(): string {\n        const buffer: Uint8Array = crypto.randomBytes(RANDOM_OCTET_SIZE);\n        const verifier: string = this.bufferToCVString(buffer);\n        return EncodingUtils.base64EncodeUrl(verifier);\n    }\n\n    /**\n     * generate the challenge from the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.2\n     * @param codeVerifier\n     */\n    private generateCodeChallengeFromVerifier(codeVerifier: string): string {\n        return EncodingUtils.base64EncodeUrl(\n            this.sha256(codeVerifier).toString(\"base64\"), \n            \"base64\"\n        );\n    }\n\n    /**\n     * generate 'SHA256' hash\n     * @param buffer\n     */\n    private sha256(buffer: string): Buffer {\n        return crypto\n            .createHash(Hash.SHA256)\n            .update(buffer)\n            .digest();\n    }\n\n    /**\n     * Accepted characters; reference: https://tools.ietf.org/html/rfc7636#section-4.1\n     * @param buffer\n     */\n    private bufferToCVString(buffer: Uint8Array): string {\n        const charArr = [];\n        for (let i = 0; i < buffer.byteLength; i += 1) {\n            const index = buffer[i] % CharSet.CV_CHARSET.length;\n            charArr.push(CharSet.CV_CHARSET[index]);\n        }\n        return charArr.join(\"\");\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, PkceCodes } from \"@azure/msal-common\";\nimport { GuidGenerator } from \"./GuidGenerator\";\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\nimport { PkceGenerator } from \"./PkceGenerator\";\n\n/**\n * This class implements MSAL node's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n * @public\n */\nexport class CryptoProvider implements ICrypto {\n    private pkceGenerator: PkceGenerator;\n\n    constructor() {\n        // Browser crypto needs to be validated first before any other classes can be set.\n        this.pkceGenerator = new PkceGenerator();\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return GuidGenerator.generateGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input - string to be encoded\n     */\n    base64Encode(input: string): string {\n        return EncodingUtils.base64Encode(input);\n    }\n\n    /**\n     * Decodes input string from base64.\n     * @param input - string to be decoded\n     */\n    base64Decode(input: string): string {\n        return EncodingUtils.base64Decode(input);\n    }\n\n    /**\n     * Generates PKCE codes used in Authorization Code Flow.\n     */\n    generatePkceCodes(): Promise<PkceCodes> {\n        return this.pkceGenerator.generatePkceCodes();\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint - not yet implemented for node\n     */\n    getPublicKeyThumbprint(): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid - currently not implemented for node\n     */\n    signJwt(): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils, AccountCache, IdTokenCache, AccessTokenCache, RefreshTokenCache, AppMetadataCache, AccountEntity, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, CacheManager } from \"@azure/msal-common\";\nimport { JsonCache, InMemoryCache, SerializedAccountEntity, SerializedIdTokenEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedAppMetadataEntity } from \"./SerializerTypes\";\n\n/**\n * This class deserializes cache entities read from the file into in memory object types defined internally\n */\nexport class Deserializer {\n    /**\n     * Parse the JSON blob in memory and deserialize the content\n     * @param cachedJson\n     */\n    static deserializeJSONBlob(jsonFile: string): JsonCache {\n        const deserializedCache = StringUtils.isEmpty(jsonFile)\n            ? {}\n            : JSON.parse(jsonFile);\n        return deserializedCache;\n    }\n\n    /**\n     * Deserializes accounts to AccountEntity objects\n     * @param accounts\n     */\n    static deserializeAccounts(accounts: Record<string, SerializedAccountEntity>): AccountCache {\n        const accountObjects: AccountCache = {};\n        if (accounts) {\n            Object.keys(accounts).map(function (key) {\n                const serializedAcc = accounts[key];\n                const mappedAcc = {\n                    homeAccountId: serializedAcc.home_account_id,\n                    environment: serializedAcc.environment,\n                    realm: serializedAcc.realm,\n                    localAccountId: serializedAcc.local_account_id,\n                    username: serializedAcc.username,\n                    authorityType: serializedAcc.authority_type,\n                    name: serializedAcc.name,\n                    clientInfo: serializedAcc.client_info,\n                    lastModificationTime: serializedAcc.last_modification_time,\n                    lastModificationApp: serializedAcc.last_modification_app,\n                };\n                const account: AccountEntity = new AccountEntity();\n                CacheManager.toObject(account, mappedAcc);\n                accountObjects[key] = account;\n            });\n        }\n\n        return accountObjects;\n    }\n\n    /**\n     * Deserializes id tokens to IdTokenEntity objects\n     * @param idTokens\n     */\n    static deserializeIdTokens(idTokens: Record<string, SerializedIdTokenEntity>): IdTokenCache {\n        const idObjects: IdTokenCache = {};\n        if (idTokens) {\n            Object.keys(idTokens).map(function (key) {\n                const serializedIdT = idTokens[key];\n                const mappedIdT = {\n                    homeAccountId: serializedIdT.home_account_id,\n                    environment: serializedIdT.environment,\n                    credentialType: serializedIdT.credential_type,\n                    clientId: serializedIdT.client_id,\n                    secret: serializedIdT.secret,\n                    realm: serializedIdT.realm,\n                };\n                const idToken: IdTokenEntity = new IdTokenEntity();\n                CacheManager.toObject(idToken, mappedIdT);\n                idObjects[key] = idToken;\n            });\n        }\n        return idObjects;\n    }\n\n    /**\n     * Deserializes access tokens to AccessTokenEntity objects\n     * @param accessTokens\n     */\n    static deserializeAccessTokens(accessTokens: Record<string, SerializedAccessTokenEntity>): AccessTokenCache {\n        const atObjects: AccessTokenCache = {};\n        if (accessTokens) {\n            Object.keys(accessTokens).map(function (key) {\n                const serializedAT = accessTokens[key];\n                const mappedAT = {\n                    homeAccountId: serializedAT.home_account_id,\n                    environment: serializedAT.environment,\n                    credentialType: serializedAT.credential_type,\n                    clientId: serializedAT.client_id,\n                    secret: serializedAT.secret,\n                    realm: serializedAT.realm,\n                    target: serializedAT.target,\n                    cachedAt: serializedAT.cached_at,\n                    expiresOn: serializedAT.expires_on,\n                    extendedExpiresOn: serializedAT.extended_expires_on,\n                    refreshOn: serializedAT.refresh_on,\n                    keyId: serializedAT.key_id,\n                    tokenType: serializedAT.token_type,\n                };\n                const accessToken: AccessTokenEntity = new AccessTokenEntity();\n                CacheManager.toObject(accessToken, mappedAT);\n                atObjects[key] = accessToken;\n            });\n        }\n\n        return atObjects;\n    }\n\n    /**\n     * Deserializes refresh tokens to RefreshTokenEntity objects\n     * @param refreshTokens\n     */\n    static deserializeRefreshTokens(refreshTokens: Record<string, SerializedRefreshTokenEntity>): RefreshTokenCache {\n        const rtObjects: RefreshTokenCache = {};\n        if (refreshTokens) {\n            Object.keys(refreshTokens).map(function (key) {\n                const serializedRT = refreshTokens[key];\n                const mappedRT = {\n                    homeAccountId: serializedRT.home_account_id,\n                    environment: serializedRT.environment,\n                    credentialType: serializedRT.credential_type,\n                    clientId: serializedRT.client_id,\n                    secret: serializedRT.secret,\n                    familyId: serializedRT.family_id,\n                    target: serializedRT.target,\n                    realm: serializedRT.realm,\n                };\n                const refreshToken: RefreshTokenEntity = new RefreshTokenEntity();\n                CacheManager.toObject(refreshToken, mappedRT);\n                rtObjects[key] = refreshToken;\n            });\n        }\n\n        return rtObjects;\n    }\n\n    /**\n     * Deserializes appMetadata to AppMetaData objects\n     * @param appMetadata\n     */\n    static deserializeAppMetadata(appMetadata: Record<string, SerializedAppMetadataEntity>): AppMetadataCache {\n        const appMetadataObjects: AppMetadataCache = {};\n        if (appMetadata) {\n            Object.keys(appMetadata).map(function (key) {\n                const serializedAmdt = appMetadata[key];\n                const mappedAmd = {\n                    clientId: serializedAmdt.client_id,\n                    environment: serializedAmdt.environment,\n                    familyId: serializedAmdt.family_id,\n                };\n                const amd: AppMetadataEntity = new AppMetadataEntity();\n                CacheManager.toObject(amd, mappedAmd);\n                appMetadataObjects[key] = amd;\n            });\n        }\n\n        return appMetadataObjects;\n    }\n\n    /**\n     * Deserialize an inMemory Cache\n     * @param jsonCache\n     */\n    static deserializeAllCache(jsonCache: JsonCache): InMemoryCache {\n        return {\n            accounts: jsonCache.Account\n                ? this.deserializeAccounts(jsonCache.Account)\n                : {},\n            idTokens: jsonCache.IdToken\n                ? this.deserializeIdTokens(jsonCache.IdToken)\n                : {},\n            accessTokens: jsonCache.AccessToken\n                ? this.deserializeAccessTokens(jsonCache.AccessToken)\n                : {},\n            refreshTokens: jsonCache.RefreshToken\n                ? this.deserializeRefreshTokens(jsonCache.RefreshToken)\n                : {},\n            appMetadata: jsonCache.AppMetadata\n                ? this.deserializeAppMetadata(jsonCache.AppMetadata)\n                : {},\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountCache, IdTokenCache, AccessTokenCache, RefreshTokenCache, AppMetadataCache } from \"@azure/msal-common\";\nimport { InMemoryCache, JsonCache, SerializedAccountEntity, SerializedIdTokenEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedAppMetadataEntity } from \"./SerializerTypes\";\n\nexport class Serializer {\n    /**\n     * serialize the JSON blob\n     * @param data\n     */\n    static serializeJSONBlob(data: JsonCache): string {\n        return JSON.stringify(data);\n    }\n\n    /**\n     * Serialize Accounts\n     * @param accCache\n     */\n    static serializeAccounts(accCache: AccountCache): Record<string, SerializedAccountEntity> {\n        const accounts: Record<string, SerializedAccountEntity> = {};\n        Object.keys(accCache).map(function (key) {\n            const accountEntity = accCache[key];\n            accounts[key] = {\n                home_account_id: accountEntity.homeAccountId,\n                environment: accountEntity.environment,\n                realm: accountEntity.realm,\n                local_account_id: accountEntity.localAccountId,\n                username: accountEntity.username,\n                authority_type: accountEntity.authorityType,\n                name: accountEntity.name,\n                client_info: accountEntity.clientInfo,\n                last_modification_time: accountEntity.lastModificationTime,\n                last_modification_app: accountEntity.lastModificationApp,\n            };\n        });\n\n        return accounts;\n    }\n\n    /**\n     * Serialize IdTokens\n     * @param idTCache\n     */\n    static serializeIdTokens(idTCache: IdTokenCache): Record<string, SerializedIdTokenEntity> {\n        const idTokens: Record<string, SerializedIdTokenEntity> = {};\n        Object.keys(idTCache).map(function (key) {\n            const idTEntity = idTCache[key];\n            idTokens[key] = {\n                home_account_id: idTEntity.homeAccountId,\n                environment: idTEntity.environment,\n                credential_type: idTEntity.credentialType,\n                client_id: idTEntity.clientId,\n                secret: idTEntity.secret,\n                realm: idTEntity.realm,\n            };\n        });\n\n        return idTokens;\n    }\n\n    /**\n     * Serializes AccessTokens\n     * @param atCache\n     */\n    static serializeAccessTokens(atCache: AccessTokenCache): Record<string, SerializedAccessTokenEntity> {\n        const accessTokens: Record<string, SerializedAccessTokenEntity> = {};\n        Object.keys(atCache).map(function (key) {\n            const atEntity = atCache[key];\n            accessTokens[key] = {\n                home_account_id: atEntity.homeAccountId,\n                environment: atEntity.environment,\n                credential_type: atEntity.credentialType,\n                client_id: atEntity.clientId,\n                secret: atEntity.secret,\n                realm: atEntity.realm,\n                target: atEntity.target,\n                cached_at: atEntity.cachedAt,\n                expires_on: atEntity.expiresOn,\n                extended_expires_on: atEntity.extendedExpiresOn,\n                refresh_on: atEntity.refreshOn,\n                key_id: atEntity.keyId,\n                token_type: atEntity.tokenType,\n            };\n        });\n\n        return accessTokens;\n    }\n\n    /**\n     * Serialize refreshTokens\n     * @param rtCache\n     */\n    static serializeRefreshTokens(rtCache: RefreshTokenCache): Record<string, SerializedRefreshTokenEntity> {\n        const refreshTokens: Record<string, SerializedRefreshTokenEntity> = {};\n        Object.keys(rtCache).map(function (key) {\n            const rtEntity = rtCache[key];\n            refreshTokens[key] = {\n                home_account_id: rtEntity.homeAccountId,\n                environment: rtEntity.environment,\n                credential_type: rtEntity.credentialType,\n                client_id: rtEntity.clientId,\n                secret: rtEntity.secret,\n                family_id: rtEntity.familyId,\n                target: rtEntity.target,\n                realm: rtEntity.realm\n            };\n        });\n\n        return refreshTokens;\n    }\n\n    /**\n     * Serialize amdtCache\n     * @param amdtCache\n     */\n    static serializeAppMetadata(amdtCache: AppMetadataCache): Record<string, SerializedAppMetadataEntity> {\n        const appMetadata: Record<string, SerializedAppMetadataEntity> = {};\n        Object.keys(amdtCache).map(function (key) {\n            const amdtEntity = amdtCache[key];\n            appMetadata[key] = {\n                client_id: amdtEntity.clientId,\n                environment: amdtEntity.environment,\n                family_id: amdtEntity.familyId,\n            };\n        });\n\n        return appMetadata;\n    }\n\n    /**\n     * Serialize the cache\n     * @param jsonContent\n     */\n    static serializeAllCache(inMemCache: InMemoryCache): JsonCache {\n        return {\n            Account: this.serializeAccounts(inMemCache.accounts),\n            IdToken: this.serializeIdTokens(inMemCache.idTokens),\n            AccessToken: this.serializeAccessTokens(inMemCache.accessTokens),\n            RefreshToken: this.serializeRefreshTokens(inMemCache.refreshTokens),\n            AppMetadata: this.serializeAppMetadata(inMemCache.appMetadata),\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccountEntity,\n    IdTokenEntity,\n    AccessTokenEntity,\n    RefreshTokenEntity,\n    AppMetadataEntity,\n    ServerTelemetryEntity,\n    ThrottlingEntity,\n    CacheManager,\n    Logger,\n    ValidCacheType,\n    ICrypto,\n    AuthorityMetadataEntity\n} from \"@azure/msal-common\";\nimport { Deserializer } from \"./serializer/Deserializer\";\nimport { Serializer } from \"./serializer/Serializer\";\nimport { InMemoryCache, JsonCache, CacheKVStore } from \"./serializer/SerializerTypes\";\n\n/**\n * This class implements Storage for node, reading cache from user specified storage location or an  extension library\n * @public\n */\nexport class NodeStorage extends CacheManager {\n    // Cache configuration, either set by user or default values.\n    private logger: Logger;\n    private cache: CacheKVStore = {};\n    private changeEmitters: Array<Function> = [];\n\n    constructor(logger: Logger, clientId: string, cryptoImpl: ICrypto) {\n        super(clientId, cryptoImpl);\n        this.logger = logger;\n    }\n\n    /**\n     * Queue up callbacks\n     * @param func - a callback function for cache change indication\n     */\n    registerChangeEmitter(func: () => void): void {\n        this.changeEmitters.push(func);\n    }\n\n    /**\n     * Invoke the callback when cache changes\n     */\n    emitChange(): void {\n        this.changeEmitters.forEach(func => func.call(null));\n    }\n\n    /**\n     * Converts cacheKVStore to InMemoryCache\n     * @param cache - key value store\n     */\n    cacheToInMemoryCache(cache: CacheKVStore): InMemoryCache {\n\n        const inMemoryCache: InMemoryCache = {\n            accounts: {},\n            idTokens: {},\n            accessTokens: {},\n            refreshTokens: {},\n            appMetadata: {},\n        };\n\n        for (const key in cache) {\n            if (cache[key as string] instanceof AccountEntity) {\n                inMemoryCache.accounts[key] = cache[key] as AccountEntity;\n            } else if (cache[key] instanceof IdTokenEntity) {\n                inMemoryCache.idTokens[key] = cache[key] as IdTokenEntity;\n            } else if (cache[key] instanceof AccessTokenEntity) {\n                inMemoryCache.accessTokens[key] = cache[key] as AccessTokenEntity;\n            } else if (cache[key] instanceof RefreshTokenEntity) {\n                inMemoryCache.refreshTokens[key] = cache[key] as RefreshTokenEntity;\n            } else if (cache[key] instanceof AppMetadataEntity) {\n                inMemoryCache.appMetadata[key] = cache[key] as AppMetadataEntity;\n            } else {\n                continue;\n            }\n        }\n\n        return inMemoryCache;\n    }\n\n    /**\n     * converts inMemoryCache to CacheKVStore\n     * @param inMemoryCache - kvstore map for inmemory\n     */\n    inMemoryCacheToCache(inMemoryCache: InMemoryCache): CacheKVStore {\n        // convert in memory cache to a flat Key-Value map\n        let cache = this.getCache();\n\n        cache = {\n            ...inMemoryCache.accounts,\n            ...inMemoryCache.idTokens,\n            ...inMemoryCache.accessTokens,\n            ...inMemoryCache.refreshTokens,\n            ...inMemoryCache.appMetadata\n        };\n        return cache;\n    }\n\n    /**\n     * gets the current in memory cache for the client\n     */\n    getInMemoryCache(): InMemoryCache {\n        this.logger.verbose(\"Getting in-memory cache\");\n\n        // convert the cache key value store to inMemoryCache\n        const inMemoryCache = this.cacheToInMemoryCache(this.getCache());\n        return inMemoryCache;\n    }\n\n    /**\n     * sets the current in memory cache for the client\n     * @param inMemoryCache - key value map in memory\n     */\n    setInMemoryCache(inMemoryCache: InMemoryCache): void{\n        this.logger.verbose(\"Setting in-memory cache\");\n\n        // convert and append the inMemoryCache to cacheKVStore\n        const cache = this.inMemoryCacheToCache(inMemoryCache);\n        this.setCache(cache);\n\n        this.emitChange();\n    }\n\n    /**\n     * get the current cache key-value store\n     */\n    getCache(): CacheKVStore {\n        this.logger.verbose(\"Getting cache key-value store\");\n        return this.cache;\n    }\n\n    /**\n     * sets the current cache (key value store)\n     * @param cacheMap - key value map\n     */\n    setCache(cache: CacheKVStore): void {\n        this.logger.verbose(\"Setting cache key value store\");\n        this.cache = cache;\n\n        // mark change in cache\n        this.emitChange();\n    }\n\n    /**\n     * Gets cache item with given key.\n     * @param key - lookup key for the cache entry\n     */\n    getItem(key: string): ValidCacheType {\n        this.logger.verbosePii(`Item key: ${key}`);\n\n        // read cache\n        const cache = this.getCache();\n        return cache[key];\n    }\n\n    /**\n     * Gets cache item with given key-value\n     * @param key - lookup key for the cache entry\n     * @param value - value of the cache entry\n     */\n    setItem(key: string, value: ValidCacheType): void {\n        this.logger.verbosePii(`Item key: ${key}`);\n\n        // read cache\n        const cache = this.getCache();\n        cache[key] = value;\n\n        // write to cache\n        this.setCache(cache);\n    }\n\n    /**\n     * fetch the account entity\n     * @param accountKey - lookup key to fetch cache type AccountEntity\n     */\n    getAccount(accountKey: string): AccountEntity | null {\n        const account = this.getItem(accountKey) as AccountEntity;\n        if (AccountEntity.isAccountEntity(account)) {\n            return account;\n        }\n        return null;\n    }\n\n    /**\n     * set account entity\n     * @param account - cache value to be set of type AccountEntity\n     */\n    setAccount(account: AccountEntity): void {\n        const accountKey = account.generateAccountKey();\n        this.setItem(accountKey, account);\n    }\n\n    /**\n     * fetch the idToken credential\n     * @param idTokenKey - lookup key to fetch cache type IdTokenEntity\n     */\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\n        const idToken = this.getItem(idTokenKey) as IdTokenEntity;\n        if (IdTokenEntity.isIdTokenEntity(idToken)) {\n            return idToken;\n        }\n        return null;\n    }\n\n    /**\n     * set idToken credential\n     * @param idToken - cache value to be set of type IdTokenEntity\n     */\n    setIdTokenCredential(idToken: IdTokenEntity): void {\n        const idTokenKey = idToken.generateCredentialKey();\n        this.setItem(idTokenKey, idToken);\n    }\n\n    /**\n     * fetch the accessToken credential\n     * @param accessTokenKey - lookup key to fetch cache type AccessTokenEntity\n     */\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\n        const accessToken = this.getItem(accessTokenKey) as AccessTokenEntity;\n        if (AccessTokenEntity.isAccessTokenEntity(accessToken)) {\n            return accessToken;\n        }\n        return null;\n    }\n\n    /**\n     * set accessToken credential\n     * @param accessToken -  cache value to be set of type AccessTokenEntity\n     */\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\n        const accessTokenKey = accessToken.generateCredentialKey();\n        this.setItem(accessTokenKey, accessToken);\n    }\n\n    /**\n     * fetch the refreshToken credential\n     * @param refreshTokenKey - lookup key to fetch cache type RefreshTokenEntity\n     */\n    getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null {\n        const refreshToken = this.getItem(refreshTokenKey) as RefreshTokenEntity;\n        if (RefreshTokenEntity.isRefreshTokenEntity(refreshToken)) {\n            return refreshToken as RefreshTokenEntity;\n        }\n        return null;\n    }\n\n    /**\n     * set refreshToken credential\n     * @param refreshToken - cache value to be set of type RefreshTokenEntity\n     */\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\n        const refreshTokenKey = refreshToken.generateCredentialKey();\n        this.setItem(refreshTokenKey, refreshToken);\n    }\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey - lookup key to fetch cache type AppMetadataEntity\n     */\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\n        const appMetadata: AppMetadataEntity = this.getItem(appMetadataKey) as AppMetadataEntity;\n        if (AppMetadataEntity.isAppMetadataEntity(appMetadataKey, appMetadata)) {\n            return appMetadata;\n        }\n        return null;\n    }\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata - cache value to be set of type AppMetadataEntity\n     */\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\n        const appMetadataKey = appMetadata.generateAppMetadataKey();\n        this.setItem(appMetadataKey, appMetadata);\n    }\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetrykey - lookup key to fetch cache type ServerTelemetryEntity\n     */\n    getServerTelemetry(serverTelemetrykey: string): ServerTelemetryEntity | null {\n        const serverTelemetryEntity: ServerTelemetryEntity = this.getItem(serverTelemetrykey) as ServerTelemetryEntity;\n        if (serverTelemetryEntity && ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetrykey, serverTelemetryEntity)) {\n            return serverTelemetryEntity;\n        }\n        return null;\n    }\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey - lookup key to fetch cache type ServerTelemetryEntity\n     * @param serverTelemetry - cache value to be set of type ServerTelemetryEntity\n     */\n    setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void {\n        this.setItem(serverTelemetryKey, serverTelemetry);\n    }\n\n    /**\n     * fetch authority metadata entity from the platform cache\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\n     */\n    getAuthorityMetadata(key: string): AuthorityMetadataEntity | null {\n        const authorityMetadataEntity: AuthorityMetadataEntity = this.getItem(key) as AuthorityMetadataEntity;\n        if (authorityMetadataEntity && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, authorityMetadataEntity)) {\n            return authorityMetadataEntity;\n        }\n        return null;\n    }\n\n    /**\n     * Get all authority metadata keys\n     */\n    getAuthorityMetadataKeys(): Array<string> {\n        return this.getKeys().filter((key) => {\n            return this.isAuthorityMetadata(key);\n        });\n    }\n\n    /**\n     * set authority metadata entity to the platform cache\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\n     * @param metadata - cache value to be set of type AuthorityMetadataEntity\n     */\n    setAuthorityMetadata(key: string, metadata: AuthorityMetadataEntity): void {\n        this.setItem(key, metadata);\n    }\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\n     */\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\n        const throttlingCache: ThrottlingEntity = this.getItem(throttlingCacheKey) as ThrottlingEntity;\n        if (throttlingCache && ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, throttlingCache)) {\n            return throttlingCache;\n        }\n        return null;\n    }\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\n     * @param throttlingCache - cache value to be set of type ThrottlingEntity\n     */\n    setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void {\n        this.setItem(throttlingCacheKey, throttlingCache);\n    }\n\n    /**\n     * Removes the cache item from memory with the given key.\n     * @param key - lookup key to remove a cache entity\n     * @param inMemory - key value map of the cache\n     */\n    removeItem(key: string): boolean {\n        this.logger.verbosePii(`Item key: ${key}`);\n\n        // read inMemoryCache\n        let result: boolean = false;\n        const cache = this.getCache();\n\n        if (!!cache[key]) {\n            delete cache[key];\n            result = true;\n        }\n\n        // write to the cache after removal\n        if (result) {\n            this.setCache(cache);\n            this.emitChange();\n        }\n        return result;\n    }\n\n    /**\n     * Checks whether key is in cache.\n     * @param key - look up key for a cache entity\n     */\n    containsKey(key: string): boolean {\n        return this.getKeys().includes(key);\n    }\n\n    /**\n     * Gets all keys in window.\n     */\n    getKeys(): string[] {\n        this.logger.verbose(\"Retrieving all cache keys\");\n\n        // read cache\n        const cache = this.getCache();\n        return [ ...Object.keys(cache)];\n    }\n\n    /**\n     * Clears all cache entries created by MSAL (except tokens).\n     */\n    clear(): void {\n        this.logger.verbose(\"Clearing cache entries created by MSAL\");\n\n        // read inMemoryCache\n        const cacheKeys = this.getKeys();\n\n        // delete each element\n        cacheKeys.forEach(key => {\n            this.removeItem(key);\n        });\n        this.emitChange();\n    }\n\n    /**\n     * Initialize in memory cache from an exisiting cache vault\n     * @param cache - blob formatted cache (JSON)\n     */\n    static generateInMemoryCache(cache: string): InMemoryCache {\n        return Deserializer.deserializeAllCache(\n            Deserializer.deserializeJSONBlob(cache)\n        );\n    }\n\n    /**\n     * retrieves the final JSON\n     * @param inMemoryCache - itemised cache read from the JSON\n     */\n    static generateJsonCache(inMemoryCache: InMemoryCache): JsonCache {\n        return Serializer.serializeAllCache(inMemoryCache);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NodeStorage } from \"./NodeStorage\";\nimport { StringUtils, AccountEntity, AccountInfo, Logger, ISerializableTokenCache, ICachePlugin, TokenCacheContext } from \"@azure/msal-common\";\nimport { InMemoryCache, JsonCache, SerializedAccountEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedIdTokenEntity, SerializedAppMetadataEntity, CacheKVStore } from \"./serializer/SerializerTypes\";\nimport { Deserializer } from \"./serializer/Deserializer\";\nimport { Serializer } from \"./serializer/Serializer\";\nimport { ITokenCache } from \"./ITokenCache\";\n\nconst defaultSerializedCache: JsonCache = {\n    Account: {},\n    IdToken: {},\n    AccessToken: {},\n    RefreshToken: {},\n    AppMetadata: {},\n};\n\n/**\n * In-memory token cache manager\n * @public\n */\nexport class TokenCache implements ISerializableTokenCache, ITokenCache {\n\n    private storage: NodeStorage;\n    private cacheHasChanged: boolean;\n    private cacheSnapshot: string;\n    private readonly persistence: ICachePlugin;\n    private logger: Logger;\n\n    constructor(storage: NodeStorage, logger: Logger, cachePlugin?: ICachePlugin) {\n        this.cacheHasChanged = false;\n        this.storage = storage;\n        this.storage.registerChangeEmitter(this.handleChangeEvent.bind(this));\n        if (cachePlugin) {\n            this.persistence = cachePlugin;\n        }\n        this.logger = logger;\n    }\n\n    /**\n     * Set to true if cache state has changed since last time serialize or writeToPersistence was called\n     */\n    hasChanged(): boolean {\n        return this.cacheHasChanged;\n    }\n\n    /**\n     * Serializes in memory cache to JSON\n     */\n    serialize(): string {\n        this.logger.verbose(\"Serializing in-memory cache\");\n        let finalState = Serializer.serializeAllCache(\n            this.storage.getInMemoryCache() as InMemoryCache\n        );\n\n        // if cacheSnapshot not null or empty, merge\n        if (!StringUtils.isEmpty(this.cacheSnapshot)) {\n            this.logger.verbose(\"Reading cache snapshot from disk\");\n            finalState = this.mergeState(\n                JSON.parse(this.cacheSnapshot),\n                finalState\n            );\n        } else {\n            this.logger.verbose(\"No cache snapshot to merge\");\n        }\n        this.cacheHasChanged = false;\n\n        return JSON.stringify(finalState);\n    }\n\n    /**\n     * Deserializes JSON to in-memory cache. JSON should be in MSAL cache schema format\n     * @param cache - blob formatted cache\n     */\n    deserialize(cache: string): void {\n        this.logger.verbose(\"Deserializing JSON to in-memory cache\");\n        this.cacheSnapshot = cache;\n\n        if (!StringUtils.isEmpty(this.cacheSnapshot)) {\n            this.logger.verbose(\"Reading cache snapshot from disk\");\n            const deserializedCache = Deserializer.deserializeAllCache(\n                this.overlayDefaults(JSON.parse(this.cacheSnapshot))\n            );\n            this.storage.setInMemoryCache(deserializedCache);\n        } else {\n            this.logger.verbose(\"No cache snapshot to deserialize\");\n        }\n    }\n\n    /**\n     * Fetches the cache key-value map\n     */\n    getKVStore(): CacheKVStore {\n        return this.storage.getCache();\n    }\n\n    /**\n     * API that retrieves all accounts currently in cache to the user\n     */\n    async getAllAccounts(): Promise<AccountInfo[]> {\n\n        this.logger.verbose(\"getAllAccounts called\");\n        let cacheContext;\n        try {\n            if (this.persistence) {\n                cacheContext = new TokenCacheContext(this, false);\n                await this.persistence.beforeCacheAccess(cacheContext);\n            }\n            return this.storage.getAllAccounts();\n        } finally {\n            if (this.persistence && cacheContext) {\n                await this.persistence.afterCacheAccess(cacheContext);\n            }\n        }\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId - unique identifier for an account (uid.utid)\n     */\n    async getAccountByHomeId(homeAccountId: string): Promise<AccountInfo | null> {\n        const allAccounts = await this.getAllAccounts();\n        if (!StringUtils.isEmpty(homeAccountId) && allAccounts && allAccounts.length) {\n            return allAccounts.filter(accountObj => accountObj.homeAccountId === homeAccountId)[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId - unique identifier of an account (sub/obj when homeAccountId cannot be populated)\n     */\n    async getAccountByLocalId(localAccountId: string): Promise<AccountInfo | null> {\n        const allAccounts = await this.getAllAccounts();\n        if (!StringUtils.isEmpty(localAccountId) && allAccounts && allAccounts.length) {\n            return allAccounts.filter(accountObj => accountObj.localAccountId === localAccountId)[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * API to remove a specific account and the relevant data from cache\n     * @param account - AccountInfo passed by the user\n     */\n    async removeAccount(account: AccountInfo): Promise<void> {\n        this.logger.verbose(\"removeAccount called\");\n        let cacheContext;\n        try {\n            if (this.persistence) {\n                cacheContext = new TokenCacheContext(this, true);\n                await this.persistence.beforeCacheAccess(cacheContext);\n            }\n            this.storage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n        } finally {\n            if (this.persistence && cacheContext) {\n                await this.persistence.afterCacheAccess(cacheContext);\n            }\n        }\n    }\n\n    /**\n     * Called when the cache has changed state.\n     */\n    private handleChangeEvent() {\n        this.cacheHasChanged = true;\n    }\n\n    /**\n     * Merge in memory cache with the cache snapshot.\n     * @param oldState - cache before changes\n     * @param currentState - current cache state in the library\n     */\n    private mergeState(oldState: JsonCache, currentState: JsonCache): JsonCache {\n        this.logger.verbose(\"Merging in-memory cache with cache snapshot\");\n        const stateAfterRemoval = this.mergeRemovals(oldState, currentState);\n        return this.mergeUpdates(stateAfterRemoval, currentState);\n    }\n\n    /**\n     * Deep update of oldState based on newState values\n     * @param oldState - cache before changes\n     * @param newState - updated cache\n     */\n    private mergeUpdates(oldState: object, newState: object): JsonCache {\n        Object.keys(newState).forEach((newKey: string) => {\n            const newValue = newState[newKey];\n\n            // if oldState does not contain value but newValue does, add it\n            if (!oldState.hasOwnProperty(newKey)) {\n                if (newValue !== null) {\n                    oldState[newKey] = newValue;\n                }\n            } else {\n                // both oldState and newState contain the key, do deep update\n                const newValueNotNull = newValue !== null;\n                const newValueIsObject = typeof newValue === \"object\";\n                const newValueIsNotArray = !Array.isArray(newValue);\n                const oldStateNotUndefinedOrNull = typeof oldState[newKey] !== \"undefined\" && oldState[newKey] !== null;\n\n                if (newValueNotNull && newValueIsObject && newValueIsNotArray && oldStateNotUndefinedOrNull) {\n                    this.mergeUpdates(oldState[newKey], newValue);\n                } else {\n                    oldState[newKey] = newValue;\n                }\n            }\n        });\n\n        return oldState as JsonCache;\n    }\n\n    /**\n     * Removes entities in oldState that the were removed from newState. If there are any unknown values in root of\n     * oldState that are not recognized, they are left untouched.\n     * @param oldState - cache before changes\n     * @param newState - updated cache\n     */\n    private mergeRemovals(oldState: JsonCache, newState: JsonCache): JsonCache {\n        this.logger.verbose(\"Remove updated entries in cache\");\n        const accounts = oldState.Account ? this.mergeRemovalsDict<SerializedAccountEntity>(oldState.Account, newState.Account) : oldState.Account;\n        const accessTokens = oldState.AccessToken ? this.mergeRemovalsDict<SerializedAccessTokenEntity>(oldState.AccessToken, newState.AccessToken) : oldState.AccessToken;\n        const refreshTokens = oldState.RefreshToken ? this.mergeRemovalsDict<SerializedRefreshTokenEntity>(oldState.RefreshToken, newState.RefreshToken) : oldState.RefreshToken;\n        const idTokens = oldState.IdToken ? this.mergeRemovalsDict<SerializedIdTokenEntity>(oldState.IdToken, newState.IdToken) : oldState.IdToken;\n        const appMetadata = oldState.AppMetadata ? this.mergeRemovalsDict<SerializedAppMetadataEntity>(oldState.AppMetadata, newState.AppMetadata) : oldState.AppMetadata;\n\n        return {\n            ...oldState,\n            Account: accounts,\n            AccessToken: accessTokens,\n            RefreshToken: refreshTokens,\n            IdToken: idTokens,\n            AppMetadata: appMetadata\n        };\n    }\n\n    /**\n     * Helper to merge new cache with the old one\n     * @param oldState - cache before changes\n     * @param newState - updated cache\n     */\n    private mergeRemovalsDict<T>(oldState: Record<string, T>, newState?: Record<string, T>): Record<string, T> {\n        const finalState = { ...oldState };\n        Object.keys(oldState).forEach((oldKey) => {\n            if (!newState || !(newState.hasOwnProperty(oldKey))) {\n                delete finalState[oldKey];\n            }\n        });\n        return finalState;\n    }\n\n    /**\n     * Helper to overlay as a part of cache merge\n     * @param passedInCache - cache read from the blob\n     */\n    private overlayDefaults(passedInCache: JsonCache): JsonCache {\n        this.logger.verbose(\"Overlaying input cache with the default cache\");\n        return {\n            Account: {\n                ...defaultSerializedCache.Account,\n                ...passedInCache.Account,\n            },\n            IdToken: {\n                ...defaultSerializedCache.IdToken,\n                ...passedInCache.IdToken,\n            },\n            AccessToken: {\n                ...defaultSerializedCache.AccessToken,\n                ...passedInCache.AccessToken,\n            },\n            RefreshToken: {\n                ...defaultSerializedCache.RefreshToken,\n                ...passedInCache.RefreshToken,\n            },\n            AppMetadata: {\n                ...defaultSerializedCache.AppMetadata,\n                ...passedInCache.AppMetadata,\n            },\n        };\n    }\n}\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-node\";\nexport const version = \"1.1.0\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthorizationCodeClient,\n    ClientConfiguration,\n    RefreshTokenClient,\n    AuthenticationResult,\n    Authority,\n    AuthorityFactory,\n    BaseAuthRequest,\n    SilentFlowClient,\n    Logger,\n    ServerTelemetryManager,\n    ServerTelemetryRequest,\n    CommonSilentFlowRequest,\n    CommonRefreshTokenRequest,\n    CommonAuthorizationCodeRequest,\n    CommonAuthorizationUrlRequest,\n    AuthenticationScheme,\n    ResponseMode,\n    AuthorityOptions,\n    OIDC_DEFAULT_SCOPES,\n    AzureRegionConfiguration\n} from \"@azure/msal-common\";\nimport { Configuration, buildAppConfiguration } from \"../config/Configuration\";\nimport { CryptoProvider } from \"../crypto/CryptoProvider\";\nimport { NodeStorage } from \"../cache/NodeStorage\";\nimport { Constants as NodeConstants, ApiId } from \"../utils/Constants\";\nimport { TokenCache } from \"../cache/TokenCache\";\nimport { ClientAssertion } from \"./ClientAssertion\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { RefreshTokenRequest } from \"../request/RefreshTokenRequest\";\nimport { SilentFlowRequest } from \"../request/SilentFlowRequest\";\nimport { version, name } from \"../packageMetadata\";\n\n/**\n * Base abstract class for all ClientApplications - public and confidential\n * @public\n */\nexport abstract class ClientApplication {\n\n    private readonly cryptoProvider: CryptoProvider;\n    private tokenCache: TokenCache;\n\n    /**\n     * Platform storage object\n     */\n    protected storage: NodeStorage;\n    /**\n     * Logger object to log the application flow\n     */\n    protected logger: Logger;\n    /**\n     * Platform configuration initialized by the application\n     */\n    protected config: Configuration;\n    /**\n     * Client assertion passed by the user for confidential client flows\n     */\n    protected clientAssertion: ClientAssertion;\n    /**\n     * Client secret passed by the user for confidential client flows\n     */\n    protected clientSecret: string;\n\n    /**\n     * Constructor for the ClientApplication\n     */\n    protected constructor(configuration: Configuration) {\n        this.config = buildAppConfiguration(configuration);\n        this.cryptoProvider = new CryptoProvider();\n        this.logger = new Logger(this.config.system!.loggerOptions!, name, version);\n        this.storage = new NodeStorage(this.logger, this.config.auth.clientId, this.cryptoProvider);\n        this.tokenCache = new TokenCache(\n            this.storage,\n            this.logger,\n            this.config.cache!.cachePlugin\n        );\n    }\n\n    /**\n     * Creates the URL of the authorization request, letting the user input credentials and consent to the\n     * application. The URL targets the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * `acquireTokenByCode(AuthorizationCodeRequest)`.\n     */\n    async getAuthCodeUrl(request: AuthorizationUrlRequest): Promise<string> {\n        this.logger.info(\"getAuthCodeUrl called\");\n        const validRequest: CommonAuthorizationUrlRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            responseMode: request.responseMode || ResponseMode.QUERY,\n            authenticationScheme: AuthenticationScheme.BEARER\n        };\n        \n        const authClientConfig = await this.buildOauthClientConfiguration(\n            validRequest.authority\n        );\n        this.logger.verbose(\"Auth client config generated\");\n        const authorizationCodeClient = new AuthorizationCodeClient(\n            authClientConfig\n        );\n        return authorizationCodeClient.getAuthCodeUrl(validRequest);\n    }\n\n    /**\n     * Acquires a token by exchanging the Authorization Code received from the first step of OAuth2.0\n     * Authorization Code flow.\n     *\n     * `getAuthCodeUrl(AuthorizationCodeUrlRequest)` can be used to create the URL for the first step of OAuth2.0\n     * Authorization Code flow. Ensure that values for redirectUri and scopes in AuthorizationCodeUrlRequest and\n     * AuthorizationCodeRequest are the same.\n     */\n    async acquireTokenByCode(request: AuthorizationCodeRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByCode called\");\n        const validRequest: CommonAuthorizationCodeRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            authenticationScheme: AuthenticationScheme.BEARER\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByCode, validRequest.correlationId!);\n        try {\n            const authClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                serverTelemetryManager\n            );\n            this.logger.verbose(\"Auth client config generated\");\n            const authorizationCodeClient = new AuthorizationCodeClient(\n                authClientConfig\n            );\n            return authorizationCodeClient.acquireToken(validRequest);\n        } catch (e) {\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires a token by exchanging the refresh token provided for a new set of tokens.\n     *\n     * This API is provided only for scenarios where you would like to migrate from ADAL to MSAL. Otherwise, it is\n     * recommended that you use `acquireTokenSilent()` for silent scenarios. When using `acquireTokenSilent()`, MSAL will\n     * handle the caching and refreshing of tokens automatically.\n     */\n    async acquireTokenByRefreshToken(request: RefreshTokenRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByRefreshToken called\");\n        const validRequest: CommonRefreshTokenRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            authenticationScheme: AuthenticationScheme.BEARER\n        };\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByRefreshToken, validRequest.correlationId);\n        try {\n            const refreshTokenClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                serverTelemetryManager\n            );\n            this.logger.verbose(\"Auth client config generated\");\n            const refreshTokenClient = new RefreshTokenClient(\n                refreshTokenClientConfig\n            );\n            return refreshTokenClient.acquireToken(validRequest);\n        } catch (e) {\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires a token silently when a user specifies the account the token is requested for.\n     *\n     * This API expects the user to provide an account object and looks into the cache to retrieve the token if present.\n     * There is also an optional \"forceRefresh\" boolean the user can send to bypass the cache for access_token and id_token.\n     * In case the refresh_token is expired or not found, an error is thrown\n     * and the guidance is for the user to call any interactive token acquisition API (eg: `acquireTokenByCode()`).\n     */\n    async acquireTokenSilent(request: SilentFlowRequest): Promise<AuthenticationResult | null> {\n        const validRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            forceRefresh: request.forceRefresh || false\n        };\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent, validRequest.correlationId, validRequest.forceRefresh);\n        try {\n            const silentFlowClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                serverTelemetryManager\n            );\n            const silentFlowClient = new SilentFlowClient(\n                silentFlowClientConfig\n            );\n            return silentFlowClient.acquireToken(validRequest);\n        } catch (e) {\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the token cache for the application.\n     */\n    getTokenCache(): TokenCache {\n        this.logger.info(\"getTokenCache called\");\n        return this.tokenCache;\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger - Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    /**\n     * Builds the common configuration to be passed to the common component based on the platform configurarion\n     * @param authority - user passed authority in configuration\n     * @param serverTelemetryManager - initializes servertelemetry if passed\n     */\n    protected async buildOauthClientConfiguration(authority: string, serverTelemetryManager?: ServerTelemetryManager, azureRegionConfiguration?: AzureRegionConfiguration): Promise<ClientConfiguration> {\n        this.logger.verbose(\"buildOauthClientConfiguration called\");\n        // using null assertion operator as we ensure that all config values have default values in buildConfiguration()\n        this.logger.verbose(`building oauth client configuration with the authority: ${authority}`);\n\n        const discoveredAuthority = await this.createAuthority(authority, azureRegionConfiguration);\n\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities\n            },\n            loggerOptions: {\n                loggerCallback: this.config.system!.loggerOptions!\n                    .loggerCallback,\n                piiLoggingEnabled: this.config.system!.loggerOptions!\n                    .piiLoggingEnabled,\n            },\n            cryptoInterface: this.cryptoProvider,\n            networkInterface: this.config.system!.networkClient,\n            storageInterface: this.storage,\n            serverTelemetryManager: serverTelemetryManager,\n            clientCredentials: {\n                clientSecret: this.clientSecret,\n                clientAssertion: this.clientAssertion ? this.getClientAssertion(discoveredAuthority) : undefined,\n            },\n            libraryInfo: {\n                sku: NodeConstants.MSAL_SKU,\n                version: version,\n                cpu: process.arch || \"\",\n                os: process.platform || \"\",\n            },\n            persistencePlugin: this.config.cache!.cachePlugin,\n            serializableCache: this.tokenCache,\n        };\n    }\n\n    private getClientAssertion(authority: Authority): { assertion: string, assertionType: string } {\n        return {\n            assertion: this.clientAssertion.getJwt(this.cryptoProvider, this.config.auth.clientId, authority.tokenEndpoint),\n            assertionType: NodeConstants.JWT_BEARER_ASSERTION_TYPE\n        };\n    }\n\n    /**\n     * Generates a request with the default scopes & generates a correlationId.\n     * @param authRequest - BaseAuthRequest for initialization\n     */\n    protected initializeBaseRequest(authRequest: Partial<BaseAuthRequest>): BaseAuthRequest {\n        this.logger.verbose(\"initializeRequestScopes called\");\n        // Default authenticationScheme to Bearer, log that POP isn't supported yet\n        if (authRequest.authenticationScheme && authRequest.authenticationScheme === AuthenticationScheme.POP) {\n            this.logger.verbose(\"Authentication Scheme 'pop' is not supported yet, setting Authentication Scheme to 'Bearer' for request\");\n        }\n\n        authRequest.authenticationScheme = AuthenticationScheme.BEARER;\n\n        return {\n            ...authRequest,\n            scopes: [...((authRequest && authRequest.scopes) || []), ...OIDC_DEFAULT_SCOPES],\n            correlationId: authRequest && authRequest.correlationId || this.cryptoProvider.createNewGuid(),\n            authority: authRequest.authority || this.config.auth.authority!\n        };\n    }\n\n    /**\n     * Initializes the server telemetry payload\n     * @param apiId - Id for a specific request\n     * @param correlationId - GUID\n     * @param forceRefresh - boolean to indicate network call\n     */\n    protected initializeServerTelemetryManager(apiId: number, correlationId: string, forceRefresh?: boolean): ServerTelemetryManager {\n        const telemetryPayload: ServerTelemetryRequest = {\n            clientId: this.config.auth.clientId,\n            correlationId: correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false\n        };\n\n        return new ServerTelemetryManager(telemetryPayload, this.storage);\n    }\n\n    /**\n     * Create authority instance. If authority not passed in request, default to authority set on the application\n     * object. If no authority set in application object, then default to common authority.\n     * @param authorityString - authority from user configuration\n     */\n    private async createAuthority(authorityString: string, azureRegionConfiguration?: AzureRegionConfiguration): Promise<Authority> {\n        this.logger.verbose(\"createAuthority called\");\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode!,\n            knownAuthorities: this.config.auth.knownAuthorities!,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata!,\n            authorityMetadata: this.config.auth.authorityMetadata!,\n            azureRegionConfiguration \n        };\n        return await AuthorityFactory.createDiscoveredInstance(authorityString, this.config.system!.networkClient!, this.storage, authorityOptions);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ApiId } from \"../utils/Constants\";\nimport {\n    DeviceCodeClient,\n    AuthenticationResult,\n    CommonDeviceCodeRequest,\n    CommonUsernamePasswordRequest,\n    UsernamePasswordClient\n} from \"@azure/msal-common\";\nimport { Configuration } from \"../config/Configuration\";\nimport { ClientApplication } from \"./ClientApplication\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { DeviceCodeRequest } from \"../request/DeviceCodeRequest\";\nimport { UsernamePasswordRequest } from \"../request/UsernamePasswordRequest\";\n\n/**\n * This class is to be used to acquire tokens for public client applications (desktop, mobile). Public client applications\n * are not trusted to safely store application secrets, and therefore can only request tokens in the name of an user.\n * @public\n */\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\n    /**\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal.\n     * - authority: the authority URL for your application.\n     *\n     * AAD authorities are of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\n     * - If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * - If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * - If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * - To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * Azure B2C authorities are of the form https://\\{instance\\}/\\{tenant\\}/\\{policy\\}. Each policy is considered\n     * its own authority. You will have to set the all of the knownAuthorities at the time of the client application\n     * construction.\n     *\n     * ADFS authorities are of the form https://\\{instance\\}/adfs.\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n    }\n\n    /**\n     * Acquires a token from the authority using OAuth2.0 device code flow.\n     * This flow is designed for devices that do not have access to a browser or have input constraints.\n     * The authorization server issues a DeviceCode object with a verification code, an end-user code,\n     * and the end-user verification URI. The DeviceCode object is provided through a callback, and the end-user should be\n     * instructed to use another device to navigate to the verification URI to input credentials.\n     * Since the client cannot receive incoming requests, it polls the authorization server repeatedly\n     * until the end-user completes input of credentials.\n     */\n    public async acquireTokenByDeviceCode(request: DeviceCodeRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByDeviceCode called\");\n        const validRequest: CommonDeviceCodeRequest = Object.assign(request, this.initializeBaseRequest(request));\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByDeviceCode, validRequest.correlationId!);\n        try {\n            const deviceCodeConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                serverTelemetryManager\n            );\n            this.logger.verbose(\"Auth client config generated\");\n            const deviceCodeClient = new DeviceCodeClient(deviceCodeConfig);\n            return deviceCodeClient.acquireToken(validRequest);\n        } catch (e) {\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires tokens with password grant by exchanging client applications username and password for credentials\n     *\n     * The latest OAuth 2.0 Security Best Current Practice disallows the password grant entirely.\n     * More details on this recommendation at https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4\n     * Microsoft's documentation and recommendations are at:\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#usernamepassword\n     *\n     * @param request - UsenamePasswordRequest\n     */\n    async acquireTokenByUsernamePassword(request: UsernamePasswordRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByUsernamePassword called\");\n        const validRequest: CommonUsernamePasswordRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request)\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByUsernamePassword, validRequest.correlationId!);\n        try {\n            const usernamePasswordClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                serverTelemetryManager\n            );\n            this.logger.verbose(\"Auth client config generated\");\n            const usernamePasswordClient = new UsernamePasswordClient(usernamePasswordClientConfig);\n            return usernamePasswordClient.acquireToken(validRequest);\n        } catch (e) {\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { sign } from \"jsonwebtoken\";\nimport { TimeUtils, ClientAuthError } from \"@azure/msal-common\";\nimport { CryptoProvider } from \"../crypto/CryptoProvider\";\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\nimport { JwtConstants } from \"../utils/Constants\";\n\n/**\n * Client assertion of type jwt-bearer used in confidential client flows\n * @public\n */\nexport class ClientAssertion {\n\n    private jwt: string;\n    private privateKey: string;\n    private thumbprint: string;\n    private expirationTime: number;\n    private issuer: string;\n    private jwtAudience: string;\n    private publicCertificate: Array<string>;\n\n    /**\n     * Initialize the ClientAssertion class from the clientAssertion passed by the user\n     * @param assertion - refer https://tools.ietf.org/html/rfc7521\n     */\n    public static fromAssertion(assertion: string): ClientAssertion {\n        const clientAssertion = new ClientAssertion();\n        clientAssertion.jwt = assertion;\n        return clientAssertion;\n    }\n\n    /**\n     * Initialize the ClientAssertion class from the certificate passed by the user\n     * @param thumbprint - identifier of a certificate\n     * @param privateKey - secret key\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\n     */\n    public static fromCertificate(thumbprint: string, privateKey: string, publicCertificate?: string): ClientAssertion {\n        const clientAssertion = new ClientAssertion();\n        clientAssertion.privateKey = privateKey;\n        clientAssertion.thumbprint = thumbprint;\n        if (publicCertificate) {\n            clientAssertion.publicCertificate = this.parseCertificate(publicCertificate);\n        }\n        return clientAssertion;\n    }\n\n    /**\n     * Update JWT for certificate based clientAssertion, if passed by the user, uses it as is\n     * @param cryptoProvider - library's crypto helper\n     * @param issuer - iss claim\n     * @param jwtAudience - aud claim\n     */\n    public getJwt(cryptoProvider: CryptoProvider, issuer: string, jwtAudience: string): string {\n        // if assertion was created from certificate, check if jwt is expired and create new one.\n        if (this.privateKey && this.thumbprint) {\n\n            if (this.jwt && !this.isExpired() && issuer === this.issuer && jwtAudience === this.jwtAudience) {\n                return this.jwt;\n            }\n\n            return this.createJwt(cryptoProvider, issuer, jwtAudience);\n        }\n\n        /*\n         * if assertion was created by caller, then we just append it. It is up to the caller to\n         * ensure that it contains necessary claims and that it is not expired.\n         */\n        if (this.jwt) {\n            return this.jwt;\n        }\n\n        throw ClientAuthError.createInvalidAssertionError();\n    }\n\n    /**\n     * JWT format and required claims specified: https://tools.ietf.org/html/rfc7523#section-3\n     */\n    private createJwt(cryptoProvider: CryptoProvider, issuer: string, jwtAudience: string): string {\n\n        this.issuer = issuer;\n        this.jwtAudience = jwtAudience;\n        const issuedAt = TimeUtils.nowSeconds();\n        this.expirationTime = issuedAt + 600;\n\n        const header = {\n            [JwtConstants.ALGORITHM]: JwtConstants.RSA_256,\n            [JwtConstants.X5T]: EncodingUtils.base64EncodeUrl(this.thumbprint, \"hex\")\n        };\n\n        if (this.publicCertificate) {\n            Object.assign(header, {\n                [JwtConstants.X5C]: this.publicCertificate\n            });\n        }\n\n        const payload = {\n            [JwtConstants.AUDIENCE]: this.jwtAudience,\n            [JwtConstants.EXPIRATION_TIME]: this.expirationTime,\n            [JwtConstants.ISSUER]: this.issuer,\n            [JwtConstants.SUBJECT]: this.issuer,\n            [JwtConstants.NOT_BEFORE]: issuedAt,\n            [JwtConstants.JWT_ID]: cryptoProvider.createNewGuid()\n        };\n\n        this.jwt = sign(payload, this.privateKey, { header: header });\n        return this.jwt;\n    }\n\n    /**\n     * Utility API to check expiration\n     */\n    private isExpired(): boolean {\n        return this.expirationTime < TimeUtils.nowSeconds();\n    }\n\n    /**\n     * Extracts the raw certs from a given certificate string and returns them in an array.\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\n     */\n    public static parseCertificate(publicCertificate: string): Array<string> {\n        /**\n         * This is regex to identify the certs in a given certificate string.\n         * We want to look for the contents between the BEGIN and END certificate strings, without the associated newlines.\n         * The information in parens \"(.+?)\" is the capture group to represent the cert we want isolated.\n         * \".\" means any string character, \"+\" means match 1 or more times, and \"?\" means the shortest match.\n         * The \"g\" at the end of the regex means search the string globally, and the \"s\" enables the \".\" to match newlines.\n         */\n        const regexToFindCerts = /-----BEGIN CERTIFICATE-----\\n(.+?)\\n-----END CERTIFICATE-----/gs;\n        const certs: string[] = [];\n\n        let matches;\n        while ((matches = regexToFindCerts.exec(publicCertificate)) !== null) {\n            // matches[1] represents the first parens capture group in the regex.\n            certs.push(matches[1].replace(/\\n/, \"\"));\n        }\n\n        return certs;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientApplication } from \"./ClientApplication\";\nimport { Configuration } from \"../config/Configuration\";\nimport { ClientAssertion } from \"./ClientAssertion\";\nimport { ApiId , REGION_ENVIRONMENT_VARIABLE } from \"../utils/Constants\";\nimport {\n    ClientCredentialClient,\n    OnBehalfOfClient,\n    CommonClientCredentialRequest,\n    CommonOnBehalfOfRequest,\n    AuthenticationResult,\n    StringUtils,\n    ClientAuthError,\n    AzureRegionConfiguration\n} from \"@azure/msal-common\";\nimport { IConfidentialClientApplication } from \"./IConfidentialClientApplication\";\nimport { OnBehalfOfRequest } from \"../request/OnBehalfOfRequest\";\nimport { ClientCredentialRequest } from \"../request/ClientCredentialRequest\";\n\n/**\n *  This class is to be used to acquire tokens for confidential client applications (webApp, webAPI). Confidential client applications\n *  will configure application secrets, client certificates/assertions as applicable\n * @public\n */\nexport class ConfidentialClientApplication extends ClientApplication implements IConfidentialClientApplication{\n\n    /**\n     * Constructor for the ConfidentialClientApplication\n     *\n     * Required attributes in the Configuration object are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our application registration portal\n     * - authority: the authority URL for your application.\n     * - client credential: Must set either client secret, certificate, or assertion for confidential clients. You can obtain a client secret from the application registration portal.\n     *\n     * In Azure AD, authority is a URL indicating of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://\\{instance\\}/tfp/\\{tenant\\}/\\{policyName\\}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param Configuration - configuration object for the MSAL ConfidentialClientApplication instance\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n        this.setClientCredential(this.config);\n    }\n\n    /**\n     * Acquires tokens from the authority for the application (not for an end user).\n     */\n    public async acquireTokenByClientCredential(request: ClientCredentialRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByClientCredential called\");\n        const validRequest: CommonClientCredentialRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request)\n        };\n        const azureRegionConfiguration: AzureRegionConfiguration = {\n            azureRegion: validRequest.azureRegion,\n            environmentRegion: process.env[REGION_ENVIRONMENT_VARIABLE] \n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByClientCredential, validRequest.correlationId, validRequest.skipCache);\n        try {\n            const clientCredentialConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                serverTelemetryManager,\n                azureRegionConfiguration,\n            );\n            this.logger.verbose(\"Auth client config generated\");\n            const clientCredentialClient = new ClientCredentialClient(clientCredentialConfig);\n            return clientCredentialClient.acquireToken(validRequest);\n        } catch(e) {\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires tokens from the authority for the application.\n     *\n     * Used in scenarios where the current app is a middle-tier service which was called with a token\n     * representing an end user. The current app can use the token (oboAssertion) to request another\n     * token to access downstream web API, on behalf of that user.\n     *\n     * The current middle-tier app has no user interaction to obtain consent.\n     * See how to gain consent upfront for your middle-tier app from this article.\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application\n     */\n    public async acquireTokenOnBehalfOf(request: OnBehalfOfRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenOnBehalfOf called\");\n        const validRequest: CommonOnBehalfOfRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request)\n        };\n        const clientCredentialConfig = await this.buildOauthClientConfiguration(\n            validRequest.authority\n        );\n        this.logger.verbose(\"Auth client config generated\");\n        const oboClient = new OnBehalfOfClient(clientCredentialConfig);\n        return oboClient.acquireToken(validRequest);\n    }\n\n    private setClientCredential(configuration: Configuration): void {\n\n        const clientSecretNotEmpty = !StringUtils.isEmpty(configuration.auth.clientSecret!);\n        const clientAssertionNotEmpty = !StringUtils.isEmpty(configuration.auth.clientAssertion!);\n        const certificate = configuration.auth.clientCertificate!;\n        const certificateNotEmpty = !StringUtils.isEmpty(certificate.thumbprint) || !StringUtils.isEmpty(certificate.privateKey);\n\n        // Check that at most one credential is set on the application\n        if (\n            clientSecretNotEmpty && clientAssertionNotEmpty ||\n            clientAssertionNotEmpty && certificateNotEmpty ||\n            clientSecretNotEmpty && certificateNotEmpty) {\n            throw ClientAuthError.createInvalidCredentialError();\n        }\n\n        if (clientSecretNotEmpty) {\n            this.clientSecret = configuration.auth.clientSecret!;\n            return;\n        }\n\n        if (clientAssertionNotEmpty) {\n            this.clientAssertion = ClientAssertion.fromAssertion(configuration.auth.clientAssertion!);\n            return;\n        }\n\n        if (!certificateNotEmpty) {\n            throw ClientAuthError.createInvalidCredentialError();\n        } else {\n            this.clientAssertion = ClientAssertion.fromCertificate(certificate.thumbprint, certificate.privateKey, configuration.auth.clientCertificate?.x5c);\n        }\n    }\n}\n"],"names":["_defineProperty","Constants","name","version","DEFAULT_SYSTEM_OPTIONS","uuidv4","NodeConstants"],"mappings":"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"}